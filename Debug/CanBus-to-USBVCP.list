
CanBus-to-USBVCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800c290  0800c290  0000d290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c708  0800c708  0000e1e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c708  0800c708  0000e1e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c708  0800c708  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c708  0800c708  0000d708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c70c  0800c70c  0000d70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800c710  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000154c  200001e4  0800c8f4  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001730  0800c8f4  0000e730  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015eec  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fc8  00000000  00000000  000240f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  000280c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee8  00000000  00000000  00029458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e143  00000000  00000000  0002a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb7d  00000000  00000000  00048483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ed79  00000000  00000000  00065000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103d79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000494c  00000000  00000000  00103dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00108708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c278 	.word	0x0800c278

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800c278 	.word	0x0800c278

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <init_app>:
/* extern variables */
extern CAN_HandleTypeDef hcan;
canbus_msg msg = {.id=0x7E, .dlc=8};

void init_app(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
    init_canhw(&hcan);
 8000248:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <init_app+0x20>)
 800024a:	0018      	movs	r0, r3
 800024c:	f000 f833 	bl	80002b6 <init_canhw>
    msg.data32[1] = 0;
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <init_app+0x24>)
 8000252:	2200      	movs	r2, #0
 8000254:	615a      	str	r2, [r3, #20]
    msg.data32[0] = 0xFF;
 8000256:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <init_app+0x24>)
 8000258:	22ff      	movs	r2, #255	@ 0xff
 800025a:	611a      	str	r2, [r3, #16]
}
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	46c0      	nop			@ (mov r8, r8)
 8000264:	20000330 	.word	0x20000330
 8000268:	20000000 	.word	0x20000000

0800026c <task_app>:
{
    deinit_canhw(&hcan);
}

void task_app()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    task_canhw(&hcan);
 8000270:	4b06      	ldr	r3, [pc, #24]	@ (800028c <task_app+0x20>)
 8000272:	0018      	movs	r0, r3
 8000274:	f000 f817 	bl	80002a6 <task_canhw>
    canhw_send(&hcan, &msg);
 8000278:	4a05      	ldr	r2, [pc, #20]	@ (8000290 <task_app+0x24>)
 800027a:	4b04      	ldr	r3, [pc, #16]	@ (800028c <task_app+0x20>)
 800027c:	0011      	movs	r1, r2
 800027e:	0018      	movs	r0, r3
 8000280:	f000 f8fa 	bl	8000478 <canhw_send>
}
 8000284:	46c0      	nop			@ (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	20000330 	.word	0x20000330
 8000290:	20000000 	.word	0x20000000

08000294 <cb_app>:

void cb_app(canbus_msg *rxmsg, CAN_RxHeaderTypeDef *rxHeader)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]

}
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	b002      	add	sp, #8
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <task_canhw>:
#include "can.h"

#if defined(HAL_CAN_MODULE_ENABLED)

void task_canhw(CAN_HandleTypeDef *hcan)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b082      	sub	sp, #8
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
    
}
 80002ae:	46c0      	nop			@ (mov r8, r8)
 80002b0:	46bd      	mov	sp, r7
 80002b2:	b002      	add	sp, #8
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <init_canhw>:

void init_canhw(CAN_HandleTypeDef *hcan)
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	b082      	sub	sp, #8
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
    _canhw_set_filter(hcan);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 f80d 	bl	80002e0 <_canhw_set_filter>
    _canhw_set_irq(hcan);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 f833 	bl	8000334 <_canhw_set_irq>
    _canhw_start(hcan);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 f83c 	bl	800034e <_canhw_start>
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b002      	add	sp, #8
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <_canhw_set_filter>:
{
    
}

void _canhw_set_filter(CAN_HandleTypeDef *hcan)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
    static CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; // set fifo assignment
 80002e8:	4b10      	ldr	r3, [pc, #64]	@ (800032c <_canhw_set_filter+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterIdLow = 0x000;                     // accept all from 0x00
 80002ee:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <_canhw_set_filter+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterIdHigh = 0x7FF << 5;               // accept all to 0x7FF
 80002f4:	4b0d      	ldr	r3, [pc, #52]	@ (800032c <_canhw_set_filter+0x4c>)
 80002f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000330 <_canhw_set_filter+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterMaskIdHigh = 0x000;
 80002fa:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <_canhw_set_filter+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x000;
 8000300:	4b0a      	ldr	r3, [pc, #40]	@ (800032c <_canhw_set_filter+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // set filter scale
 8000306:	4b09      	ldr	r3, [pc, #36]	@ (800032c <_canhw_set_filter+0x4c>)
 8000308:	2201      	movs	r2, #1
 800030a:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterActivation = ENABLE;
 800030c:	4b07      	ldr	r3, [pc, #28]	@ (800032c <_canhw_set_filter+0x4c>)
 800030e:	2201      	movs	r2, #1
 8000310:	621a      	str	r2, [r3, #32]

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; // set CAN FILTER to send to FIFO0
 8000312:	4b06      	ldr	r3, [pc, #24]	@ (800032c <_canhw_set_filter+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]

    HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8000318:	4a04      	ldr	r2, [pc, #16]	@ (800032c <_canhw_set_filter+0x4c>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	0011      	movs	r1, r2
 800031e:	0018      	movs	r0, r3
 8000320:	f001 fdac 	bl	8001e7c <HAL_CAN_ConfigFilter>
    return;
 8000324:	46c0      	nop			@ (mov r8, r8)
}
 8000326:	46bd      	mov	sp, r7
 8000328:	b002      	add	sp, #8
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000200 	.word	0x20000200
 8000330:	0000ffe0 	.word	0x0000ffe0

08000334 <_canhw_set_irq>:

void _canhw_set_irq(CAN_HandleTypeDef *hcan)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2102      	movs	r1, #2
 8000340:	0018      	movs	r0, r3
 8000342:	f002 f9c5 	bl	80026d0 <HAL_CAN_ActivateNotification>
}
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	b002      	add	sp, #8
 800034c:	bd80      	pop	{r7, pc}

0800034e <_canhw_start>:

void _canhw_start(CAN_HandleTypeDef *hcan)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
    HAL_CAN_Start(hcan);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	0018      	movs	r0, r3
 800035a:	f001 ff05 	bl	8002168 <HAL_CAN_Start>
}
 800035e:	46c0      	nop			@ (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <_debug_canhw_senderror>:

void _debug_canhw_senderror(HAL_StatusTypeDef can_txstatus)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	0002      	movs	r2, r0
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	701a      	strb	r2, [r3, #0]
    static char error_msg[32];
    switch (can_txstatus)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d015      	beq.n	80003a8 <_debug_canhw_senderror+0x40>
 800037c:	dc1d      	bgt.n	80003ba <_debug_canhw_senderror+0x52>
 800037e:	2b01      	cmp	r3, #1
 8000380:	d002      	beq.n	8000388 <_debug_canhw_senderror+0x20>
 8000382:	2b02      	cmp	r3, #2
 8000384:	d007      	beq.n	8000396 <_debug_canhw_senderror+0x2e>
 8000386:	e018      	b.n	80003ba <_debug_canhw_senderror+0x52>
    {
    case HAL_ERROR:
        strcpy(error_msg, "CAN: HAL Error\n");
 8000388:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <_debug_canhw_senderror+0x70>)
 800038a:	4a14      	ldr	r2, [pc, #80]	@ (80003dc <_debug_canhw_senderror+0x74>)
 800038c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800038e:	c313      	stmia	r3!, {r0, r1, r4}
 8000390:	6812      	ldr	r2, [r2, #0]
 8000392:	601a      	str	r2, [r3, #0]
        break;
 8000394:	e017      	b.n	80003c6 <_debug_canhw_senderror+0x5e>
    case HAL_BUSY:
        strcpy(error_msg, "CAN: Peripheral Busy\n");
 8000396:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <_debug_canhw_senderror+0x70>)
 8000398:	4a11      	ldr	r2, [pc, #68]	@ (80003e0 <_debug_canhw_senderror+0x78>)
 800039a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800039c:	c313      	stmia	r3!, {r0, r1, r4}
 800039e:	ca03      	ldmia	r2!, {r0, r1}
 80003a0:	c303      	stmia	r3!, {r0, r1}
 80003a2:	8812      	ldrh	r2, [r2, #0]
 80003a4:	801a      	strh	r2, [r3, #0]
        break;
 80003a6:	e00e      	b.n	80003c6 <_debug_canhw_senderror+0x5e>
    case HAL_TIMEOUT:
        strcpy(error_msg, "CAN: Mailbox Timeout\n");
 80003a8:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <_debug_canhw_senderror+0x70>)
 80003aa:	4a0e      	ldr	r2, [pc, #56]	@ (80003e4 <_debug_canhw_senderror+0x7c>)
 80003ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003ae:	c313      	stmia	r3!, {r0, r1, r4}
 80003b0:	ca03      	ldmia	r2!, {r0, r1}
 80003b2:	c303      	stmia	r3!, {r0, r1}
 80003b4:	8812      	ldrh	r2, [r2, #0]
 80003b6:	801a      	strh	r2, [r3, #0]
        break;
 80003b8:	e005      	b.n	80003c6 <_debug_canhw_senderror+0x5e>
    default:
        strcpy(error_msg, "CAN: Unknown Error\n");
 80003ba:	4b07      	ldr	r3, [pc, #28]	@ (80003d8 <_debug_canhw_senderror+0x70>)
 80003bc:	4a0a      	ldr	r2, [pc, #40]	@ (80003e8 <_debug_canhw_senderror+0x80>)
 80003be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003c0:	c313      	stmia	r3!, {r0, r1, r4}
 80003c2:	ca03      	ldmia	r2!, {r0, r1}
 80003c4:	c303      	stmia	r3!, {r0, r1}
    }

    usb_vcptx(error_msg);
 80003c6:	4b04      	ldr	r3, [pc, #16]	@ (80003d8 <_debug_canhw_senderror+0x70>)
 80003c8:	0018      	movs	r0, r3
 80003ca:	f000 fda2 	bl	8000f12 <usb_vcptx>
}
 80003ce:	46c0      	nop			@ (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b003      	add	sp, #12
 80003d4:	bd90      	pop	{r4, r7, pc}
 80003d6:	46c0      	nop			@ (mov r8, r8)
 80003d8:	20000228 	.word	0x20000228
 80003dc:	0800c290 	.word	0x0800c290
 80003e0:	0800c2a0 	.word	0x0800c2a0
 80003e4:	0800c2b8 	.word	0x0800c2b8
 80003e8:	0800c2d0 	.word	0x0800c2d0

080003ec <_debug_can_print_msg>:

void _debug_can_print_msg(canbus_msg *cmsg)
{
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af04      	add	r7, sp, #16
 80003f2:	6078      	str	r0, [r7, #4]
    static char msg[64];
    sprintf(msg, "%08X::%08X::%08X -> %08X %08X \n", cmsg->ts_rx, cmsg->id, cmsg->dlc, cmsg->data32[0], cmsg->data32[1]);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681d      	ldr	r5, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	689e      	ldr	r6, [r3, #8]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	68da      	ldr	r2, [r3, #12]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6919      	ldr	r1, [r3, #16]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	4c08      	ldr	r4, [pc, #32]	@ (800042c <_debug_can_print_msg+0x40>)
 800040a:	4809      	ldr	r0, [pc, #36]	@ (8000430 <_debug_can_print_msg+0x44>)
 800040c:	9302      	str	r3, [sp, #8]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	9200      	str	r2, [sp, #0]
 8000412:	0033      	movs	r3, r6
 8000414:	002a      	movs	r2, r5
 8000416:	0021      	movs	r1, r4
 8000418:	f00b fa90 	bl	800b93c <siprintf>
    usb_vcptx(msg);
 800041c:	4b04      	ldr	r3, [pc, #16]	@ (8000430 <_debug_can_print_msg+0x44>)
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fd77 	bl	8000f12 <usb_vcptx>
    return;
 8000424:	46c0      	nop			@ (mov r8, r8)
}
 8000426:	46bd      	mov	sp, r7
 8000428:	b003      	add	sp, #12
 800042a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800042c:	0800c2e4 	.word	0x0800c2e4
 8000430:	20000248 	.word	0x20000248

08000434 <cb_can_rx>:

void cb_can_rx(CAN_HandleTypeDef *hcan, canbus_msg *rxmsg, CAN_RxHeaderTypeDef *rxHeader)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rxHeader, rxmsg->data);
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	3310      	adds	r3, #16
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	68f8      	ldr	r0, [r7, #12]
 8000448:	2100      	movs	r1, #0
 800044a:	f002 f805 	bl	8002458 <HAL_CAN_GetRxMessage>
    rxmsg->dlc = rxHeader->DLC;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	691a      	ldr	r2, [r3, #16]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	60da      	str	r2, [r3, #12]
    rxmsg->id = rxHeader->StdId;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	609a      	str	r2, [r3, #8]
    rxmsg->ts_rx = rxHeader->Timestamp;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	601a      	str	r2, [r3, #0]

    _debug_can_print_msg(rxmsg);
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff ffbf 	bl	80003ec <_debug_can_print_msg>
    return;
 800046e:	46c0      	nop			@ (mov r8, r8)
}
 8000470:	46bd      	mov	sp, r7
 8000472:	b004      	add	sp, #16
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <canhw_send>:

void canhw_send(CAN_HandleTypeDef *hcan, canbus_msg *msg)
{
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
    static CAN_TxHeaderTypeDef txHeader;
    static uint8_t txData[8];
    static uint32_t txMailbox;

    txHeader.StdId = msg->id;
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	689a      	ldr	r2, [r3, #8]
 8000486:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <canhw_send+0x78>)
 8000488:	601a      	str	r2, [r3, #0]
    txHeader.IDE = CAN_ID_STD;
 800048a:	4b19      	ldr	r3, [pc, #100]	@ (80004f0 <canhw_send+0x78>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8000490:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <canhw_send+0x78>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
    txHeader.DLC = msg->dlc;
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	68da      	ldr	r2, [r3, #12]
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <canhw_send+0x78>)
 800049c:	611a      	str	r2, [r3, #16]
    txHeader.TransmitGlobalTime = ENABLE;
 800049e:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <canhw_send+0x78>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	751a      	strb	r2, [r3, #20]
    msg->ts_tx = HAL_GetTick();
 80004a4:	f000 fdcc 	bl	8001040 <HAL_GetTick>
 80004a8:	0002      	movs	r2, r0
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	605a      	str	r2, [r3, #4]

    memcpy(txData, msg->data, 8);
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	3310      	adds	r3, #16
 80004b2:	4a10      	ldr	r2, [pc, #64]	@ (80004f4 <canhw_send+0x7c>)
 80004b4:	0010      	movs	r0, r2
 80004b6:	0019      	movs	r1, r3
 80004b8:	2308      	movs	r3, #8
 80004ba:	001a      	movs	r2, r3
 80004bc:	f00b fa92 	bl	800b9e4 <memcpy>
    HAL_StatusTypeDef txStatus = HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox);
 80004c0:	250f      	movs	r5, #15
 80004c2:	197c      	adds	r4, r7, r5
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <canhw_send+0x80>)
 80004c6:	4a0b      	ldr	r2, [pc, #44]	@ (80004f4 <canhw_send+0x7c>)
 80004c8:	4909      	ldr	r1, [pc, #36]	@ (80004f0 <canhw_send+0x78>)
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f001 fe92 	bl	80021f4 <HAL_CAN_AddTxMessage>
 80004d0:	0003      	movs	r3, r0
 80004d2:	7023      	strb	r3, [r4, #0]

    // if no errors, exit from function
    if (txStatus == HAL_OK)
 80004d4:	197b      	adds	r3, r7, r5
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d005      	beq.n	80004e8 <canhw_send+0x70>
        return;

    // debug errors if exist
    _debug_canhw_senderror(txStatus);
 80004dc:	197b      	adds	r3, r7, r5
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	0018      	movs	r0, r3
 80004e2:	f7ff ff41 	bl	8000368 <_debug_canhw_senderror>
    return;
 80004e6:	e000      	b.n	80004ea <canhw_send+0x72>
        return;
 80004e8:	46c0      	nop			@ (mov r8, r8)
}
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b004      	add	sp, #16
 80004ee:	bdb0      	pop	{r4, r5, r7, pc}
 80004f0:	20000288 	.word	0x20000288
 80004f4:	200002a0 	.word	0x200002a0
 80004f8:	200002a8 	.word	0x200002a8

080004fc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	static CAN_RxHeaderTypeDef rxHeader;
	cb_can_rx(hcan, &rxmsg, &rxHeader);
 8000504:	4a07      	ldr	r2, [pc, #28]	@ (8000524 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000506:	4908      	ldr	r1, [pc, #32]	@ (8000528 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	0018      	movs	r0, r3
 800050c:	f7ff ff92 	bl	8000434 <cb_can_rx>
	cb_app(&rxmsg, &rxHeader);
 8000510:	4a04      	ldr	r2, [pc, #16]	@ (8000524 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000512:	4b05      	ldr	r3, [pc, #20]	@ (8000528 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000514:	0011      	movs	r1, r2
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff febc 	bl	8000294 <cb_app>
}
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b002      	add	sp, #8
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000400 	.word	0x20000400
 8000528:	200003e8 	.word	0x200003e8

0800052c <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  if (htim == &htim16)
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	4b04      	ldr	r3, [pc, #16]	@ (8000548 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000538:	429a      	cmp	r2, r3
 800053a:	d101      	bne.n	8000540 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    task_app();
 800053c:	f7ff fe96 	bl	800026c <task_app>
  }
}
 8000540:	46c0      	nop			@ (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b002      	add	sp, #8
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200003a0 	.word	0x200003a0

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fd1c 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f824 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f9cc 	bl	80008f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800055c:	f000 f9ac 	bl	80008b8 <MX_DMA_Init>
  MX_ADC_Init();
 8000560:	f000 f87a 	bl	8000658 <MX_ADC_Init>
  MX_CAN_Init();
 8000564:	f000 f8ee 	bl	8000744 <MX_CAN_Init>
  MX_USB_DEVICE_Init();
 8000568:	f00a fcaa 	bl	800aec0 <MX_USB_DEVICE_Init>
  MX_TIM15_Init();
 800056c:	f000 f922 	bl	80007b4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000570:	f000 f97a 	bl	8000868 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <main+0x48>)
 8000576:	0018      	movs	r0, r3
 8000578:	f001 f976 	bl	8001868 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <main+0x4c>)
 800057e:	0018      	movs	r0, r3
 8000580:	f005 ffe2 	bl	8006548 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <main+0x50>)
 8000586:	0018      	movs	r0, r3
 8000588:	f005 ffde 	bl	8006548 <HAL_TIM_Base_Start_IT>

  init_app();
 800058c:	f7ff fe5a 	bl	8000244 <init_app>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	e7fd      	b.n	8000590 <main+0x44>
 8000594:	200002ac 	.word	0x200002ac
 8000598:	20000358 	.word	0x20000358
 800059c:	200003a0 	.word	0x200003a0

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b099      	sub	sp, #100	@ 0x64
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	242c      	movs	r4, #44	@ 0x2c
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	0018      	movs	r0, r3
 80005ac:	2334      	movs	r3, #52	@ 0x34
 80005ae:	001a      	movs	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f00b f9e3 	bl	800b97c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	231c      	movs	r3, #28
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	0018      	movs	r0, r3
 80005bc:	2310      	movs	r3, #16
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f00b f9db 	bl	800b97c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	231c      	movs	r3, #28
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f00b f9d4 	bl	800b97c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 80005d4:	0021      	movs	r1, r4
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2230      	movs	r2, #48	@ 0x30
 80005da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2201      	movs	r2, #1
 80005e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2210      	movs	r2, #16
 80005ec:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f004 fe36 	bl	8005268 <HAL_RCC_OscConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000600:	f000 faaa 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	211c      	movs	r1, #28
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2207      	movs	r2, #7
 800060a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2203      	movs	r2, #3
 8000610:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2101      	movs	r1, #1
 8000622:	0018      	movs	r0, r3
 8000624:	f005 fb36 	bl	8005c94 <HAL_RCC_ClockConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800062c:	f000 fa94 	bl	8000b58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000630:	003b      	movs	r3, r7
 8000632:	2280      	movs	r2, #128	@ 0x80
 8000634:	0292      	lsls	r2, r2, #10
 8000636:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000638:	003b      	movs	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063e:	003b      	movs	r3, r7
 8000640:	0018      	movs	r0, r3
 8000642:	f005 fd01 	bl	8006048 <HAL_RCCEx_PeriphCLKConfig>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800064a:	f000 fa85 	bl	8000b58 <Error_Handler>
  }
}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b019      	add	sp, #100	@ 0x64
 8000654:	bd90      	pop	{r4, r7, pc}
	...

08000658 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	230c      	movs	r3, #12
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f00b f988 	bl	800b97c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800066c:	4b33      	ldr	r3, [pc, #204]	@ (800073c <MX_ADC_Init+0xe4>)
 800066e:	4a34      	ldr	r2, [pc, #208]	@ (8000740 <MX_ADC_Init+0xe8>)
 8000670:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000672:	4b32      	ldr	r3, [pc, #200]	@ (800073c <MX_ADC_Init+0xe4>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000678:	4b30      	ldr	r3, [pc, #192]	@ (800073c <MX_ADC_Init+0xe4>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067e:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <MX_ADC_Init+0xe4>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000684:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <MX_ADC_Init+0xe4>)
 8000686:	2201      	movs	r2, #1
 8000688:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800068a:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <MX_ADC_Init+0xe4>)
 800068c:	2208      	movs	r2, #8
 800068e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000690:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <MX_ADC_Init+0xe4>)
 8000692:	2200      	movs	r2, #0
 8000694:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <MX_ADC_Init+0xe4>)
 8000698:	2200      	movs	r2, #0
 800069a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <MX_ADC_Init+0xe4>)
 800069e:	2201      	movs	r2, #1
 80006a0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <MX_ADC_Init+0xe4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <MX_ADC_Init+0xe4>)
 80006aa:	2280      	movs	r2, #128	@ 0x80
 80006ac:	0052      	lsls	r2, r2, #1
 80006ae:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006b0:	4b22      	ldr	r3, [pc, #136]	@ (800073c <MX_ADC_Init+0xe4>)
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	00d2      	lsls	r2, r2, #3
 80006b6:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80006b8:	4b20      	ldr	r3, [pc, #128]	@ (800073c <MX_ADC_Init+0xe4>)
 80006ba:	2224      	movs	r2, #36	@ 0x24
 80006bc:	2101      	movs	r1, #1
 80006be:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <MX_ADC_Init+0xe4>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006c6:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_ADC_Init+0xe4>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fcc3 	bl	8001054 <HAL_ADC_Init>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80006d2:	f000 fa41 	bl	8000b58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	0152      	lsls	r2, r2, #5
 80006e2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2201      	movs	r2, #1
 80006e8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ea:	1d3a      	adds	r2, r7, #4
 80006ec:	4b13      	ldr	r3, [pc, #76]	@ (800073c <MX_ADC_Init+0xe4>)
 80006ee:	0011      	movs	r1, r2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fefd 	bl	80014f0 <HAL_ADC_ConfigChannel>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80006fa:	f000 fa2d 	bl	8000b58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2201      	movs	r2, #1
 8000702:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000704:	1d3a      	adds	r2, r7, #4
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_ADC_Init+0xe4>)
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fef0 	bl	80014f0 <HAL_ADC_ConfigChannel>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000714:	f000 fa20 	bl	8000b58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2209      	movs	r2, #9
 800071c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800071e:	1d3a      	adds	r2, r7, #4
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_ADC_Init+0xe4>)
 8000722:	0011      	movs	r1, r2
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fee3 	bl	80014f0 <HAL_ADC_ConfigChannel>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800072e:	f000 fa13 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b004      	add	sp, #16
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	200002ac 	.word	0x200002ac
 8000740:	40012400 	.word	0x40012400

08000744 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000748:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <MX_CAN_Init+0x68>)
 800074a:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <MX_CAN_Init+0x6c>)
 800074c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800074e:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <MX_CAN_Init+0x68>)
 8000750:	2210      	movs	r2, #16
 8000752:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000754:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_CAN_Init+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_CAN_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_CAN_Init+0x68>)
 8000762:	2280      	movs	r2, #128	@ 0x80
 8000764:	0292      	lsls	r2, r2, #10
 8000766:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_CAN_Init+0x68>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	0352      	lsls	r2, r2, #13
 800076e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_CAN_Init+0x68>)
 8000772:	2201      	movs	r2, #1
 8000774:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_CAN_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800077c:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_CAN_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_CAN_Init+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_CAN_Init+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_CAN_Init+0x68>)
 8000790:	2200      	movs	r2, #0
 8000792:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <MX_CAN_Init+0x68>)
 8000796:	0018      	movs	r0, r3
 8000798:	f001 f91c 	bl	80019d4 <HAL_CAN_Init>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f9da 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	20000330 	.word	0x20000330
 80007b0:	40006400 	.word	0x40006400

080007b4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	2308      	movs	r3, #8
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	0018      	movs	r0, r3
 80007c0:	2310      	movs	r3, #16
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f00b f8d9 	bl	800b97c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ca:	003b      	movs	r3, r7
 80007cc:	0018      	movs	r0, r3
 80007ce:	2308      	movs	r3, #8
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f00b f8d2 	bl	800b97c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80007d8:	4b20      	ldr	r3, [pc, #128]	@ (800085c <MX_TIM15_Init+0xa8>)
 80007da:	4a21      	ldr	r2, [pc, #132]	@ (8000860 <MX_TIM15_Init+0xac>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 480-1;
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_TIM15_Init+0xa8>)
 80007e0:	22e0      	movs	r2, #224	@ 0xe0
 80007e2:	32ff      	adds	r2, #255	@ 0xff
 80007e4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_TIM15_Init+0xa8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000-1;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_TIM15_Init+0xa8>)
 80007ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000864 <MX_TIM15_Init+0xb0>)
 80007f0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_TIM15_Init+0xa8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_TIM15_Init+0xa8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <MX_TIM15_Init+0xa8>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_TIM15_Init+0xa8>)
 8000806:	0018      	movs	r0, r3
 8000808:	f005 fd9c 	bl	8006344 <HAL_TIM_Base_Init>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM15_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 f9a2 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000814:	2108      	movs	r1, #8
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2280      	movs	r2, #128	@ 0x80
 800081a:	0152      	lsls	r2, r2, #5
 800081c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800081e:	187a      	adds	r2, r7, r1
 8000820:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_TIM15_Init+0xa8>)
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f006 f811 	bl	800684c <HAL_TIM_ConfigClockSource>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800082e:	f000 f993 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000832:	003b      	movs	r3, r7
 8000834:	2220      	movs	r2, #32
 8000836:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	003b      	movs	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800083e:	003a      	movs	r2, r7
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_TIM15_Init+0xa8>)
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f006 fc65 	bl	8007114 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 800084e:	f000 f983 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b006      	add	sp, #24
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	20000358 	.word	0x20000358
 8000860:	40014000 	.word	0x40014000
 8000864:	0000270f 	.word	0x0000270f

08000868 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_TIM16_Init+0x44>)
 800086e:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <MX_TIM16_Init+0x48>)
 8000870:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 120-1;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_TIM16_Init+0x44>)
 8000874:	2277      	movs	r2, #119	@ 0x77
 8000876:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_TIM16_Init+0x44>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_TIM16_Init+0x44>)
 8000880:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <MX_TIM16_Init+0x4c>)
 8000882:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_TIM16_Init+0x44>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_TIM16_Init+0x44>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_TIM16_Init+0x44>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000896:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <MX_TIM16_Init+0x44>)
 8000898:	0018      	movs	r0, r3
 800089a:	f005 fd53 	bl	8006344 <HAL_TIM_Base_Init>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80008a2:	f000 f959 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200003a0 	.word	0x200003a0
 80008b0:	40014400 	.word	0x40014400
 80008b4:	0000270f 	.word	0x0000270f

080008b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_DMA_Init+0x38>)
 80008c0:	695a      	ldr	r2, [r3, #20]
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_DMA_Init+0x38>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	615a      	str	r2, [r3, #20]
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_DMA_Init+0x38>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2009      	movs	r0, #9
 80008dc:	f002 f9f2 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008e0:	2009      	movs	r0, #9
 80008e2:	f002 fa0f 	bl	8002d04 <HAL_NVIC_EnableIRQ>

}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	40021000 	.word	0x40021000

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b08b      	sub	sp, #44	@ 0x2c
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	2414      	movs	r4, #20
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	0018      	movs	r0, r3
 8000900:	2314      	movs	r3, #20
 8000902:	001a      	movs	r2, r3
 8000904:	2100      	movs	r1, #0
 8000906:	f00b f839 	bl	800b97c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b8e      	ldr	r3, [pc, #568]	@ (8000b44 <MX_GPIO_Init+0x250>)
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	4b8d      	ldr	r3, [pc, #564]	@ (8000b44 <MX_GPIO_Init+0x250>)
 8000910:	2180      	movs	r1, #128	@ 0x80
 8000912:	0309      	lsls	r1, r1, #12
 8000914:	430a      	orrs	r2, r1
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	4b8a      	ldr	r3, [pc, #552]	@ (8000b44 <MX_GPIO_Init+0x250>)
 800091a:	695a      	ldr	r2, [r3, #20]
 800091c:	2380      	movs	r3, #128	@ 0x80
 800091e:	031b      	lsls	r3, r3, #12
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000926:	4b87      	ldr	r3, [pc, #540]	@ (8000b44 <MX_GPIO_Init+0x250>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b86      	ldr	r3, [pc, #536]	@ (8000b44 <MX_GPIO_Init+0x250>)
 800092c:	2180      	movs	r1, #128	@ 0x80
 800092e:	03c9      	lsls	r1, r1, #15
 8000930:	430a      	orrs	r2, r1
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b83      	ldr	r3, [pc, #524]	@ (8000b44 <MX_GPIO_Init+0x250>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	2380      	movs	r3, #128	@ 0x80
 800093a:	03db      	lsls	r3, r3, #15
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b80      	ldr	r3, [pc, #512]	@ (8000b44 <MX_GPIO_Init+0x250>)
 8000944:	695a      	ldr	r2, [r3, #20]
 8000946:	4b7f      	ldr	r3, [pc, #508]	@ (8000b44 <MX_GPIO_Init+0x250>)
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	0289      	lsls	r1, r1, #10
 800094c:	430a      	orrs	r2, r1
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	4b7c      	ldr	r3, [pc, #496]	@ (8000b44 <MX_GPIO_Init+0x250>)
 8000952:	695a      	ldr	r2, [r3, #20]
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	029b      	lsls	r3, r3, #10
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b79      	ldr	r3, [pc, #484]	@ (8000b44 <MX_GPIO_Init+0x250>)
 8000960:	695a      	ldr	r2, [r3, #20]
 8000962:	4b78      	ldr	r3, [pc, #480]	@ (8000b44 <MX_GPIO_Init+0x250>)
 8000964:	2180      	movs	r1, #128	@ 0x80
 8000966:	02c9      	lsls	r1, r1, #11
 8000968:	430a      	orrs	r2, r1
 800096a:	615a      	str	r2, [r3, #20]
 800096c:	4b75      	ldr	r3, [pc, #468]	@ (8000b44 <MX_GPIO_Init+0x250>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	02db      	lsls	r3, r3, #11
 8000974:	4013      	ands	r3, r2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R2D_LED_Pin|R3_Pin, GPIO_PIN_RESET);
 800097a:	2388      	movs	r3, #136	@ 0x88
 800097c:	0059      	lsls	r1, r3, #1
 800097e:	2390      	movs	r3, #144	@ 0x90
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2200      	movs	r2, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f002 fde5 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_LED_Pin|R8_Pin|R7_Pin|R6_Pin
 800098a:	23fc      	movs	r3, #252	@ 0xfc
 800098c:	021b      	lsls	r3, r3, #8
 800098e:	486e      	ldr	r0, [pc, #440]	@ (8000b48 <MX_GPIO_Init+0x254>)
 8000990:	2200      	movs	r2, #0
 8000992:	0019      	movs	r1, r3
 8000994:	f002 fdde 	bl	8003554 <HAL_GPIO_WritePin>
                          |R5_Pin|R4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	22e0      	movs	r2, #224	@ 0xe0
 800099c:	0212      	lsls	r2, r2, #8
 800099e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2203      	movs	r2, #3
 80009a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	4a67      	ldr	r2, [pc, #412]	@ (8000b4c <MX_GPIO_Init+0x258>)
 80009b0:	0019      	movs	r1, r3
 80009b2:	0010      	movs	r0, r2
 80009b4:	f002 fb8e 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2203      	movs	r2, #3
 80009bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2203      	movs	r2, #3
 80009c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	4a60      	ldr	r2, [pc, #384]	@ (8000b50 <MX_GPIO_Init+0x25c>)
 80009ce:	0019      	movs	r1, r3
 80009d0:	0010      	movs	r0, r2
 80009d2:	f002 fb7f 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	4a5e      	ldr	r2, [pc, #376]	@ (8000b54 <MX_GPIO_Init+0x260>)
 80009da:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2203      	movs	r2, #3
 80009e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	193a      	adds	r2, r7, r4
 80009ea:	2390      	movs	r3, #144	@ 0x90
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 fb6f 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : R2D_LED_Pin */
  GPIO_InitStruct.Pin = R2D_LED_Pin;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2210      	movs	r2, #16
 80009fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	2201      	movs	r2, #1
 8000a00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2201      	movs	r2, #1
 8000a06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(R2D_LED_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	193a      	adds	r2, r7, r4
 8000a10:	2390      	movs	r3, #144	@ 0x90
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	0011      	movs	r1, r2
 8000a16:	0018      	movs	r0, r3
 8000a18:	f002 fb5c 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2D_BTN_NO_Pin R2D_SW_NO_Pin */
  GPIO_InitStruct.Pin = R2D_BTN_NO_Pin|R2D_SW_NO_Pin;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	22a0      	movs	r2, #160	@ 0xa0
 8000a20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	193a      	adds	r2, r7, r4
 8000a30:	2390      	movs	r3, #144	@ 0x90
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 fb4c 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : R2D_SW_NC_Pin */
  GPIO_InitStruct.Pin = R2D_SW_NC_Pin;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2240      	movs	r2, #64	@ 0x40
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(R2D_SW_NC_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	193a      	adds	r2, r7, r4
 8000a50:	2390      	movs	r3, #144	@ 0x90
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 fb3c 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI_IRQ_Pin;
 8000a5c:	0021      	movs	r1, r4
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	22c4      	movs	r2, #196	@ 0xc4
 8000a68:	0392      	lsls	r2, r2, #14
 8000a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	000c      	movs	r4, r1
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	4a34      	ldr	r2, [pc, #208]	@ (8000b48 <MX_GPIO_Init+0x254>)
 8000a78:	0019      	movs	r1, r3
 8000a7a:	0010      	movs	r0, r2
 8000a7c:	f002 fb2a 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_KEY_Pin */
  GPIO_InitStruct.Pin = USR_KEY_Pin;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2204      	movs	r2, #4
 8000a84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USR_KEY_GPIO_Port, &GPIO_InitStruct);
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	4a2c      	ldr	r2, [pc, #176]	@ (8000b48 <MX_GPIO_Init+0x254>)
 8000a96:	0019      	movs	r1, r3
 8000a98:	0010      	movs	r0, r2
 8000a9a:	f002 fb1b 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a9e:	0021      	movs	r1, r4
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2280      	movs	r2, #128	@ 0x80
 8000aa4:	00d2      	lsls	r2, r2, #3
 8000aa6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000aa8:	000c      	movs	r4, r1
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2211      	movs	r2, #17
 8000aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	4a22      	ldr	r2, [pc, #136]	@ (8000b48 <MX_GPIO_Init+0x254>)
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	0010      	movs	r0, r2
 8000ac4:	f002 fb06 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R8_Pin R7_Pin R6_Pin R5_Pin
                           R4_Pin */
  GPIO_InitStruct.Pin = R8_Pin|R7_Pin|R6_Pin|R5_Pin
 8000ac8:	0021      	movs	r1, r4
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	22f8      	movs	r2, #248	@ 0xf8
 8000ace:	0212      	lsls	r2, r2, #8
 8000ad0:	601a      	str	r2, [r3, #0]
                          |R4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	000c      	movs	r4, r1
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	4a17      	ldr	r2, [pc, #92]	@ (8000b48 <MX_GPIO_Init+0x254>)
 8000aea:	0019      	movs	r1, r3
 8000aec:	0010      	movs	r0, r2
 8000aee:	f002 faf1 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : R3_Pin */
  GPIO_InitStruct.Pin = R3_Pin;
 8000af2:	0021      	movs	r1, r4
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2280      	movs	r2, #128	@ 0x80
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	000c      	movs	r4, r1
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2201      	movs	r2, #1
 8000b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(R3_GPIO_Port, &GPIO_InitStruct);
 8000b10:	193a      	adds	r2, r7, r4
 8000b12:	2390      	movs	r3, #144	@ 0x90
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 fadb 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	22f8      	movs	r2, #248	@ 0xf8
 8000b22:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2203      	movs	r2, #3
 8000b28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <MX_GPIO_Init+0x254>)
 8000b34:	0019      	movs	r1, r3
 8000b36:	0010      	movs	r0, r2
 8000b38:	f002 facc 	bl	80030d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b00b      	add	sp, #44	@ 0x2c
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	48000400 	.word	0x48000400
 8000b4c:	48000800 	.word	0x48000800
 8000b50:	48001400 	.word	0x48001400
 8000b54:	0000860c 	.word	0x0000860c

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_MspInit+0x44>)
 8000b80:	699a      	ldr	r2, [r3, #24]
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_MspInit+0x44>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	430a      	orrs	r2, r1
 8000b88:	619a      	str	r2, [r3, #24]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <HAL_MspInit+0x44>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4013      	ands	r3, r2
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_MspInit+0x44>)
 8000b98:	69da      	ldr	r2, [r3, #28]
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_MspInit+0x44>)
 8000b9c:	2180      	movs	r1, #128	@ 0x80
 8000b9e:	0549      	lsls	r1, r1, #21
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	61da      	str	r2, [r3, #28]
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <HAL_MspInit+0x44>)
 8000ba6:	69da      	ldr	r2, [r3, #28]
 8000ba8:	2380      	movs	r3, #128	@ 0x80
 8000baa:	055b      	lsls	r3, r3, #21
 8000bac:	4013      	ands	r3, r2
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b08b      	sub	sp, #44	@ 0x2c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	2414      	movs	r4, #20
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2314      	movs	r3, #20
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f00a fed2 	bl	800b97c <memset>
  if(hadc->Instance==ADC1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a3b      	ldr	r2, [pc, #236]	@ (8000ccc <HAL_ADC_MspInit+0x10c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d16f      	bne.n	8000cc2 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cd0 <HAL_ADC_MspInit+0x110>)
 8000be4:	699a      	ldr	r2, [r3, #24]
 8000be6:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd0 <HAL_ADC_MspInit+0x110>)
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0089      	lsls	r1, r1, #2
 8000bec:	430a      	orrs	r2, r1
 8000bee:	619a      	str	r2, [r3, #24]
 8000bf0:	4b37      	ldr	r3, [pc, #220]	@ (8000cd0 <HAL_ADC_MspInit+0x110>)
 8000bf2:	699a      	ldr	r2, [r3, #24]
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <HAL_ADC_MspInit+0x110>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <HAL_ADC_MspInit+0x110>)
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	0289      	lsls	r1, r1, #10
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <HAL_ADC_MspInit+0x110>)
 8000c0e:	695a      	ldr	r2, [r3, #20]
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	029b      	lsls	r3, r3, #10
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <HAL_ADC_MspInit+0x110>)
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <HAL_ADC_MspInit+0x110>)
 8000c20:	2180      	movs	r1, #128	@ 0x80
 8000c22:	02c9      	lsls	r1, r1, #11
 8000c24:	430a      	orrs	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	4b29      	ldr	r3, [pc, #164]	@ (8000cd0 <HAL_ADC_MspInit+0x110>)
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	02db      	lsls	r3, r3, #11
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2203      	movs	r2, #3
 8000c3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2203      	movs	r2, #3
 8000c40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	193a      	adds	r2, r7, r4
 8000c4a:	2390      	movs	r3, #144	@ 0x90
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f002 fa3f 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2202      	movs	r2, #2
 8000c5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2203      	movs	r2, #3
 8000c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd4 <HAL_ADC_MspInit+0x114>)
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	0010      	movs	r0, r2
 8000c70:	f002 fa30 	bl	80030d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000c76:	4a19      	ldr	r2, [pc, #100]	@ (8000cdc <HAL_ADC_MspInit+0x11c>)
 8000c78:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000c86:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000ca0:	2280      	movs	r2, #128	@ 0x80
 8000ca2:	0152      	lsls	r2, r2, #5
 8000ca4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f002 f855 	bl	8002d58 <HAL_DMA_Init>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8000cb2:	f7ff ff51 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000cba:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_ADC_MspInit+0x118>)
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b00b      	add	sp, #44	@ 0x2c
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	40012400 	.word	0x40012400
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	200002ec 	.word	0x200002ec
 8000cdc:	40020008 	.word	0x40020008

08000ce0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08b      	sub	sp, #44	@ 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	2414      	movs	r4, #20
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	0018      	movs	r0, r3
 8000cee:	2314      	movs	r3, #20
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f00a fe42 	bl	800b97c <memset>
  if(hcan->Instance==CAN)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <HAL_CAN_MspInit+0xa0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d13a      	bne.n	8000d78 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d02:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <HAL_CAN_MspInit+0xa4>)
 8000d04:	69da      	ldr	r2, [r3, #28]
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <HAL_CAN_MspInit+0xa4>)
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	0489      	lsls	r1, r1, #18
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	61da      	str	r2, [r3, #28]
 8000d10:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <HAL_CAN_MspInit+0xa4>)
 8000d12:	69da      	ldr	r2, [r3, #28]
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	049b      	lsls	r3, r3, #18
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <HAL_CAN_MspInit+0xa4>)
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_CAN_MspInit+0xa4>)
 8000d24:	2180      	movs	r1, #128	@ 0x80
 8000d26:	02c9      	lsls	r1, r1, #11
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	615a      	str	r2, [r3, #20]
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_CAN_MspInit+0xa4>)
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	2380      	movs	r3, #128	@ 0x80
 8000d32:	02db      	lsls	r3, r3, #11
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	22c0      	movs	r2, #192	@ 0xc0
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	0021      	movs	r1, r4
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2202      	movs	r2, #2
 8000d48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2203      	movs	r2, #3
 8000d54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2204      	movs	r2, #4
 8000d5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <HAL_CAN_MspInit+0xa8>)
 8000d60:	0019      	movs	r1, r3
 8000d62:	0010      	movs	r0, r2
 8000d64:	f002 f9b6 	bl	80030d4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	201e      	movs	r0, #30
 8000d6e:	f001 ffa9 	bl	8002cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000d72:	201e      	movs	r0, #30
 8000d74:	f001 ffc6 	bl	8002d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000d78:	46c0      	nop			@ (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b00b      	add	sp, #44	@ 0x2c
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	40006400 	.word	0x40006400
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000400 	.word	0x48000400

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a18      	ldr	r2, [pc, #96]	@ (8000dfc <HAL_TIM_Base_MspInit+0x70>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10e      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <HAL_TIM_Base_MspInit+0x74>)
 8000da0:	699a      	ldr	r2, [r3, #24]
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <HAL_TIM_Base_MspInit+0x74>)
 8000da4:	2180      	movs	r1, #128	@ 0x80
 8000da6:	0249      	lsls	r1, r1, #9
 8000da8:	430a      	orrs	r2, r1
 8000daa:	619a      	str	r2, [r3, #24]
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <HAL_TIM_Base_MspInit+0x74>)
 8000dae:	699a      	ldr	r2, [r3, #24]
 8000db0:	2380      	movs	r3, #128	@ 0x80
 8000db2:	025b      	lsls	r3, r3, #9
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000dba:	e01a      	b.n	8000df2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <HAL_TIM_Base_MspInit+0x78>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d115      	bne.n	8000df2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_TIM_Base_MspInit+0x74>)
 8000dc8:	699a      	ldr	r2, [r3, #24]
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <HAL_TIM_Base_MspInit+0x74>)
 8000dcc:	2180      	movs	r1, #128	@ 0x80
 8000dce:	0289      	lsls	r1, r1, #10
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	619a      	str	r2, [r3, #24]
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_TIM_Base_MspInit+0x74>)
 8000dd6:	699a      	ldr	r2, [r3, #24]
 8000dd8:	2380      	movs	r3, #128	@ 0x80
 8000dda:	029b      	lsls	r3, r3, #10
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2015      	movs	r0, #21
 8000de8:	f001 ff6c 	bl	8002cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000dec:	2015      	movs	r0, #21
 8000dee:	f001 ff89 	bl	8002d04 <HAL_NVIC_EnableIRQ>
}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b004      	add	sp, #16
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	40014000 	.word	0x40014000
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40014400 	.word	0x40014400

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e0c:	46c0      	nop			@ (mov r8, r8)
 8000e0e:	e7fd      	b.n	8000e0c <NMI_Handler+0x4>

08000e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	e7fd      	b.n	8000e14 <HardFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 f8f4 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <DMA1_Channel1_IRQHandler+0x14>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f002 f888 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	200002ec 	.word	0x200002ec

08000e54 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <TIM16_IRQHandler+0x14>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f005 fc08 	bl	8006670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	200003a0 	.word	0x200003a0

08000e6c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <CEC_CAN_IRQHandler+0x14>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f001 fc66 	bl	8002744 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000e78:	46c0      	nop			@ (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	20000330 	.word	0x20000330

08000e84 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <USB_IRQHandler+0x14>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f002 fcc4 	bl	8003818 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000e90:	46c0      	nop			@ (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	200010ec 	.word	0x200010ec

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	18d3      	adds	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f00a fd5e 	bl	800b98c <__errno>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	425b      	negs	r3, r3
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	18d2      	adds	r2, r2, r3
 8000eea:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <_sbrk+0x64>)
 8000eec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b006      	add	sp, #24
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20004000 	.word	0x20004000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	2000041c 	.word	0x2000041c
 8000f04:	20001730 	.word	0x20001730

08000f08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <usb_vcptx>:
/* insert copyright  */

#include "usb.h"

void usb_vcptx(const char* msg)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS(msg, strlen(msg));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff f8f3 	bl	8000108 <strlen>
 8000f22:	0003      	movs	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0011      	movs	r1, r2
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f00a f84c 	bl	800afc8 <CDC_Transmit_FS>
}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f38:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f3c:	f7ff ffe4 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	@ (8000f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <LoopForever+0xe>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	@ (8000f84 <LoopForever+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f66:	f00a fd17 	bl	800b998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6a:	f7ff faef 	bl	800054c <main>

08000f6e <LoopForever>:

LoopForever:
    b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   r0, =_estack
 8000f70:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000f7c:	0800c710 	.word	0x0800c710
  ldr r2, =_sbss
 8000f80:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000f84:	20001730 	.word	0x20001730

08000f88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_COMP_IRQHandler>
	...

08000f8c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <HAL_Init+0x24>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_Init+0x24>)
 8000f96:	2110      	movs	r1, #16
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f809 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa2:	f7ff fde9 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	40022000 	.word	0x40022000

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_InitTick+0x5c>)
 8000fbe:	681c      	ldr	r4, [r3, #0]
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_InitTick+0x60>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	23fa      	movs	r3, #250	@ 0xfa
 8000fc8:	0098      	lsls	r0, r3, #2
 8000fca:	f7ff f8af 	bl	800012c <__udivsi3>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	0020      	movs	r0, r4
 8000fd4:	f7ff f8aa 	bl	800012c <__udivsi3>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f001 feae 	bl	8002d3c <HAL_SYSTICK_Config>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e00f      	b.n	8001008 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d80b      	bhi.n	8001006 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f001 fe64 	bl	8002cc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_InitTick+0x64>)
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b003      	add	sp, #12
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	20000018 	.word	0x20000018
 8001014:	20000020 	.word	0x20000020
 8001018:	2000001c 	.word	0x2000001c

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_IncTick+0x1c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	001a      	movs	r2, r3
 8001026:	4b05      	ldr	r3, [pc, #20]	@ (800103c <HAL_IncTick+0x20>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	18d2      	adds	r2, r2, r3
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <HAL_IncTick+0x20>)
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	20000020 	.word	0x20000020
 800103c:	20000420 	.word	0x20000420

08001040 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b02      	ldr	r3, [pc, #8]	@ (8001050 <HAL_GetTick+0x10>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	20000420 	.word	0x20000420

08001054 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	230f      	movs	r3, #15
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e237      	b.n	80014e2 <HAL_ADC_Init+0x48e>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4ac5      	ldr	r2, [pc, #788]	@ (800138c <HAL_ADC_Init+0x338>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d007      	beq.n	800108c <HAL_ADC_Init+0x38>
 800107c:	239a      	movs	r3, #154	@ 0x9a
 800107e:	33ff      	adds	r3, #255	@ 0xff
 8001080:	001a      	movs	r2, r3
 8001082:	4bc3      	ldr	r3, [pc, #780]	@ (8001390 <HAL_ADC_Init+0x33c>)
 8001084:	0011      	movs	r1, r2
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff fd6c 	bl	8000b64 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d012      	beq.n	80010ba <HAL_ADC_Init+0x66>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	429a      	cmp	r2, r3
 800109e:	d00c      	beq.n	80010ba <HAL_ADC_Init+0x66>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	061b      	lsls	r3, r3, #24
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d006      	beq.n	80010ba <HAL_ADC_Init+0x66>
 80010ac:	23cd      	movs	r3, #205	@ 0xcd
 80010ae:	005a      	lsls	r2, r3, #1
 80010b0:	4bb7      	ldr	r3, [pc, #732]	@ (8001390 <HAL_ADC_Init+0x33c>)
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fd55 	bl	8000b64 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d013      	beq.n	80010ea <HAL_ADC_Init+0x96>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d00f      	beq.n	80010ea <HAL_ADC_Init+0x96>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b10      	cmp	r3, #16
 80010d0:	d00b      	beq.n	80010ea <HAL_ADC_Init+0x96>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b18      	cmp	r3, #24
 80010d8:	d007      	beq.n	80010ea <HAL_ADC_Init+0x96>
 80010da:	239c      	movs	r3, #156	@ 0x9c
 80010dc:	33ff      	adds	r3, #255	@ 0xff
 80010de:	001a      	movs	r2, r3
 80010e0:	4bab      	ldr	r3, [pc, #684]	@ (8001390 <HAL_ADC_Init+0x33c>)
 80010e2:	0011      	movs	r1, r2
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff fd3d 	bl	8000b64 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00a      	beq.n	8001108 <HAL_ADC_Init+0xb4>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b20      	cmp	r3, #32
 80010f8:	d006      	beq.n	8001108 <HAL_ADC_Init+0xb4>
 80010fa:	23ce      	movs	r3, #206	@ 0xce
 80010fc:	005a      	lsls	r2, r3, #1
 80010fe:	4ba4      	ldr	r3, [pc, #656]	@ (8001390 <HAL_ADC_Init+0x33c>)
 8001100:	0011      	movs	r1, r2
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff fd2e 	bl	8000b64 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d00b      	beq.n	8001128 <HAL_ADC_Init+0xd4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d007      	beq.n	8001128 <HAL_ADC_Init+0xd4>
 8001118:	239e      	movs	r3, #158	@ 0x9e
 800111a:	33ff      	adds	r3, #255	@ 0xff
 800111c:	001a      	movs	r2, r3
 800111e:	4b9c      	ldr	r3, [pc, #624]	@ (8001390 <HAL_ADC_Init+0x33c>)
 8001120:	0011      	movs	r1, r2
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff fd1e 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7e9b      	ldrb	r3, [r3, #26]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00a      	beq.n	8001146 <HAL_ADC_Init+0xf2>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7e9b      	ldrb	r3, [r3, #26]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d006      	beq.n	8001146 <HAL_ADC_Init+0xf2>
 8001138:	23cf      	movs	r3, #207	@ 0xcf
 800113a:	005a      	lsls	r2, r3, #1
 800113c:	4b94      	ldr	r3, [pc, #592]	@ (8001390 <HAL_ADC_Init+0x33c>)
 800113e:	0011      	movs	r1, r2
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff fd0f 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7edb      	ldrb	r3, [r3, #27]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_ADC_Init+0x112>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7edb      	ldrb	r3, [r3, #27]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d007      	beq.n	8001166 <HAL_ADC_Init+0x112>
 8001156:	23a0      	movs	r3, #160	@ 0xa0
 8001158:	33ff      	adds	r3, #255	@ 0xff
 800115a:	001a      	movs	r2, r3
 800115c:	4b8c      	ldr	r3, [pc, #560]	@ (8001390 <HAL_ADC_Init+0x33c>)
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff fcff 	bl	8000b64 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d018      	beq.n	80011a0 <HAL_ADC_Init+0x14c>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a1a      	ldr	r2, [r3, #32]
 8001172:	2380      	movs	r3, #128	@ 0x80
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	429a      	cmp	r2, r3
 8001178:	d012      	beq.n	80011a0 <HAL_ADC_Init+0x14c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1a      	ldr	r2, [r3, #32]
 800117e:	2380      	movs	r3, #128	@ 0x80
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	429a      	cmp	r2, r3
 8001184:	d00c      	beq.n	80011a0 <HAL_ADC_Init+0x14c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1a      	ldr	r2, [r3, #32]
 800118a:	23c0      	movs	r3, #192	@ 0xc0
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	429a      	cmp	r2, r3
 8001190:	d006      	beq.n	80011a0 <HAL_ADC_Init+0x14c>
 8001192:	23d0      	movs	r3, #208	@ 0xd0
 8001194:	005a      	lsls	r2, r3, #1
 8001196:	4b7e      	ldr	r3, [pc, #504]	@ (8001390 <HAL_ADC_Init+0x33c>)
 8001198:	0011      	movs	r1, r2
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff fce2 	bl	8000b64 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d01f      	beq.n	80011e8 <HAL_ADC_Init+0x194>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	2b40      	cmp	r3, #64	@ 0x40
 80011ae:	d01b      	beq.n	80011e8 <HAL_ADC_Init+0x194>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b80      	cmp	r3, #128	@ 0x80
 80011b6:	d017      	beq.n	80011e8 <HAL_ADC_Init+0x194>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80011be:	d013      	beq.n	80011e8 <HAL_ADC_Init+0x194>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69da      	ldr	r2, [r3, #28]
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d00d      	beq.n	80011e8 <HAL_ADC_Init+0x194>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69da      	ldr	r2, [r3, #28]
 80011d0:	23c2      	movs	r3, #194	@ 0xc2
 80011d2:	33ff      	adds	r3, #255	@ 0xff
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d007      	beq.n	80011e8 <HAL_ADC_Init+0x194>
 80011d8:	23a2      	movs	r3, #162	@ 0xa2
 80011da:	33ff      	adds	r3, #255	@ 0xff
 80011dc:	001a      	movs	r2, r3
 80011de:	4b6c      	ldr	r3, [pc, #432]	@ (8001390 <HAL_ADC_Init+0x33c>)
 80011e0:	0011      	movs	r1, r2
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff fcbe 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2224      	movs	r2, #36	@ 0x24
 80011ec:	5c9b      	ldrb	r3, [r3, r2]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <HAL_ADC_Init+0x1b6>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2224      	movs	r2, #36	@ 0x24
 80011f6:	5c9b      	ldrb	r3, [r3, r2]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d006      	beq.n	800120a <HAL_ADC_Init+0x1b6>
 80011fc:	23d1      	movs	r3, #209	@ 0xd1
 80011fe:	005a      	lsls	r2, r3, #1
 8001200:	4b63      	ldr	r3, [pc, #396]	@ (8001390 <HAL_ADC_Init+0x33c>)
 8001202:	0011      	movs	r1, r2
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff fcad 	bl	8000b64 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	2b04      	cmp	r3, #4
 8001210:	d00b      	beq.n	800122a <HAL_ADC_Init+0x1d6>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	2b08      	cmp	r3, #8
 8001218:	d007      	beq.n	800122a <HAL_ADC_Init+0x1d6>
 800121a:	23a4      	movs	r3, #164	@ 0xa4
 800121c:	33ff      	adds	r3, #255	@ 0xff
 800121e:	001a      	movs	r2, r3
 8001220:	4b5b      	ldr	r3, [pc, #364]	@ (8001390 <HAL_ADC_Init+0x33c>)
 8001222:	0011      	movs	r1, r2
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff fc9d 	bl	8000b64 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	2b01      	cmp	r3, #1
 8001230:	d00a      	beq.n	8001248 <HAL_ADC_Init+0x1f4>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <HAL_ADC_Init+0x1f4>
 800123a:	23d2      	movs	r3, #210	@ 0xd2
 800123c:	005a      	lsls	r2, r3, #1
 800123e:	4b54      	ldr	r3, [pc, #336]	@ (8001390 <HAL_ADC_Init+0x33c>)
 8001240:	0011      	movs	r1, r2
 8001242:	0018      	movs	r0, r3
 8001244:	f7ff fc8e 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7e1b      	ldrb	r3, [r3, #24]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00b      	beq.n	8001268 <HAL_ADC_Init+0x214>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7e1b      	ldrb	r3, [r3, #24]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d007      	beq.n	8001268 <HAL_ADC_Init+0x214>
 8001258:	23a6      	movs	r3, #166	@ 0xa6
 800125a:	33ff      	adds	r3, #255	@ 0xff
 800125c:	001a      	movs	r2, r3
 800125e:	4b4c      	ldr	r3, [pc, #304]	@ (8001390 <HAL_ADC_Init+0x33c>)
 8001260:	0011      	movs	r1, r2
 8001262:	0018      	movs	r0, r3
 8001264:	f7ff fc7e 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7e5b      	ldrb	r3, [r3, #25]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00a      	beq.n	8001286 <HAL_ADC_Init+0x232>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7e5b      	ldrb	r3, [r3, #25]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d006      	beq.n	8001286 <HAL_ADC_Init+0x232>
 8001278:	23d3      	movs	r3, #211	@ 0xd3
 800127a:	005a      	lsls	r2, r3, #1
 800127c:	4b44      	ldr	r3, [pc, #272]	@ (8001390 <HAL_ADC_Init+0x33c>)
 800127e:	0011      	movs	r1, r2
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff fc6f 	bl	8000b64 <assert_failed>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10a      	bne.n	80012a4 <HAL_ADC_Init+0x250>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2234      	movs	r2, #52	@ 0x34
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	0018      	movs	r0, r3
 80012a0:	f7ff fc8e 	bl	8000bc0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012a8:	2210      	movs	r2, #16
 80012aa:	4013      	ands	r3, r2
 80012ac:	d000      	beq.n	80012b0 <HAL_ADC_Init+0x25c>
 80012ae:	e10b      	b.n	80014c8 <HAL_ADC_Init+0x474>
 80012b0:	230f      	movs	r3, #15
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d000      	beq.n	80012bc <HAL_ADC_Init+0x268>
 80012ba:	e105      	b.n	80014c8 <HAL_ADC_Init+0x474>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2204      	movs	r2, #4
 80012c4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80012c6:	d000      	beq.n	80012ca <HAL_ADC_Init+0x276>
 80012c8:	e0fe      	b.n	80014c8 <HAL_ADC_Init+0x474>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ce:	4a31      	ldr	r2, [pc, #196]	@ (8001394 <HAL_ADC_Init+0x340>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	2202      	movs	r2, #2
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2203      	movs	r2, #3
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d112      	bne.n	800130e <HAL_ADC_Init+0x2ba>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2201      	movs	r2, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d009      	beq.n	800130a <HAL_ADC_Init+0x2b6>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	401a      	ands	r2, r3
 8001302:	2380      	movs	r3, #128	@ 0x80
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	429a      	cmp	r2, r3
 8001308:	d101      	bne.n	800130e <HAL_ADC_Init+0x2ba>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_ADC_Init+0x2bc>
 800130e:	2300      	movs	r3, #0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d116      	bne.n	8001342 <HAL_ADC_Init+0x2ee>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2218      	movs	r2, #24
 800131c:	4393      	bics	r3, r2
 800131e:	0019      	movs	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	0899      	lsrs	r1, r3, #2
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4912      	ldr	r1, [pc, #72]	@ (8001398 <HAL_ADC_Init+0x344>)
 800134e:	400a      	ands	r2, r1
 8001350:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e1b      	ldrb	r3, [r3, #24]
 8001356:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7e5b      	ldrb	r3, [r3, #25]
 800135c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800135e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7e9b      	ldrb	r3, [r3, #26]
 8001364:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001366:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136c:	2b01      	cmp	r3, #1
 800136e:	d002      	beq.n	8001376 <HAL_ADC_Init+0x322>
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	015b      	lsls	r3, r3, #5
 8001374:	e000      	b.n	8001378 <HAL_ADC_Init+0x324>
 8001376:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001378:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800137e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d109      	bne.n	800139c <HAL_ADC_Init+0x348>
 8001388:	2304      	movs	r3, #4
 800138a:	e008      	b.n	800139e <HAL_ADC_Init+0x34a>
 800138c:	40012400 	.word	0x40012400
 8001390:	0800c304 	.word	0x0800c304
 8001394:	fffffefd 	.word	0xfffffefd
 8001398:	fffe0219 	.word	0xfffe0219
 800139c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800139e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2124      	movs	r1, #36	@ 0x24
 80013a4:	5c5b      	ldrb	r3, [r3, r1]
 80013a6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013a8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7edb      	ldrb	r3, [r3, #27]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d115      	bne.n	80013e4 <HAL_ADC_Init+0x390>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7e9b      	ldrb	r3, [r3, #26]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_ADC_Init+0x378>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2280      	movs	r2, #128	@ 0x80
 80013c4:	0252      	lsls	r2, r2, #9
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	e00b      	b.n	80013e4 <HAL_ADC_Init+0x390>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d0:	2220      	movs	r2, #32
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013dc:	2201      	movs	r2, #1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	23c2      	movs	r3, #194	@ 0xc2
 80013ea:	33ff      	adds	r3, #255	@ 0xff
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d007      	beq.n	8001400 <HAL_ADC_Init+0x3ac>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80013f8:	4313      	orrs	r3, r2
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68d9      	ldr	r1, [r3, #12]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	430a      	orrs	r2, r1
 800140e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	055b      	lsls	r3, r3, #21
 8001418:	429a      	cmp	r2, r3
 800141a:	d01b      	beq.n	8001454 <HAL_ADC_Init+0x400>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001420:	2b01      	cmp	r3, #1
 8001422:	d017      	beq.n	8001454 <HAL_ADC_Init+0x400>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001428:	2b02      	cmp	r3, #2
 800142a:	d013      	beq.n	8001454 <HAL_ADC_Init+0x400>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001430:	2b03      	cmp	r3, #3
 8001432:	d00f      	beq.n	8001454 <HAL_ADC_Init+0x400>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001438:	2b04      	cmp	r3, #4
 800143a:	d00b      	beq.n	8001454 <HAL_ADC_Init+0x400>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001440:	2b05      	cmp	r3, #5
 8001442:	d007      	beq.n	8001454 <HAL_ADC_Init+0x400>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001448:	2b06      	cmp	r3, #6
 800144a:	d003      	beq.n	8001454 <HAL_ADC_Init+0x400>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001450:	2b07      	cmp	r3, #7
 8001452:	d112      	bne.n	800147a <HAL_ADC_Init+0x426>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2107      	movs	r1, #7
 8001460:	438a      	bics	r2, r1
 8001462:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6959      	ldr	r1, [r3, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146e:	2207      	movs	r2, #7
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4a1a      	ldr	r2, [pc, #104]	@ (80014ec <HAL_ADC_Init+0x498>)
 8001482:	4013      	ands	r3, r2
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	429a      	cmp	r2, r3
 8001488:	d10b      	bne.n	80014a2 <HAL_ADC_Init+0x44e>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001494:	2203      	movs	r2, #3
 8001496:	4393      	bics	r3, r2
 8001498:	2201      	movs	r2, #1
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014a0:	e01c      	b.n	80014dc <HAL_ADC_Init+0x488>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a6:	2212      	movs	r2, #18
 80014a8:	4393      	bics	r3, r2
 80014aa:	2210      	movs	r2, #16
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b6:	2201      	movs	r2, #1
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80014be:	230f      	movs	r3, #15
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014c6:	e009      	b.n	80014dc <HAL_ADC_Init+0x488>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014cc:	2210      	movs	r2, #16
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80014d4:	230f      	movs	r3, #15
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014dc:	230f      	movs	r3, #15
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	781b      	ldrb	r3, [r3, #0]
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b004      	add	sp, #16
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	833fffe7 	.word	0x833fffe7

080014f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014fa:	230f      	movs	r3, #15
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4abc      	ldr	r2, [pc, #752]	@ (80017fc <HAL_ADC_ConfigChannel+0x30c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d005      	beq.n	800151c <HAL_ADC_ConfigChannel+0x2c>
 8001510:	4abb      	ldr	r2, [pc, #748]	@ (8001800 <HAL_ADC_ConfigChannel+0x310>)
 8001512:	4bbc      	ldr	r3, [pc, #752]	@ (8001804 <HAL_ADC_ConfigChannel+0x314>)
 8001514:	0011      	movs	r1, r2
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff fb24 	bl	8000b64 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d04d      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d049      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d045      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d041      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d03d      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d039      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b06      	cmp	r3, #6
 8001552:	d035      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b07      	cmp	r3, #7
 800155a:	d031      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b08      	cmp	r3, #8
 8001562:	d02d      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b09      	cmp	r3, #9
 800156a:	d029      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b0a      	cmp	r3, #10
 8001572:	d025      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b0b      	cmp	r3, #11
 800157a:	d021      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b0c      	cmp	r3, #12
 8001582:	d01d      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b0d      	cmp	r3, #13
 800158a:	d019      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b0e      	cmp	r3, #14
 8001592:	d015      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b0f      	cmp	r3, #15
 800159a:	d011      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d00d      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b11      	cmp	r3, #17
 80015aa:	d009      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d005      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xd0>
 80015b4:	4a94      	ldr	r2, [pc, #592]	@ (8001808 <HAL_ADC_ConfigChannel+0x318>)
 80015b6:	4b93      	ldr	r3, [pc, #588]	@ (8001804 <HAL_ADC_ConfigChannel+0x314>)
 80015b8:	0011      	movs	r1, r2
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7ff fad2 	bl	8000b64 <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d00a      	beq.n	80015e2 <HAL_ADC_ConfigChannel+0xf2>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a8e      	ldr	r2, [pc, #568]	@ (800180c <HAL_ADC_ConfigChannel+0x31c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d005      	beq.n	80015e2 <HAL_ADC_ConfigChannel+0xf2>
 80015d6:	4a8e      	ldr	r2, [pc, #568]	@ (8001810 <HAL_ADC_ConfigChannel+0x320>)
 80015d8:	4b8a      	ldr	r3, [pc, #552]	@ (8001804 <HAL_ADC_ConfigChannel+0x314>)
 80015da:	0011      	movs	r1, r2
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff fac1 	bl	8000b64 <assert_failed>
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	055b      	lsls	r3, r3, #21
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d043      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d03f      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d03b      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001602:	2b03      	cmp	r3, #3
 8001604:	d037      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160a:	2b04      	cmp	r3, #4
 800160c:	d033      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001612:	2b05      	cmp	r3, #5
 8001614:	d02f      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161a:	2b06      	cmp	r3, #6
 800161c:	d02b      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001622:	2b07      	cmp	r3, #7
 8001624:	d027      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	055b      	lsls	r3, r3, #21
 800162e:	429a      	cmp	r2, r3
 8001630:	d021      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d01d      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d019      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d015      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d011      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d00d      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b06      	cmp	r3, #6
 8001660:	d009      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b07      	cmp	r3, #7
 8001668:	d005      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x186>
 800166a:	4a6a      	ldr	r2, [pc, #424]	@ (8001814 <HAL_ADC_ConfigChannel+0x324>)
 800166c:	4b65      	ldr	r3, [pc, #404]	@ (8001804 <HAL_ADC_ConfigChannel+0x314>)
 800166e:	0011      	movs	r1, r2
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff fa77 	bl	8000b64 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2234      	movs	r2, #52	@ 0x34
 800167a:	5c9b      	ldrb	r3, [r3, r2]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x194>
 8001680:	2302      	movs	r3, #2
 8001682:	e0e9      	b.n	8001858 <HAL_ADC_ConfigChannel+0x368>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2234      	movs	r2, #52	@ 0x34
 8001688:	2101      	movs	r1, #1
 800168a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2204      	movs	r2, #4
 8001694:	4013      	ands	r3, r2
 8001696:	d000      	beq.n	800169a <HAL_ADC_ConfigChannel+0x1aa>
 8001698:	e0cd      	b.n	8001836 <HAL_ADC_ConfigChannel+0x346>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a5b      	ldr	r2, [pc, #364]	@ (800180c <HAL_ADC_ConfigChannel+0x31c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d100      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x1b6>
 80016a4:	e083      	b.n	80017ae <HAL_ADC_ConfigChannel+0x2be>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2201      	movs	r2, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	055b      	lsls	r3, r3, #21
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d037      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x248>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d033      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x248>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d02f      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x248>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d02b      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x248>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d027      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x248>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d023      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x248>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	d01f      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x248>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fc:	2b07      	cmp	r3, #7
 80016fe:	d01b      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x248>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2107      	movs	r1, #7
 800170c:	400b      	ands	r3, r1
 800170e:	429a      	cmp	r2, r3
 8001710:	d012      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x248>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2107      	movs	r1, #7
 800171e:	438a      	bics	r2, r1
 8001720:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6959      	ldr	r1, [r3, #20]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2207      	movs	r2, #7
 800172e:	401a      	ands	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b10      	cmp	r3, #16
 800173e:	d008      	beq.n	8001752 <HAL_ADC_ConfigChannel+0x262>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b11      	cmp	r3, #17
 8001746:	d004      	beq.n	8001752 <HAL_ADC_ConfigChannel+0x262>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b12      	cmp	r3, #18
 800174e:	d000      	beq.n	8001752 <HAL_ADC_ConfigChannel+0x262>
 8001750:	e07b      	b.n	800184a <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001752:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <HAL_ADC_ConfigChannel+0x328>)
 8001754:	6819      	ldr	r1, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b10      	cmp	r3, #16
 800175c:	d009      	beq.n	8001772 <HAL_ADC_ConfigChannel+0x282>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b11      	cmp	r3, #17
 8001764:	d102      	bne.n	800176c <HAL_ADC_ConfigChannel+0x27c>
 8001766:	2380      	movs	r3, #128	@ 0x80
 8001768:	03db      	lsls	r3, r3, #15
 800176a:	e004      	b.n	8001776 <HAL_ADC_ConfigChannel+0x286>
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	045b      	lsls	r3, r3, #17
 8001770:	e001      	b.n	8001776 <HAL_ADC_ConfigChannel+0x286>
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	4a28      	ldr	r2, [pc, #160]	@ (8001818 <HAL_ADC_ConfigChannel+0x328>)
 8001778:	430b      	orrs	r3, r1
 800177a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b10      	cmp	r3, #16
 8001782:	d162      	bne.n	800184a <HAL_ADC_ConfigChannel+0x35a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001784:	4b25      	ldr	r3, [pc, #148]	@ (800181c <HAL_ADC_ConfigChannel+0x32c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4925      	ldr	r1, [pc, #148]	@ (8001820 <HAL_ADC_ConfigChannel+0x330>)
 800178a:	0018      	movs	r0, r3
 800178c:	f7fe fcce 	bl	800012c <__udivsi3>
 8001790:	0003      	movs	r3, r0
 8001792:	001a      	movs	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	189b      	adds	r3, r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800179e:	e002      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x2b6>
          {
            wait_loop_index--;
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f9      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x2b0>
 80017ac:	e04d      	b.n	800184a <HAL_ADC_ConfigChannel+0x35a>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	4099      	lsls	r1, r3
 80017bc:	000b      	movs	r3, r1
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	400a      	ands	r2, r1
 80017c6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b10      	cmp	r3, #16
 80017ce:	d007      	beq.n	80017e0 <HAL_ADC_ConfigChannel+0x2f0>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b11      	cmp	r3, #17
 80017d6:	d003      	beq.n	80017e0 <HAL_ADC_ConfigChannel+0x2f0>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b12      	cmp	r3, #18
 80017de:	d134      	bne.n	800184a <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <HAL_ADC_ConfigChannel+0x328>)
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d01f      	beq.n	800182c <HAL_ADC_ConfigChannel+0x33c>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b11      	cmp	r3, #17
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x308>
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_ADC_ConfigChannel+0x334>)
 80017f6:	e01a      	b.n	800182e <HAL_ADC_ConfigChannel+0x33e>
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <HAL_ADC_ConfigChannel+0x338>)
 80017fa:	e018      	b.n	800182e <HAL_ADC_ConfigChannel+0x33e>
 80017fc:	40012400 	.word	0x40012400
 8001800:	0000076c 	.word	0x0000076c
 8001804:	0800c304 	.word	0x0800c304
 8001808:	0000076d 	.word	0x0000076d
 800180c:	00001001 	.word	0x00001001
 8001810:	0000076e 	.word	0x0000076e
 8001814:	00000772 	.word	0x00000772
 8001818:	40012708 	.word	0x40012708
 800181c:	20000018 	.word	0x20000018
 8001820:	000f4240 	.word	0x000f4240
 8001824:	ffbfffff 	.word	0xffbfffff
 8001828:	feffffff 	.word	0xfeffffff
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <HAL_ADC_ConfigChannel+0x370>)
 800182e:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <HAL_ADC_ConfigChannel+0x374>)
 8001830:	400b      	ands	r3, r1
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	e009      	b.n	800184a <HAL_ADC_ConfigChannel+0x35a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800183a:	2220      	movs	r2, #32
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001842:	230f      	movs	r3, #15
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2234      	movs	r2, #52	@ 0x34
 800184e:	2100      	movs	r1, #0
 8001850:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001852:	230f      	movs	r3, #15
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	781b      	ldrb	r3, [r3, #0]
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b004      	add	sp, #16
 800185e:	bd80      	pop	{r7, pc}
 8001860:	ff7fffff 	.word	0xff7fffff
 8001864:	40012708 	.word	0x40012708

08001868 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001870:	2317      	movs	r3, #23
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a50      	ldr	r2, [pc, #320]	@ (80019c8 <HAL_ADCEx_Calibration_Start+0x160>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d004      	beq.n	8001894 <HAL_ADCEx_Calibration_Start+0x2c>
 800188a:	4b50      	ldr	r3, [pc, #320]	@ (80019cc <HAL_ADCEx_Calibration_Start+0x164>)
 800188c:	2166      	movs	r1, #102	@ 0x66
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff f968 	bl	8000b64 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2234      	movs	r2, #52	@ 0x34
 8001898:	5c9b      	ldrb	r3, [r3, r2]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_ADCEx_Calibration_Start+0x3a>
 800189e:	2302      	movs	r3, #2
 80018a0:	e08d      	b.n	80019be <HAL_ADCEx_Calibration_Start+0x156>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2234      	movs	r2, #52	@ 0x34
 80018a6:	2101      	movs	r1, #1
 80018a8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2203      	movs	r2, #3
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d112      	bne.n	80018de <HAL_ADCEx_Calibration_Start+0x76>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d009      	beq.n	80018da <HAL_ADCEx_Calibration_Start+0x72>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	401a      	ands	r2, r3
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d101      	bne.n	80018de <HAL_ADCEx_Calibration_Start+0x76>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_ADCEx_Calibration_Start+0x78>
 80018de:	2300      	movs	r3, #0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d15b      	bne.n	800199c <HAL_ADCEx_Calibration_Start+0x134>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e8:	4a39      	ldr	r2, [pc, #228]	@ (80019d0 <HAL_ADCEx_Calibration_Start+0x168>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	2202      	movs	r2, #2
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2203      	movs	r2, #3
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2103      	movs	r1, #3
 800190c:	438a      	bics	r2, r1
 800190e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2180      	movs	r1, #128	@ 0x80
 800191c:	0609      	lsls	r1, r1, #24
 800191e:	430a      	orrs	r2, r1
 8001920:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001922:	f7ff fb8d 	bl	8001040 <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800192a:	e01d      	b.n	8001968 <HAL_ADCEx_Calibration_Start+0x100>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800192c:	f7ff fb88 	bl	8001040 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d916      	bls.n	8001968 <HAL_ADCEx_Calibration_Start+0x100>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	0fdb      	lsrs	r3, r3, #31
 8001942:	07da      	lsls	r2, r3, #31
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	061b      	lsls	r3, r3, #24
 8001948:	429a      	cmp	r2, r3
 800194a:	d10d      	bne.n	8001968 <HAL_ADCEx_Calibration_Start+0x100>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001950:	2212      	movs	r2, #18
 8001952:	4393      	bics	r3, r2
 8001954:	2210      	movs	r2, #16
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2234      	movs	r2, #52	@ 0x34
 8001960:	2100      	movs	r1, #0
 8001962:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e02a      	b.n	80019be <HAL_ADCEx_Calibration_Start+0x156>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	0fdb      	lsrs	r3, r3, #31
 8001970:	07da      	lsls	r2, r3, #31
 8001972:	2380      	movs	r3, #128	@ 0x80
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	429a      	cmp	r2, r3
 8001978:	d0d8      	beq.n	800192c <HAL_ADCEx_Calibration_Start+0xc4>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68d9      	ldr	r1, [r3, #12]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	430a      	orrs	r2, r1
 8001988:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800198e:	2203      	movs	r2, #3
 8001990:	4393      	bics	r3, r2
 8001992:	2201      	movs	r2, #1
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	639a      	str	r2, [r3, #56]	@ 0x38
 800199a:	e009      	b.n	80019b0 <HAL_ADCEx_Calibration_Start+0x148>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a0:	2220      	movs	r2, #32
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80019a8:	2317      	movs	r3, #23
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2234      	movs	r2, #52	@ 0x34
 80019b4:	2100      	movs	r1, #0
 80019b6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80019b8:	2317      	movs	r3, #23
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	781b      	ldrb	r3, [r3, #0]
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b006      	add	sp, #24
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	40012400 	.word	0x40012400
 80019cc:	0800c33c 	.word	0x0800c33c
 80019d0:	fffffefd 	.word	0xfffffefd

080019d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e245      	b.n	8001e72 <HAL_CAN_Init+0x49e>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4ac6      	ldr	r2, [pc, #792]	@ (8001d04 <HAL_CAN_Init+0x330>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d006      	beq.n	80019fe <HAL_CAN_Init+0x2a>
 80019f0:	238f      	movs	r3, #143	@ 0x8f
 80019f2:	005a      	lsls	r2, r3, #1
 80019f4:	4bc4      	ldr	r3, [pc, #784]	@ (8001d08 <HAL_CAN_Init+0x334>)
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff f8b3 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7e1b      	ldrb	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_CAN_Init+0x4a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7e1b      	ldrb	r3, [r3, #24]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d007      	beq.n	8001a1e <HAL_CAN_Init+0x4a>
 8001a0e:	2320      	movs	r3, #32
 8001a10:	33ff      	adds	r3, #255	@ 0xff
 8001a12:	001a      	movs	r2, r3
 8001a14:	4bbc      	ldr	r3, [pc, #752]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f7ff f8a3 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7e5b      	ldrb	r3, [r3, #25]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <HAL_CAN_Init+0x68>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7e5b      	ldrb	r3, [r3, #25]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d006      	beq.n	8001a3c <HAL_CAN_Init+0x68>
 8001a2e:	2390      	movs	r3, #144	@ 0x90
 8001a30:	005a      	lsls	r2, r3, #1
 8001a32:	4bb5      	ldr	r3, [pc, #724]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7ff f894 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7e9b      	ldrb	r3, [r3, #26]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_CAN_Init+0x88>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7e9b      	ldrb	r3, [r3, #26]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d007      	beq.n	8001a5c <HAL_CAN_Init+0x88>
 8001a4c:	2322      	movs	r3, #34	@ 0x22
 8001a4e:	33ff      	adds	r3, #255	@ 0xff
 8001a50:	001a      	movs	r2, r3
 8001a52:	4bad      	ldr	r3, [pc, #692]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001a54:	0011      	movs	r1, r2
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff f884 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7edb      	ldrb	r3, [r3, #27]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00a      	beq.n	8001a7a <HAL_CAN_Init+0xa6>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7edb      	ldrb	r3, [r3, #27]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d006      	beq.n	8001a7a <HAL_CAN_Init+0xa6>
 8001a6c:	2391      	movs	r3, #145	@ 0x91
 8001a6e:	005a      	lsls	r2, r3, #1
 8001a70:	4ba5      	ldr	r3, [pc, #660]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001a72:	0011      	movs	r1, r2
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff f875 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7f1b      	ldrb	r3, [r3, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_CAN_Init+0xc6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7f1b      	ldrb	r3, [r3, #28]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d007      	beq.n	8001a9a <HAL_CAN_Init+0xc6>
 8001a8a:	2324      	movs	r3, #36	@ 0x24
 8001a8c:	33ff      	adds	r3, #255	@ 0xff
 8001a8e:	001a      	movs	r2, r3
 8001a90:	4b9d      	ldr	r3, [pc, #628]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001a92:	0011      	movs	r1, r2
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff f865 	bl	8000b64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7f5b      	ldrb	r3, [r3, #29]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <HAL_CAN_Init+0xe4>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7f5b      	ldrb	r3, [r3, #29]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d006      	beq.n	8001ab8 <HAL_CAN_Init+0xe4>
 8001aaa:	2392      	movs	r3, #146	@ 0x92
 8001aac:	005a      	lsls	r2, r3, #1
 8001aae:	4b96      	ldr	r3, [pc, #600]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001ab0:	0011      	movs	r1, r2
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f7ff f856 	bl	8000b64 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d019      	beq.n	8001af4 <HAL_CAN_Init+0x120>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	05db      	lsls	r3, r3, #23
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d013      	beq.n	8001af4 <HAL_CAN_Init+0x120>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	061b      	lsls	r3, r3, #24
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d00d      	beq.n	8001af4 <HAL_CAN_Init+0x120>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	23c0      	movs	r3, #192	@ 0xc0
 8001ade:	061b      	lsls	r3, r3, #24
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d007      	beq.n	8001af4 <HAL_CAN_Init+0x120>
 8001ae4:	2326      	movs	r3, #38	@ 0x26
 8001ae6:	33ff      	adds	r3, #255	@ 0xff
 8001ae8:	001a      	movs	r2, r3
 8001aea:	4b87      	ldr	r3, [pc, #540]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001aec:	0011      	movs	r1, r2
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7ff f838 	bl	8000b64 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d018      	beq.n	8001b2e <HAL_CAN_Init+0x15a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	045b      	lsls	r3, r3, #17
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d012      	beq.n	8001b2e <HAL_CAN_Init+0x15a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	049b      	lsls	r3, r3, #18
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d00c      	beq.n	8001b2e <HAL_CAN_Init+0x15a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	23c0      	movs	r3, #192	@ 0xc0
 8001b1a:	049b      	lsls	r3, r3, #18
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d006      	beq.n	8001b2e <HAL_CAN_Init+0x15a>
 8001b20:	2393      	movs	r3, #147	@ 0x93
 8001b22:	005a      	lsls	r2, r3, #1
 8001b24:	4b78      	ldr	r3, [pc, #480]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001b26:	0011      	movs	r1, r2
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff f81b 	bl	8000b64 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d061      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	025b      	lsls	r3, r3, #9
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d05b      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	029b      	lsls	r3, r3, #10
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d055      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	23c0      	movs	r3, #192	@ 0xc0
 8001b54:	029b      	lsls	r3, r3, #10
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d04f      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	2380      	movs	r3, #128	@ 0x80
 8001b60:	02db      	lsls	r3, r3, #11
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d049      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	23a0      	movs	r3, #160	@ 0xa0
 8001b6c:	02db      	lsls	r3, r3, #11
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d043      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	23c0      	movs	r3, #192	@ 0xc0
 8001b78:	02db      	lsls	r3, r3, #11
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d03d      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	23e0      	movs	r3, #224	@ 0xe0
 8001b84:	02db      	lsls	r3, r3, #11
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d037      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	031b      	lsls	r3, r3, #12
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d031      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	2390      	movs	r3, #144	@ 0x90
 8001b9c:	031b      	lsls	r3, r3, #12
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d02b      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	23a0      	movs	r3, #160	@ 0xa0
 8001ba8:	031b      	lsls	r3, r3, #12
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d025      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	23b0      	movs	r3, #176	@ 0xb0
 8001bb4:	031b      	lsls	r3, r3, #12
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d01f      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	23c0      	movs	r3, #192	@ 0xc0
 8001bc0:	031b      	lsls	r3, r3, #12
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d019      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	23d0      	movs	r3, #208	@ 0xd0
 8001bcc:	031b      	lsls	r3, r3, #12
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d013      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	23e0      	movs	r3, #224	@ 0xe0
 8001bd8:	031b      	lsls	r3, r3, #12
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d00d      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	23f0      	movs	r3, #240	@ 0xf0
 8001be4:	031b      	lsls	r3, r3, #12
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d007      	beq.n	8001bfa <HAL_CAN_Init+0x226>
 8001bea:	2328      	movs	r3, #40	@ 0x28
 8001bec:	33ff      	adds	r3, #255	@ 0xff
 8001bee:	001a      	movs	r2, r3
 8001bf0:	4b45      	ldr	r3, [pc, #276]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001bf2:	0011      	movs	r1, r2
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7fe ffb5 	bl	8000b64 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d030      	beq.n	8001c64 <HAL_CAN_Init+0x290>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	035b      	lsls	r3, r3, #13
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d02a      	beq.n	8001c64 <HAL_CAN_Init+0x290>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	039b      	lsls	r3, r3, #14
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d024      	beq.n	8001c64 <HAL_CAN_Init+0x290>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	23c0      	movs	r3, #192	@ 0xc0
 8001c20:	039b      	lsls	r3, r3, #14
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d01e      	beq.n	8001c64 <HAL_CAN_Init+0x290>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	03db      	lsls	r3, r3, #15
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d018      	beq.n	8001c64 <HAL_CAN_Init+0x290>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	23a0      	movs	r3, #160	@ 0xa0
 8001c38:	03db      	lsls	r3, r3, #15
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d012      	beq.n	8001c64 <HAL_CAN_Init+0x290>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	23c0      	movs	r3, #192	@ 0xc0
 8001c44:	03db      	lsls	r3, r3, #15
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d00c      	beq.n	8001c64 <HAL_CAN_Init+0x290>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	23e0      	movs	r3, #224	@ 0xe0
 8001c50:	03db      	lsls	r3, r3, #15
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d006      	beq.n	8001c64 <HAL_CAN_Init+0x290>
 8001c56:	2394      	movs	r3, #148	@ 0x94
 8001c58:	005a      	lsls	r2, r3, #1
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001c5c:	0011      	movs	r1, r2
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7fe ff80 	bl	8000b64 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_CAN_Init+0x2a4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d907      	bls.n	8001c88 <HAL_CAN_Init+0x2b4>
 8001c78:	232a      	movs	r3, #42	@ 0x2a
 8001c7a:	33ff      	adds	r3, #255	@ 0xff
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <HAL_CAN_Init+0x334>)
 8001c80:	0011      	movs	r1, r2
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7fe ff6e 	bl	8000b64 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	5c9b      	ldrb	r3, [r3, r2]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d103      	bne.n	8001c9c <HAL_CAN_Init+0x2c8>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff f822 	bl	8000ce0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cac:	f7ff f9c8 	bl	8001040 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cb4:	e013      	b.n	8001cde <HAL_CAN_Init+0x30a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb6:	f7ff f9c3 	bl	8001040 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b0a      	cmp	r3, #10
 8001cc2:	d90c      	bls.n	8001cde <HAL_CAN_Init+0x30a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	2280      	movs	r2, #128	@ 0x80
 8001cca:	0292      	lsls	r2, r2, #10
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	2105      	movs	r1, #5
 8001cd8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0c9      	b.n	8001e72 <HAL_CAN_Init+0x49e>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d0e5      	beq.n	8001cb6 <HAL_CAN_Init+0x2e2>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cfa:	f7ff f9a1 	bl	8001040 <HAL_GetTick>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d02:	e017      	b.n	8001d34 <HAL_CAN_Init+0x360>
 8001d04:	40006400 	.word	0x40006400
 8001d08:	0800c378 	.word	0x0800c378
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d0c:	f7ff f998 	bl	8001040 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b0a      	cmp	r3, #10
 8001d18:	d90c      	bls.n	8001d34 <HAL_CAN_Init+0x360>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	2280      	movs	r2, #128	@ 0x80
 8001d20:	0292      	lsls	r2, r2, #10
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e09e      	b.n	8001e72 <HAL_CAN_Init+0x49e>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d1e5      	bne.n	8001d0c <HAL_CAN_Init+0x338>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d108      	bne.n	8001d5a <HAL_CAN_Init+0x386>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2180      	movs	r1, #128	@ 0x80
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e007      	b.n	8001d6a <HAL_CAN_Init+0x396>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2180      	movs	r1, #128	@ 0x80
 8001d66:	438a      	bics	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7e5b      	ldrb	r3, [r3, #25]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <HAL_CAN_Init+0x3b0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2140      	movs	r1, #64	@ 0x40
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e007      	b.n	8001d94 <HAL_CAN_Init+0x3c0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2140      	movs	r1, #64	@ 0x40
 8001d90:	438a      	bics	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7e9b      	ldrb	r3, [r3, #26]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <HAL_CAN_Init+0x3da>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2120      	movs	r1, #32
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e007      	b.n	8001dbe <HAL_CAN_Init+0x3ea>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2120      	movs	r1, #32
 8001dba:	438a      	bics	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7edb      	ldrb	r3, [r3, #27]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d108      	bne.n	8001dd8 <HAL_CAN_Init+0x404>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	438a      	bics	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e007      	b.n	8001de8 <HAL_CAN_Init+0x414>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2110      	movs	r1, #16
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7f1b      	ldrb	r3, [r3, #28]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d108      	bne.n	8001e02 <HAL_CAN_Init+0x42e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e007      	b.n	8001e12 <HAL_CAN_Init+0x43e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	438a      	bics	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7f5b      	ldrb	r3, [r3, #29]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d108      	bne.n	8001e2c <HAL_CAN_Init+0x458>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2104      	movs	r1, #4
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e007      	b.n	8001e3c <HAL_CAN_Init+0x468>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2104      	movs	r1, #4
 8001e38:	438a      	bics	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	0011      	movs	r1, r2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	1e5a      	subs	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b004      	add	sp, #16
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)

08001e7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e8c:	2013      	movs	r0, #19
 8001e8e:	183b      	adds	r3, r7, r0
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	2120      	movs	r1, #32
 8001e94:	5c52      	ldrb	r2, [r2, r1]
 8001e96:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e98:	0002      	movs	r2, r0
 8001e9a:	18bb      	adds	r3, r7, r2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d004      	beq.n	8001eac <HAL_CAN_ConfigFilter+0x30>
 8001ea2:	18bb      	adds	r3, r7, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d000      	beq.n	8001eac <HAL_CAN_ConfigFilter+0x30>
 8001eaa:	e141      	b.n	8002130 <HAL_CAN_ConfigFilter+0x2b4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	025b      	lsls	r3, r3, #9
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d305      	bcc.n	8001ec4 <HAL_CAN_ConfigFilter+0x48>
 8001eb8:	4aa3      	ldr	r2, [pc, #652]	@ (8002148 <HAL_CAN_ConfigFilter+0x2cc>)
 8001eba:	4ba4      	ldr	r3, [pc, #656]	@ (800214c <HAL_CAN_ConfigFilter+0x2d0>)
 8001ebc:	0011      	movs	r1, r2
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7fe fe50 	bl	8000b64 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	025b      	lsls	r3, r3, #9
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d305      	bcc.n	8001edc <HAL_CAN_ConfigFilter+0x60>
 8001ed0:	4a9f      	ldr	r2, [pc, #636]	@ (8002150 <HAL_CAN_ConfigFilter+0x2d4>)
 8001ed2:	4b9e      	ldr	r3, [pc, #632]	@ (800214c <HAL_CAN_ConfigFilter+0x2d0>)
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7fe fe44 	bl	8000b64 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	2380      	movs	r3, #128	@ 0x80
 8001ee2:	025b      	lsls	r3, r3, #9
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d306      	bcc.n	8001ef6 <HAL_CAN_ConfigFilter+0x7a>
 8001ee8:	23d5      	movs	r3, #213	@ 0xd5
 8001eea:	009a      	lsls	r2, r3, #2
 8001eec:	4b97      	ldr	r3, [pc, #604]	@ (800214c <HAL_CAN_ConfigFilter+0x2d0>)
 8001eee:	0011      	movs	r1, r2
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7fe fe37 	bl	8000b64 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	025b      	lsls	r3, r3, #9
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d305      	bcc.n	8001f0e <HAL_CAN_ConfigFilter+0x92>
 8001f02:	4a94      	ldr	r2, [pc, #592]	@ (8002154 <HAL_CAN_ConfigFilter+0x2d8>)
 8001f04:	4b91      	ldr	r3, [pc, #580]	@ (800214c <HAL_CAN_ConfigFilter+0x2d0>)
 8001f06:	0011      	movs	r1, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7fe fe2b 	bl	8000b64 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_CAN_ConfigFilter+0xae>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d005      	beq.n	8001f2a <HAL_CAN_ConfigFilter+0xae>
 8001f1e:	4a8e      	ldr	r2, [pc, #568]	@ (8002158 <HAL_CAN_ConfigFilter+0x2dc>)
 8001f20:	4b8a      	ldr	r3, [pc, #552]	@ (800214c <HAL_CAN_ConfigFilter+0x2d0>)
 8001f22:	0011      	movs	r1, r2
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7fe fe1d 	bl	8000b64 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_CAN_ConfigFilter+0xca>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d005      	beq.n	8001f46 <HAL_CAN_ConfigFilter+0xca>
 8001f3a:	4a88      	ldr	r2, [pc, #544]	@ (800215c <HAL_CAN_ConfigFilter+0x2e0>)
 8001f3c:	4b83      	ldr	r3, [pc, #524]	@ (800214c <HAL_CAN_ConfigFilter+0x2d0>)
 8001f3e:	0011      	movs	r1, r2
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7fe fe0f 	bl	8000b64 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_CAN_ConfigFilter+0xe8>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d006      	beq.n	8001f64 <HAL_CAN_ConfigFilter+0xe8>
 8001f56:	23d6      	movs	r3, #214	@ 0xd6
 8001f58:	009a      	lsls	r2, r3, #2
 8001f5a:	4b7c      	ldr	r3, [pc, #496]	@ (800214c <HAL_CAN_ConfigFilter+0x2d0>)
 8001f5c:	0011      	movs	r1, r2
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7fe fe00 	bl	8000b64 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d009      	beq.n	8001f80 <HAL_CAN_ConfigFilter+0x104>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d005      	beq.n	8001f80 <HAL_CAN_ConfigFilter+0x104>
 8001f74:	4a7a      	ldr	r2, [pc, #488]	@ (8002160 <HAL_CAN_ConfigFilter+0x2e4>)
 8001f76:	4b75      	ldr	r3, [pc, #468]	@ (800214c <HAL_CAN_ConfigFilter+0x2d0>)
 8001f78:	0011      	movs	r1, r2
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7fe fdf2 	bl	8000b64 <assert_failed>

    /* CAN is single instance with 14 dedicated filters banks */

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	2b0d      	cmp	r3, #13
 8001f86:	d905      	bls.n	8001f94 <HAL_CAN_ConfigFilter+0x118>
 8001f88:	4a76      	ldr	r2, [pc, #472]	@ (8002164 <HAL_CAN_ConfigFilter+0x2e8>)
 8001f8a:	4b70      	ldr	r3, [pc, #448]	@ (800214c <HAL_CAN_ConfigFilter+0x2d0>)
 8001f8c:	0011      	movs	r1, r2
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7fe fde8 	bl	8000b64 <assert_failed>

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	58d3      	ldr	r3, [r2, r3]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	0011      	movs	r1, r2
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	221f      	movs	r2, #31
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	0013      	movs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	2387      	movs	r3, #135	@ 0x87
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	58d3      	ldr	r3, [r2, r3]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	43d2      	mvns	r2, r2
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	0011      	movs	r1, r2
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	2387      	movs	r3, #135	@ 0x87
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d129      	bne.n	800202e <HAL_CAN_ConfigFilter+0x1b2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	2383      	movs	r3, #131	@ 0x83
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	58d3      	ldr	r3, [r2, r3]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	43d2      	mvns	r2, r2
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	0011      	movs	r1, r2
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	2383      	movs	r3, #131	@ 0x83
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002004:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	3248      	adds	r2, #72	@ 0x48
 800200a:	00d2      	lsls	r2, r2, #3
 800200c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	041b      	lsls	r3, r3, #16
 800201a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002020:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002022:	6979      	ldr	r1, [r7, #20]
 8002024:	3348      	adds	r3, #72	@ 0x48
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	18cb      	adds	r3, r1, r3
 800202a:	3304      	adds	r3, #4
 800202c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d128      	bne.n	8002088 <HAL_CAN_ConfigFilter+0x20c>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	2383      	movs	r3, #131	@ 0x83
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	58d2      	ldr	r2, [r2, r3]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	431a      	orrs	r2, r3
 8002042:	0011      	movs	r1, r2
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	2383      	movs	r3, #131	@ 0x83
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800205e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3248      	adds	r2, #72	@ 0x48
 8002064:	00d2      	lsls	r2, r2, #3
 8002066:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	041b      	lsls	r3, r3, #16
 8002074:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800207a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800207c:	6979      	ldr	r1, [r7, #20]
 800207e:	3348      	adds	r3, #72	@ 0x48
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	18cb      	adds	r3, r1, r3
 8002084:	3304      	adds	r3, #4
 8002086:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10c      	bne.n	80020aa <HAL_CAN_ConfigFilter+0x22e>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	2381      	movs	r3, #129	@ 0x81
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	58d3      	ldr	r3, [r2, r3]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	43d2      	mvns	r2, r2
 800209c:	401a      	ands	r2, r3
 800209e:	0011      	movs	r1, r2
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	2381      	movs	r3, #129	@ 0x81
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	50d1      	str	r1, [r2, r3]
 80020a8:	e00a      	b.n	80020c0 <HAL_CAN_ConfigFilter+0x244>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	2381      	movs	r3, #129	@ 0x81
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	58d2      	ldr	r2, [r2, r3]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	0011      	movs	r1, r2
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	2381      	movs	r3, #129	@ 0x81
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10c      	bne.n	80020e2 <HAL_CAN_ConfigFilter+0x266>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	2385      	movs	r3, #133	@ 0x85
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	58d3      	ldr	r3, [r2, r3]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	43d2      	mvns	r2, r2
 80020d4:	401a      	ands	r2, r3
 80020d6:	0011      	movs	r1, r2
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	2385      	movs	r3, #133	@ 0x85
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	50d1      	str	r1, [r2, r3]
 80020e0:	e00a      	b.n	80020f8 <HAL_CAN_ConfigFilter+0x27c>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	2385      	movs	r3, #133	@ 0x85
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	58d2      	ldr	r2, [r2, r3]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	0011      	movs	r1, r2
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	2385      	movs	r3, #133	@ 0x85
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d10a      	bne.n	8002116 <HAL_CAN_ConfigFilter+0x29a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	2387      	movs	r3, #135	@ 0x87
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	58d2      	ldr	r2, [r2, r3]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	431a      	orrs	r2, r3
 800210c:	0011      	movs	r1, r2
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	2387      	movs	r3, #135	@ 0x87
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	58d3      	ldr	r3, [r2, r3]
 800211e:	2201      	movs	r2, #1
 8002120:	4393      	bics	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	2380      	movs	r3, #128	@ 0x80
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e007      	b.n	8002140 <HAL_CAN_ConfigFilter+0x2c4>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	2280      	movs	r2, #128	@ 0x80
 8002136:	02d2      	lsls	r2, r2, #11
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
  }
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b006      	add	sp, #24
 8002146:	bd80      	pop	{r7, pc}
 8002148:	00000352 	.word	0x00000352
 800214c:	0800c378 	.word	0x0800c378
 8002150:	00000353 	.word	0x00000353
 8002154:	00000355 	.word	0x00000355
 8002158:	00000356 	.word	0x00000356
 800215c:	00000357 	.word	0x00000357
 8002160:	00000359 	.word	0x00000359
 8002164:	0000035e 	.word	0x0000035e

08002168 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d12f      	bne.n	80021dc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	2102      	movs	r1, #2
 8002182:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2101      	movs	r1, #1
 8002190:	438a      	bics	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002194:	f7fe ff54 	bl	8001040 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800219c:	e013      	b.n	80021c6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800219e:	f7fe ff4f 	bl	8001040 <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b0a      	cmp	r3, #10
 80021aa:	d90c      	bls.n	80021c6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	0292      	lsls	r2, r2, #10
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	2105      	movs	r1, #5
 80021c0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e012      	b.n	80021ec <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	4013      	ands	r3, r2
 80021d0:	d1e5      	bne.n	800219e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e007      	b.n	80021ec <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	0312      	lsls	r2, r2, #12
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
  }
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b004      	add	sp, #16
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002202:	231f      	movs	r3, #31
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	2120      	movs	r1, #32
 800220a:	5c52      	ldrb	r2, [r2, r1]
 800220c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_CAN_AddTxMessage+0x3e>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b04      	cmp	r3, #4
 8002224:	d005      	beq.n	8002232 <HAL_CAN_AddTxMessage+0x3e>
 8002226:	4a86      	ldr	r2, [pc, #536]	@ (8002440 <HAL_CAN_AddTxMessage+0x24c>)
 8002228:	4b86      	ldr	r3, [pc, #536]	@ (8002444 <HAL_CAN_AddTxMessage+0x250>)
 800222a:	0011      	movs	r1, r2
 800222c:	0018      	movs	r0, r3
 800222e:	f7fe fc99 	bl	8000b64 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_CAN_AddTxMessage+0x5a>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d005      	beq.n	800224e <HAL_CAN_AddTxMessage+0x5a>
 8002242:	4a81      	ldr	r2, [pc, #516]	@ (8002448 <HAL_CAN_AddTxMessage+0x254>)
 8002244:	4b7f      	ldr	r3, [pc, #508]	@ (8002444 <HAL_CAN_AddTxMessage+0x250>)
 8002246:	0011      	movs	r1, r2
 8002248:	0018      	movs	r0, r3
 800224a:	f7fe fc8b 	bl	8000b64 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d906      	bls.n	8002264 <HAL_CAN_AddTxMessage+0x70>
 8002256:	2398      	movs	r3, #152	@ 0x98
 8002258:	00da      	lsls	r2, r3, #3
 800225a:	4b7a      	ldr	r3, [pc, #488]	@ (8002444 <HAL_CAN_AddTxMessage+0x250>)
 800225c:	0011      	movs	r1, r2
 800225e:	0018      	movs	r0, r3
 8002260:	f7fe fc80 	bl	8000b64 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10c      	bne.n	8002286 <HAL_CAN_AddTxMessage+0x92>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	429a      	cmp	r2, r3
 8002276:	d312      	bcc.n	800229e <HAL_CAN_AddTxMessage+0xaa>
 8002278:	4a74      	ldr	r2, [pc, #464]	@ (800244c <HAL_CAN_AddTxMessage+0x258>)
 800227a:	4b72      	ldr	r3, [pc, #456]	@ (8002444 <HAL_CAN_AddTxMessage+0x250>)
 800227c:	0011      	movs	r1, r2
 800227e:	0018      	movs	r0, r3
 8002280:	f7fe fc70 	bl	8000b64 <assert_failed>
 8002284:	e00b      	b.n	800229e <HAL_CAN_AddTxMessage+0xaa>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	059b      	lsls	r3, r3, #22
 800228e:	429a      	cmp	r2, r3
 8002290:	d305      	bcc.n	800229e <HAL_CAN_AddTxMessage+0xaa>
 8002292:	4a6f      	ldr	r2, [pc, #444]	@ (8002450 <HAL_CAN_AddTxMessage+0x25c>)
 8002294:	4b6b      	ldr	r3, [pc, #428]	@ (8002444 <HAL_CAN_AddTxMessage+0x250>)
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f7fe fc63 	bl	8000b64 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	7d1b      	ldrb	r3, [r3, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_CAN_AddTxMessage+0xc6>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	7d1b      	ldrb	r3, [r3, #20]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d005      	beq.n	80022ba <HAL_CAN_AddTxMessage+0xc6>
 80022ae:	4a69      	ldr	r2, [pc, #420]	@ (8002454 <HAL_CAN_AddTxMessage+0x260>)
 80022b0:	4b64      	ldr	r3, [pc, #400]	@ (8002444 <HAL_CAN_AddTxMessage+0x250>)
 80022b2:	0011      	movs	r1, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7fe fc55 	bl	8000b64 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80022ba:	221f      	movs	r2, #31
 80022bc:	18bb      	adds	r3, r7, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d004      	beq.n	80022ce <HAL_CAN_AddTxMessage+0xda>
 80022c4:	18bb      	adds	r3, r7, r2
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d000      	beq.n	80022ce <HAL_CAN_AddTxMessage+0xda>
 80022cc:	e0ab      	b.n	8002426 <HAL_CAN_AddTxMessage+0x232>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	2380      	movs	r3, #128	@ 0x80
 80022d2:	04db      	lsls	r3, r3, #19
 80022d4:	4013      	ands	r3, r2
 80022d6:	d10a      	bne.n	80022ee <HAL_CAN_AddTxMessage+0xfa>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	051b      	lsls	r3, r3, #20
 80022de:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022e0:	d105      	bne.n	80022ee <HAL_CAN_AddTxMessage+0xfa>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	055b      	lsls	r3, r3, #21
 80022e8:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022ea:	d100      	bne.n	80022ee <HAL_CAN_AddTxMessage+0xfa>
 80022ec:	e092      	b.n	8002414 <HAL_CAN_AddTxMessage+0x220>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	0e1b      	lsrs	r3, r3, #24
 80022f2:	2203      	movs	r2, #3
 80022f4:	4013      	ands	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022f8:	2201      	movs	r2, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	409a      	lsls	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_CAN_AddTxMessage+0x130>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4311      	orrs	r1, r2
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	3218      	adds	r2, #24
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	50d1      	str	r1, [r2, r3]
 8002322:	e00f      	b.n	8002344 <HAL_CAN_AddTxMessage+0x150>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800232e:	431a      	orrs	r2, r3
 8002330:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 800233a:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	3218      	adds	r2, #24
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3318      	adds	r3, #24
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	18cb      	adds	r3, r1, r3
 8002354:	3304      	adds	r3, #4
 8002356:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	7d1b      	ldrb	r3, [r3, #20]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d112      	bne.n	8002386 <HAL_CAN_AddTxMessage+0x192>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3318      	adds	r3, #24
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	18d3      	adds	r3, r2, r3
 800236c:	3304      	adds	r3, #4
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	431a      	orrs	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3318      	adds	r3, #24
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	18cb      	adds	r3, r1, r3
 8002382:	3304      	adds	r3, #4
 8002384:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3307      	adds	r3, #7
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	061a      	lsls	r2, r3, #24
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3306      	adds	r3, #6
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3305      	adds	r3, #5
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	0019      	movs	r1, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	6979      	ldr	r1, [r7, #20]
 80023b2:	23c6      	movs	r3, #198	@ 0xc6
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	0109      	lsls	r1, r1, #4
 80023b8:	1841      	adds	r1, r0, r1
 80023ba:	18cb      	adds	r3, r1, r3
 80023bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3303      	adds	r3, #3
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	061a      	lsls	r2, r3, #24
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3302      	adds	r3, #2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	041b      	lsls	r3, r3, #16
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3301      	adds	r3, #1
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	0019      	movs	r1, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	6979      	ldr	r1, [r7, #20]
 80023e8:	23c4      	movs	r3, #196	@ 0xc4
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	0109      	lsls	r1, r1, #4
 80023ee:	1841      	adds	r1, r0, r1
 80023f0:	18cb      	adds	r3, r1, r3
 80023f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	3218      	adds	r2, #24
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	58d2      	ldr	r2, [r2, r3]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	4311      	orrs	r1, r2
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	3218      	adds	r2, #24
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e010      	b.n	8002436 <HAL_CAN_AddTxMessage+0x242>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	2280      	movs	r2, #128	@ 0x80
 800241a:	0392      	lsls	r2, r2, #14
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e007      	b.n	8002436 <HAL_CAN_AddTxMessage+0x242>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	2280      	movs	r2, #128	@ 0x80
 800242c:	02d2      	lsls	r2, r2, #11
 800242e:	431a      	orrs	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
  }
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	b008      	add	sp, #32
 800243c:	bd80      	pop	{r7, pc}
 800243e:	46c0      	nop			@ (mov r8, r8)
 8002440:	000004be 	.word	0x000004be
 8002444:	0800c378 	.word	0x0800c378
 8002448:	000004bf 	.word	0x000004bf
 800244c:	000004c3 	.word	0x000004c3
 8002450:	000004c7 	.word	0x000004c7
 8002454:	000004c9 	.word	0x000004c9

08002458 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002466:	2317      	movs	r3, #23
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	2120      	movs	r1, #32
 800246e:	5c52      	ldrb	r2, [r2, r1]
 8002470:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_CAN_GetRxMessage+0x32>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d005      	beq.n	800248a <HAL_CAN_GetRxMessage+0x32>
 800247e:	4a92      	ldr	r2, [pc, #584]	@ (80026c8 <HAL_CAN_GetRxMessage+0x270>)
 8002480:	4b92      	ldr	r3, [pc, #584]	@ (80026cc <HAL_CAN_GetRxMessage+0x274>)
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f7fe fb6d 	bl	8000b64 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800248a:	2217      	movs	r2, #23
 800248c:	18bb      	adds	r3, r7, r2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d004      	beq.n	800249e <HAL_CAN_GetRxMessage+0x46>
 8002494:	18bb      	adds	r3, r7, r2
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d000      	beq.n	800249e <HAL_CAN_GetRxMessage+0x46>
 800249c:	e107      	b.n	80026ae <HAL_CAN_GetRxMessage+0x256>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10e      	bne.n	80024c2 <HAL_CAN_GetRxMessage+0x6a>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2203      	movs	r2, #3
 80024ac:	4013      	ands	r3, r2
 80024ae:	d117      	bne.n	80024e0 <HAL_CAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	0392      	lsls	r2, r2, #14
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0fd      	b.n	80026be <HAL_CAN_GetRxMessage+0x266>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2203      	movs	r2, #3
 80024ca:	4013      	ands	r3, r2
 80024cc:	d108      	bne.n	80024e0 <HAL_CAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	2280      	movs	r2, #128	@ 0x80
 80024d4:	0392      	lsls	r2, r2, #14
 80024d6:	431a      	orrs	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0ee      	b.n	80026be <HAL_CAN_GetRxMessage+0x266>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	321b      	adds	r2, #27
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	58d3      	ldr	r3, [r2, r3]
 80024ec:	2204      	movs	r2, #4
 80024ee:	401a      	ands	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <HAL_CAN_GetRxMessage+0xbc>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	321b      	adds	r2, #27
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	58d3      	ldr	r3, [r2, r3]
 8002508:	0d5b      	lsrs	r3, r3, #21
 800250a:	055b      	lsls	r3, r3, #21
 800250c:	0d5a      	lsrs	r2, r3, #21
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e00a      	b.n	800252a <HAL_CAN_GetRxMessage+0xd2>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	321b      	adds	r2, #27
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	58d3      	ldr	r3, [r2, r3]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	321b      	adds	r2, #27
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	58d3      	ldr	r3, [r2, r3]
 8002536:	2202      	movs	r2, #2
 8002538:	401a      	ands	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	331b      	adds	r3, #27
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	18d3      	adds	r3, r2, r3
 800254a:	3304      	adds	r3, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2208      	movs	r2, #8
 8002550:	4013      	ands	r3, r2
 8002552:	d003      	beq.n	800255c <HAL_CAN_GetRxMessage+0x104>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2208      	movs	r2, #8
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	e00b      	b.n	8002574 <HAL_CAN_GetRxMessage+0x11c>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	331b      	adds	r3, #27
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	18d3      	adds	r3, r2, r3
 8002568:	3304      	adds	r3, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	220f      	movs	r2, #15
 800256e:	401a      	ands	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	331b      	adds	r3, #27
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	18d3      	adds	r3, r2, r3
 8002580:	3304      	adds	r3, #4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	22ff      	movs	r2, #255	@ 0xff
 8002588:	401a      	ands	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	331b      	adds	r3, #27
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	18d3      	adds	r3, r2, r3
 800259a:	3304      	adds	r3, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	0c1a      	lsrs	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	23dc      	movs	r3, #220	@ 0xdc
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	188a      	adds	r2, r1, r2
 80025b6:	18d3      	adds	r3, r2, r3
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	23dc      	movs	r3, #220	@ 0xdc
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	188a      	adds	r2, r1, r2
 80025ce:	18d3      	adds	r3, r2, r3
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	0a1a      	lsrs	r2, r3, #8
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	23dc      	movs	r3, #220	@ 0xdc
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	188a      	adds	r2, r1, r2
 80025ea:	18d3      	adds	r3, r2, r3
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0c1a      	lsrs	r2, r3, #16
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	3302      	adds	r3, #2
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	23dc      	movs	r3, #220	@ 0xdc
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	188a      	adds	r2, r1, r2
 8002606:	18d3      	adds	r3, r2, r3
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0e1a      	lsrs	r2, r3, #24
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3303      	adds	r3, #3
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6819      	ldr	r1, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	23de      	movs	r3, #222	@ 0xde
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	188a      	adds	r2, r1, r2
 8002622:	18d3      	adds	r3, r2, r3
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	3304      	adds	r3, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	23de      	movs	r3, #222	@ 0xde
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	188a      	adds	r2, r1, r2
 800263c:	18d3      	adds	r3, r2, r3
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0a1a      	lsrs	r2, r3, #8
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	3305      	adds	r3, #5
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	23de      	movs	r3, #222	@ 0xde
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	188a      	adds	r2, r1, r2
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0c1a      	lsrs	r2, r3, #16
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	3306      	adds	r3, #6
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	23de      	movs	r3, #222	@ 0xde
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	188a      	adds	r2, r1, r2
 8002674:	18d3      	adds	r3, r2, r3
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e1a      	lsrs	r2, r3, #24
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3307      	adds	r3, #7
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d108      	bne.n	800269a <HAL_CAN_GetRxMessage+0x242>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2120      	movs	r1, #32
 8002694:	430a      	orrs	r2, r1
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	e007      	b.n	80026aa <HAL_CAN_GetRxMessage+0x252>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2120      	movs	r1, #32
 80026a6:	430a      	orrs	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e007      	b.n	80026be <HAL_CAN_GetRxMessage+0x266>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	2280      	movs	r2, #128	@ 0x80
 80026b4:	02d2      	lsls	r2, r2, #11
 80026b6:	431a      	orrs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
  }
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b006      	add	sp, #24
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	000005c9 	.word	0x000005c9
 80026cc:	0800c378 	.word	0x0800c378

080026d0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026da:	230f      	movs	r3, #15
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	2120      	movs	r1, #32
 80026e2:	5c52      	ldrb	r2, [r2, r1]
 80026e4:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	4a13      	ldr	r2, [pc, #76]	@ (8002738 <HAL_CAN_ActivateNotification+0x68>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d905      	bls.n	80026fa <HAL_CAN_ActivateNotification+0x2a>
 80026ee:	4a13      	ldr	r2, [pc, #76]	@ (800273c <HAL_CAN_ActivateNotification+0x6c>)
 80026f0:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <HAL_CAN_ActivateNotification+0x70>)
 80026f2:	0011      	movs	r1, r2
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7fe fa35 	bl	8000b64 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80026fa:	220f      	movs	r2, #15
 80026fc:	18bb      	adds	r3, r7, r2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d003      	beq.n	800270c <HAL_CAN_ActivateNotification+0x3c>
 8002704:	18bb      	adds	r3, r7, r2
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d109      	bne.n	8002720 <HAL_CAN_ActivateNotification+0x50>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6959      	ldr	r1, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	e007      	b.n	8002730 <HAL_CAN_ActivateNotification+0x60>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	2280      	movs	r2, #128	@ 0x80
 8002726:	02d2      	lsls	r2, r2, #11
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
  }
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b004      	add	sp, #16
 8002736:	bd80      	pop	{r7, pc}
 8002738:	00038f7f 	.word	0x00038f7f
 800273c:	00000662 	.word	0x00000662
 8002740:	0800c378 	.word	0x0800c378

08002744 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	@ 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	2201      	movs	r2, #1
 8002784:	4013      	ands	r3, r2
 8002786:	d100      	bne.n	800278a <HAL_CAN_IRQHandler+0x46>
 8002788:	e084      	b.n	8002894 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	d024      	beq.n	80027dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 f981 	bl	8002aac <HAL_CAN_TxMailbox0CompleteCallback>
 80027aa:	e017      	b.n	80027dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2204      	movs	r2, #4
 80027b0:	4013      	ands	r3, r2
 80027b2:	d005      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	2280      	movs	r2, #128	@ 0x80
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	4313      	orrs	r3, r2
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027be:	e00d      	b.n	80027dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2208      	movs	r2, #8
 80027c4:	4013      	ands	r3, r2
 80027c6:	d005      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	2280      	movs	r2, #128	@ 0x80
 80027cc:	0152      	lsls	r2, r2, #5
 80027ce:	4313      	orrs	r3, r2
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d2:	e003      	b.n	80027dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 f980 	bl	8002adc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	2380      	movs	r3, #128	@ 0x80
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d028      	beq.n	8002838 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2280      	movs	r2, #128	@ 0x80
 80027ec:	0052      	lsls	r2, r2, #1
 80027ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	2380      	movs	r3, #128	@ 0x80
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d004      	beq.n	8002804 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 f95d 	bl	8002abc <HAL_CAN_TxMailbox1CompleteCallback>
 8002802:	e019      	b.n	8002838 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4013      	ands	r3, r2
 800280c:	d005      	beq.n	800281a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	0192      	lsls	r2, r2, #6
 8002814:	4313      	orrs	r3, r2
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
 8002818:	e00e      	b.n	8002838 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	2380      	movs	r3, #128	@ 0x80
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	4013      	ands	r3, r2
 8002822:	d005      	beq.n	8002830 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	2280      	movs	r2, #128	@ 0x80
 8002828:	01d2      	lsls	r2, r2, #7
 800282a:	4313      	orrs	r3, r2
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
 800282e:	e003      	b.n	8002838 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f000 f95a 	bl	8002aec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	025b      	lsls	r3, r3, #9
 800283e:	4013      	ands	r3, r2
 8002840:	d028      	beq.n	8002894 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2280      	movs	r2, #128	@ 0x80
 8002848:	0252      	lsls	r2, r2, #9
 800284a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	029b      	lsls	r3, r3, #10
 8002852:	4013      	ands	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0018      	movs	r0, r3
 800285a:	f000 f937 	bl	8002acc <HAL_CAN_TxMailbox2CompleteCallback>
 800285e:	e019      	b.n	8002894 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	2380      	movs	r3, #128	@ 0x80
 8002864:	02db      	lsls	r3, r3, #11
 8002866:	4013      	ands	r3, r2
 8002868:	d005      	beq.n	8002876 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	2280      	movs	r2, #128	@ 0x80
 800286e:	0212      	lsls	r2, r2, #8
 8002870:	4313      	orrs	r3, r2
 8002872:	627b      	str	r3, [r7, #36]	@ 0x24
 8002874:	e00e      	b.n	8002894 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	2380      	movs	r3, #128	@ 0x80
 800287a:	031b      	lsls	r3, r3, #12
 800287c:	4013      	ands	r3, r2
 800287e:	d005      	beq.n	800288c <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	2280      	movs	r2, #128	@ 0x80
 8002884:	0252      	lsls	r2, r2, #9
 8002886:	4313      	orrs	r3, r2
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
 800288a:	e003      	b.n	8002894 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	0018      	movs	r0, r3
 8002890:	f000 f934 	bl	8002afc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	2208      	movs	r2, #8
 8002898:	4013      	ands	r3, r2
 800289a:	d00c      	beq.n	80028b6 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2210      	movs	r2, #16
 80028a0:	4013      	ands	r3, r2
 80028a2:	d008      	beq.n	80028b6 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	2280      	movs	r2, #128	@ 0x80
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	4313      	orrs	r3, r2
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2210      	movs	r2, #16
 80028b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	2204      	movs	r2, #4
 80028ba:	4013      	ands	r3, r2
 80028bc:	d00b      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2208      	movs	r2, #8
 80028c2:	4013      	ands	r3, r2
 80028c4:	d007      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2208      	movs	r2, #8
 80028cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 f91b 	bl	8002b0c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	2202      	movs	r2, #2
 80028da:	4013      	ands	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2203      	movs	r2, #3
 80028e6:	4013      	ands	r3, r2
 80028e8:	d003      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7fd fe05 	bl	80004fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	2240      	movs	r2, #64	@ 0x40
 80028f6:	4013      	ands	r3, r2
 80028f8:	d00c      	beq.n	8002914 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2210      	movs	r2, #16
 80028fe:	4013      	ands	r3, r2
 8002900:	d008      	beq.n	8002914 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	00d2      	lsls	r2, r2, #3
 8002908:	4313      	orrs	r3, r2
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2210      	movs	r2, #16
 8002912:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	2220      	movs	r2, #32
 8002918:	4013      	ands	r3, r2
 800291a:	d00b      	beq.n	8002934 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2208      	movs	r2, #8
 8002920:	4013      	ands	r3, r2
 8002922:	d007      	beq.n	8002934 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2208      	movs	r2, #8
 800292a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0018      	movs	r0, r3
 8002930:	f000 f8fc 	bl	8002b2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	2210      	movs	r2, #16
 8002938:	4013      	ands	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2203      	movs	r2, #3
 8002944:	4013      	ands	r3, r2
 8002946:	d003      	beq.n	8002950 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	0018      	movs	r0, r3
 800294c:	f000 f8e6 	bl	8002b1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	029b      	lsls	r3, r3, #10
 8002956:	4013      	ands	r3, r2
 8002958:	d00b      	beq.n	8002972 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2210      	movs	r2, #16
 800295e:	4013      	ands	r3, r2
 8002960:	d007      	beq.n	8002972 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2210      	movs	r2, #16
 8002968:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	0018      	movs	r0, r3
 800296e:	f000 f8e5 	bl	8002b3c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002972:	6a3a      	ldr	r2, [r7, #32]
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	025b      	lsls	r3, r3, #9
 8002978:	4013      	ands	r3, r2
 800297a:	d00b      	beq.n	8002994 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2208      	movs	r2, #8
 8002980:	4013      	ands	r3, r2
 8002982:	d007      	beq.n	8002994 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2208      	movs	r2, #8
 800298a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f000 f8dc 	bl	8002b4c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	4013      	ands	r3, r2
 800299c:	d100      	bne.n	80029a0 <HAL_CAN_IRQHandler+0x25c>
 800299e:	e074      	b.n	8002a8a <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2204      	movs	r2, #4
 80029a4:	4013      	ands	r3, r2
 80029a6:	d100      	bne.n	80029aa <HAL_CAN_IRQHandler+0x266>
 80029a8:	e06b      	b.n	8002a82 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029aa:	6a3a      	ldr	r2, [r7, #32]
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4013      	ands	r3, r2
 80029b2:	d007      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029ba:	d003      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	2201      	movs	r2, #1
 80029c0:	4313      	orrs	r3, r2
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4013      	ands	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2202      	movs	r2, #2
 80029d2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029d4:	d003      	beq.n	80029de <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	2202      	movs	r2, #2
 80029da:	4313      	orrs	r3, r2
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029de:	6a3a      	ldr	r2, [r7, #32]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4013      	ands	r3, r2
 80029e6:	d007      	beq.n	80029f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2204      	movs	r2, #4
 80029ec:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029ee:	d003      	beq.n	80029f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	2204      	movs	r2, #4
 80029f4:	4313      	orrs	r3, r2
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029f8:	6a3a      	ldr	r2, [r7, #32]
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4013      	ands	r3, r2
 8002a00:	d03f      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2270      	movs	r2, #112	@ 0x70
 8002a06:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a08:	d03b      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2270      	movs	r2, #112	@ 0x70
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b60      	cmp	r3, #96	@ 0x60
 8002a12:	d027      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x320>
 8002a14:	d82c      	bhi.n	8002a70 <HAL_CAN_IRQHandler+0x32c>
 8002a16:	2b50      	cmp	r3, #80	@ 0x50
 8002a18:	d01f      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x316>
 8002a1a:	d829      	bhi.n	8002a70 <HAL_CAN_IRQHandler+0x32c>
 8002a1c:	2b40      	cmp	r3, #64	@ 0x40
 8002a1e:	d017      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x30c>
 8002a20:	d826      	bhi.n	8002a70 <HAL_CAN_IRQHandler+0x32c>
 8002a22:	2b30      	cmp	r3, #48	@ 0x30
 8002a24:	d00f      	beq.n	8002a46 <HAL_CAN_IRQHandler+0x302>
 8002a26:	d823      	bhi.n	8002a70 <HAL_CAN_IRQHandler+0x32c>
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d002      	beq.n	8002a32 <HAL_CAN_IRQHandler+0x2ee>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d005      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a30:	e01e      	b.n	8002a70 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	2208      	movs	r2, #8
 8002a36:	4313      	orrs	r3, r2
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a3a:	e01a      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	2210      	movs	r2, #16
 8002a40:	4313      	orrs	r3, r2
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a44:	e015      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	2220      	movs	r2, #32
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a4e:	e010      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	2240      	movs	r2, #64	@ 0x40
 8002a54:	4313      	orrs	r3, r2
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a58:	e00b      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	2280      	movs	r2, #128	@ 0x80
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a62:	e006      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	2280      	movs	r2, #128	@ 0x80
 8002a68:	0052      	lsls	r2, r2, #1
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a6e:	e000      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32e>
            break;
 8002a70:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2170      	movs	r1, #112	@ 0x70
 8002a7e:	438a      	bics	r2, r1
 8002a80:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2204      	movs	r2, #4
 8002a88:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f85c 	bl	8002b5c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b00a      	add	sp, #40	@ 0x28
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002af4:	46c0      	nop			@ (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b04:	46c0      	nop			@ (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b24:	46c0      	nop			@ (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b34:	46c0      	nop			@ (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b44:	46c0      	nop			@ (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b54:	46c0      	nop			@ (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b64:	46c0      	nop			@ (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	0002      	movs	r2, r0
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	1dfb      	adds	r3, r7, #7
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b7e:	d809      	bhi.n	8002b94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	001a      	movs	r2, r3
 8002b86:	231f      	movs	r3, #31
 8002b88:	401a      	ands	r2, r3
 8002b8a:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <__NVIC_EnableIRQ+0x30>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4091      	lsls	r1, r2
 8002b90:	000a      	movs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]
  }
}
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	1dfb      	adds	r3, r7, #7
 8002bac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	1dfb      	adds	r3, r7, #7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bb4:	d828      	bhi.n	8002c08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c74 <__NVIC_SetPriority+0xd4>)
 8002bb8:	1dfb      	adds	r3, r7, #7
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	33c0      	adds	r3, #192	@ 0xc0
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	589b      	ldr	r3, [r3, r2]
 8002bc6:	1dfa      	adds	r2, r7, #7
 8002bc8:	7812      	ldrb	r2, [r2, #0]
 8002bca:	0011      	movs	r1, r2
 8002bcc:	2203      	movs	r2, #3
 8002bce:	400a      	ands	r2, r1
 8002bd0:	00d2      	lsls	r2, r2, #3
 8002bd2:	21ff      	movs	r1, #255	@ 0xff
 8002bd4:	4091      	lsls	r1, r2
 8002bd6:	000a      	movs	r2, r1
 8002bd8:	43d2      	mvns	r2, r2
 8002bda:	401a      	ands	r2, r3
 8002bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	019b      	lsls	r3, r3, #6
 8002be2:	22ff      	movs	r2, #255	@ 0xff
 8002be4:	401a      	ands	r2, r3
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	0018      	movs	r0, r3
 8002bec:	2303      	movs	r3, #3
 8002bee:	4003      	ands	r3, r0
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bf4:	481f      	ldr	r0, [pc, #124]	@ (8002c74 <__NVIC_SetPriority+0xd4>)
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b25b      	sxtb	r3, r3
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	33c0      	adds	r3, #192	@ 0xc0
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c06:	e031      	b.n	8002c6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c08:	4a1b      	ldr	r2, [pc, #108]	@ (8002c78 <__NVIC_SetPriority+0xd8>)
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	0019      	movs	r1, r3
 8002c10:	230f      	movs	r3, #15
 8002c12:	400b      	ands	r3, r1
 8002c14:	3b08      	subs	r3, #8
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3306      	adds	r3, #6
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	18d3      	adds	r3, r2, r3
 8002c1e:	3304      	adds	r3, #4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	1dfa      	adds	r2, r7, #7
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	0011      	movs	r1, r2
 8002c28:	2203      	movs	r2, #3
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	00d2      	lsls	r2, r2, #3
 8002c2e:	21ff      	movs	r1, #255	@ 0xff
 8002c30:	4091      	lsls	r1, r2
 8002c32:	000a      	movs	r2, r1
 8002c34:	43d2      	mvns	r2, r2
 8002c36:	401a      	ands	r2, r3
 8002c38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	019b      	lsls	r3, r3, #6
 8002c3e:	22ff      	movs	r2, #255	@ 0xff
 8002c40:	401a      	ands	r2, r3
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	0018      	movs	r0, r3
 8002c48:	2303      	movs	r3, #3
 8002c4a:	4003      	ands	r3, r0
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c50:	4809      	ldr	r0, [pc, #36]	@ (8002c78 <__NVIC_SetPriority+0xd8>)
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	001c      	movs	r4, r3
 8002c58:	230f      	movs	r3, #15
 8002c5a:	4023      	ands	r3, r4
 8002c5c:	3b08      	subs	r3, #8
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	430a      	orrs	r2, r1
 8002c62:	3306      	adds	r3, #6
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	18c3      	adds	r3, r0, r3
 8002c68:	3304      	adds	r3, #4
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b003      	add	sp, #12
 8002c72:	bd90      	pop	{r4, r7, pc}
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	1e5a      	subs	r2, r3, #1
 8002c88:	2380      	movs	r3, #128	@ 0x80
 8002c8a:	045b      	lsls	r3, r3, #17
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d301      	bcc.n	8002c94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c90:	2301      	movs	r3, #1
 8002c92:	e010      	b.n	8002cb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c94:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc0 <SysTick_Config+0x44>)
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	425b      	negs	r3, r3
 8002ca0:	2103      	movs	r1, #3
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff ff7c 	bl	8002ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca8:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <SysTick_Config+0x44>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cae:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <SysTick_Config+0x44>)
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b002      	add	sp, #8
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	e000e010 	.word	0xe000e010

08002cc4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	230f      	movs	r3, #15
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	1c02      	adds	r2, r0, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d904      	bls.n	8002ce6 <HAL_NVIC_SetPriority+0x22>
 8002cdc:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <HAL_NVIC_SetPriority+0x3c>)
 8002cde:	218a      	movs	r1, #138	@ 0x8a
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fd ff3f 	bl	8000b64 <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	230f      	movs	r3, #15
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	0011      	movs	r1, r2
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7ff ff54 	bl	8002ba0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002cf8:	46c0      	nop			@ (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b004      	add	sp, #16
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	0800c3b0 	.word	0x0800c3b0

08002d04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	1dfb      	adds	r3, r7, #7
 8002d0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002d10:	1dfb      	adds	r3, r7, #7
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d16:	d904      	bls.n	8002d22 <HAL_NVIC_EnableIRQ+0x1e>
 8002d18:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <HAL_NVIC_EnableIRQ+0x34>)
 8002d1a:	219d      	movs	r1, #157	@ 0x9d
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7fd ff21 	bl	8000b64 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d22:	1dfb      	adds	r3, r7, #7
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b25b      	sxtb	r3, r3
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7ff ff1f 	bl	8002b6c <__NVIC_EnableIRQ>
}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b002      	add	sp, #8
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	0800c3b0 	.word	0x0800c3b0

08002d3c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff ff98 	bl	8002c7c <SysTick_Config>
 8002d4c:	0003      	movs	r3, r0
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b002      	add	sp, #8
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0dd      	b.n	8002f2a <HAL_DMA_Init+0x1d2>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a70      	ldr	r2, [pc, #448]	@ (8002f34 <HAL_DMA_Init+0x1dc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_Init+0x66>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f38 <HAL_DMA_Init+0x1e0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_Init+0x66>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6d      	ldr	r2, [pc, #436]	@ (8002f3c <HAL_DMA_Init+0x1e4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_Init+0x66>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a6b      	ldr	r2, [pc, #428]	@ (8002f40 <HAL_DMA_Init+0x1e8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_DMA_Init+0x66>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a6a      	ldr	r2, [pc, #424]	@ (8002f44 <HAL_DMA_Init+0x1ec>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_DMA_Init+0x66>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a68      	ldr	r2, [pc, #416]	@ (8002f48 <HAL_DMA_Init+0x1f0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_DMA_Init+0x66>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a67      	ldr	r2, [pc, #412]	@ (8002f4c <HAL_DMA_Init+0x1f4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_DMA_Init+0x66>
 8002db4:	4b66      	ldr	r3, [pc, #408]	@ (8002f50 <HAL_DMA_Init+0x1f8>)
 8002db6:	2194      	movs	r1, #148	@ 0x94
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7fd fed3 	bl	8000b64 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00e      	beq.n	8002de4 <HAL_DMA_Init+0x8c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d00a      	beq.n	8002de4 <HAL_DMA_Init+0x8c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	01db      	lsls	r3, r3, #7
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d004      	beq.n	8002de4 <HAL_DMA_Init+0x8c>
 8002dda:	4b5d      	ldr	r3, [pc, #372]	@ (8002f50 <HAL_DMA_Init+0x1f8>)
 8002ddc:	2195      	movs	r1, #149	@ 0x95
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7fd fec0 	bl	8000b64 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d008      	beq.n	8002dfe <HAL_DMA_Init+0xa6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <HAL_DMA_Init+0xa6>
 8002df4:	4b56      	ldr	r3, [pc, #344]	@ (8002f50 <HAL_DMA_Init+0x1f8>)
 8002df6:	2196      	movs	r1, #150	@ 0x96
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7fd feb3 	bl	8000b64 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b80      	cmp	r3, #128	@ 0x80
 8002e04:	d008      	beq.n	8002e18 <HAL_DMA_Init+0xc0>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d004      	beq.n	8002e18 <HAL_DMA_Init+0xc0>
 8002e0e:	4b50      	ldr	r3, [pc, #320]	@ (8002f50 <HAL_DMA_Init+0x1f8>)
 8002e10:	2197      	movs	r1, #151	@ 0x97
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7fd fea6 	bl	8000b64 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <HAL_DMA_Init+0xea>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d00a      	beq.n	8002e42 <HAL_DMA_Init+0xea>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d004      	beq.n	8002e42 <HAL_DMA_Init+0xea>
 8002e38:	4b45      	ldr	r3, [pc, #276]	@ (8002f50 <HAL_DMA_Init+0x1f8>)
 8002e3a:	2198      	movs	r1, #152	@ 0x98
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f7fd fe91 	bl	8000b64 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_DMA_Init+0x114>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	2380      	movs	r3, #128	@ 0x80
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d00a      	beq.n	8002e6c <HAL_DMA_Init+0x114>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	2380      	movs	r3, #128	@ 0x80
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d004      	beq.n	8002e6c <HAL_DMA_Init+0x114>
 8002e62:	4b3b      	ldr	r3, [pc, #236]	@ (8002f50 <HAL_DMA_Init+0x1f8>)
 8002e64:	2199      	movs	r1, #153	@ 0x99
 8002e66:	0018      	movs	r0, r3
 8002e68:	f7fd fe7c 	bl	8000b64 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_DMA_Init+0x12e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d004      	beq.n	8002e86 <HAL_DMA_Init+0x12e>
 8002e7c:	4b34      	ldr	r3, [pc, #208]	@ (8002f50 <HAL_DMA_Init+0x1f8>)
 8002e7e:	219a      	movs	r1, #154	@ 0x9a
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7fd fe6f 	bl	8000b64 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_DMA_Init+0x164>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	015b      	lsls	r3, r3, #5
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d010      	beq.n	8002ebc <HAL_DMA_Init+0x164>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d00a      	beq.n	8002ebc <HAL_DMA_Init+0x164>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	23c0      	movs	r3, #192	@ 0xc0
 8002eac:	019b      	lsls	r3, r3, #6
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_Init+0x164>
 8002eb2:	4b27      	ldr	r3, [pc, #156]	@ (8002f50 <HAL_DMA_Init+0x1f8>)
 8002eb4:	219b      	movs	r1, #155	@ 0x9b
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7fd fe54 	bl	8000b64 <assert_failed>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2221      	movs	r2, #33	@ 0x21
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a21      	ldr	r2, [pc, #132]	@ (8002f54 <HAL_DMA_Init+0x1fc>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 f8c5 	bl	800309c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2221      	movs	r2, #33	@ 0x21
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	2100      	movs	r1, #0
 8002f26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	40020008 	.word	0x40020008
 8002f38:	4002001c 	.word	0x4002001c
 8002f3c:	40020030 	.word	0x40020030
 8002f40:	40020044 	.word	0x40020044
 8002f44:	40020058 	.word	0x40020058
 8002f48:	4002006c 	.word	0x4002006c
 8002f4c:	40020080 	.word	0x40020080
 8002f50:	0800c3ec 	.word	0x0800c3ec
 8002f54:	ffffc00f 	.word	0xffffc00f

08002f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	2204      	movs	r2, #4
 8002f76:	409a      	lsls	r2, r3
 8002f78:	0013      	movs	r3, r2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d024      	beq.n	8002fca <HAL_DMA_IRQHandler+0x72>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2204      	movs	r2, #4
 8002f84:	4013      	ands	r3, r2
 8002f86:	d020      	beq.n	8002fca <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	4013      	ands	r3, r2
 8002f92:	d107      	bne.n	8002fa4 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2104      	movs	r1, #4
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fac:	2104      	movs	r1, #4
 8002fae:	4091      	lsls	r1, r2
 8002fb0:	000a      	movs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d100      	bne.n	8002fbe <HAL_DMA_IRQHandler+0x66>
 8002fbc:	e06a      	b.n	8003094 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	0010      	movs	r0, r2
 8002fc6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002fc8:	e064      	b.n	8003094 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	2202      	movs	r2, #2
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d02b      	beq.n	8003032 <HAL_DMA_IRQHandler+0xda>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d027      	beq.n	8003032 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	4013      	ands	r3, r2
 8002fec:	d10b      	bne.n	8003006 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	210a      	movs	r1, #10
 8002ffa:	438a      	bics	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2221      	movs	r2, #33	@ 0x21
 8003002:	2101      	movs	r1, #1
 8003004:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300e:	2102      	movs	r1, #2
 8003010:	4091      	lsls	r1, r2
 8003012:	000a      	movs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	d036      	beq.n	8003094 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	0010      	movs	r0, r2
 800302e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003030:	e030      	b.n	8003094 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	2208      	movs	r2, #8
 8003038:	409a      	lsls	r2, r3
 800303a:	0013      	movs	r3, r2
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	d028      	beq.n	8003094 <HAL_DMA_IRQHandler+0x13c>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2208      	movs	r2, #8
 8003046:	4013      	ands	r3, r2
 8003048:	d024      	beq.n	8003094 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	210e      	movs	r1, #14
 8003056:	438a      	bics	r2, r1
 8003058:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003062:	2101      	movs	r1, #1
 8003064:	4091      	lsls	r1, r2
 8003066:	000a      	movs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2221      	movs	r2, #33	@ 0x21
 8003074:	2101      	movs	r1, #1
 8003076:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	2100      	movs	r1, #0
 800307e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	0010      	movs	r0, r2
 8003090:	4798      	blx	r3
    }
  }
}
 8003092:	e7ff      	b.n	8003094 <HAL_DMA_IRQHandler+0x13c>
 8003094:	46c0      	nop			@ (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b004      	add	sp, #16
 800309a:	bd80      	pop	{r7, pc}

0800309c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a08      	ldr	r2, [pc, #32]	@ (80030cc <DMA_CalcBaseAndBitshift+0x30>)
 80030aa:	4694      	mov	ip, r2
 80030ac:	4463      	add	r3, ip
 80030ae:	2114      	movs	r1, #20
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7fd f83b 	bl	800012c <__udivsi3>
 80030b6:	0003      	movs	r3, r0
 80030b8:	009a      	lsls	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a03      	ldr	r2, [pc, #12]	@ (80030d0 <DMA_CalcBaseAndBitshift+0x34>)
 80030c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80030c4:	46c0      	nop			@ (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	bffdfff8 	.word	0xbffdfff8
 80030d0:	40020000 	.word	0x40020000

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	2390      	movs	r3, #144	@ 0x90
 80030e6:	05db      	lsls	r3, r3, #23
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d018      	beq.n	800311e <HAL_GPIO_Init+0x4a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4ad5      	ldr	r2, [pc, #852]	@ (8003444 <HAL_GPIO_Init+0x370>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d014      	beq.n	800311e <HAL_GPIO_Init+0x4a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4ad4      	ldr	r2, [pc, #848]	@ (8003448 <HAL_GPIO_Init+0x374>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d010      	beq.n	800311e <HAL_GPIO_Init+0x4a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4ad3      	ldr	r2, [pc, #844]	@ (800344c <HAL_GPIO_Init+0x378>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00c      	beq.n	800311e <HAL_GPIO_Init+0x4a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4ad2      	ldr	r2, [pc, #840]	@ (8003450 <HAL_GPIO_Init+0x37c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d008      	beq.n	800311e <HAL_GPIO_Init+0x4a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4ad1      	ldr	r2, [pc, #836]	@ (8003454 <HAL_GPIO_Init+0x380>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_GPIO_Init+0x4a>
 8003114:	4bd0      	ldr	r3, [pc, #832]	@ (8003458 <HAL_GPIO_Init+0x384>)
 8003116:	21b0      	movs	r1, #176	@ 0xb0
 8003118:	0018      	movs	r0, r3
 800311a:	f7fd fd23 	bl	8000b64 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	d005      	beq.n	8003134 <HAL_GPIO_Init+0x60>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	2380      	movs	r3, #128	@ 0x80
 800312e:	025b      	lsls	r3, r3, #9
 8003130:	429a      	cmp	r2, r3
 8003132:	d304      	bcc.n	800313e <HAL_GPIO_Init+0x6a>
 8003134:	4bc8      	ldr	r3, [pc, #800]	@ (8003458 <HAL_GPIO_Init+0x384>)
 8003136:	21b1      	movs	r1, #177	@ 0xb1
 8003138:	0018      	movs	r0, r3
 800313a:	f7fd fd13 	bl	8000b64 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d100      	bne.n	8003148 <HAL_GPIO_Init+0x74>
 8003146:	e1f4      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d100      	bne.n	8003152 <HAL_GPIO_Init+0x7e>
 8003150:	e1ef      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b11      	cmp	r3, #17
 8003158:	d100      	bne.n	800315c <HAL_GPIO_Init+0x88>
 800315a:	e1ea      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d100      	bne.n	8003166 <HAL_GPIO_Init+0x92>
 8003164:	e1e5      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b12      	cmp	r3, #18
 800316c:	d100      	bne.n	8003170 <HAL_GPIO_Init+0x9c>
 800316e:	e1e0      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	2388      	movs	r3, #136	@ 0x88
 8003176:	035b      	lsls	r3, r3, #13
 8003178:	429a      	cmp	r2, r3
 800317a:	d100      	bne.n	800317e <HAL_GPIO_Init+0xaa>
 800317c:	e1d9      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	2384      	movs	r3, #132	@ 0x84
 8003184:	039b      	lsls	r3, r3, #14
 8003186:	429a      	cmp	r2, r3
 8003188:	d100      	bne.n	800318c <HAL_GPIO_Init+0xb8>
 800318a:	e1d2      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	23c4      	movs	r3, #196	@ 0xc4
 8003192:	039b      	lsls	r3, r3, #14
 8003194:	429a      	cmp	r2, r3
 8003196:	d100      	bne.n	800319a <HAL_GPIO_Init+0xc6>
 8003198:	e1cb      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	2390      	movs	r3, #144	@ 0x90
 80031a0:	035b      	lsls	r3, r3, #13
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d100      	bne.n	80031a8 <HAL_GPIO_Init+0xd4>
 80031a6:	e1c4      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	2388      	movs	r3, #136	@ 0x88
 80031ae:	039b      	lsls	r3, r3, #14
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d100      	bne.n	80031b6 <HAL_GPIO_Init+0xe2>
 80031b4:	e1bd      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	23c8      	movs	r3, #200	@ 0xc8
 80031bc:	039b      	lsls	r3, r3, #14
 80031be:	429a      	cmp	r2, r3
 80031c0:	d100      	bne.n	80031c4 <HAL_GPIO_Init+0xf0>
 80031c2:	e1b6      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d100      	bne.n	80031ce <HAL_GPIO_Init+0xfa>
 80031cc:	e1b1      	b.n	8003532 <HAL_GPIO_Init+0x45e>
 80031ce:	4ba2      	ldr	r3, [pc, #648]	@ (8003458 <HAL_GPIO_Init+0x384>)
 80031d0:	21b2      	movs	r1, #178	@ 0xb2
 80031d2:	0018      	movs	r0, r3
 80031d4:	f7fd fcc6 	bl	8000b64 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d8:	e1ab      	b.n	8003532 <HAL_GPIO_Init+0x45e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4091      	lsls	r1, r2
 80031e4:	000a      	movs	r2, r1
 80031e6:	4013      	ands	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d100      	bne.n	80031f2 <HAL_GPIO_Init+0x11e>
 80031f0:	e19c      	b.n	800352c <HAL_GPIO_Init+0x458>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2203      	movs	r2, #3
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d005      	beq.n	800320a <HAL_GPIO_Init+0x136>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2203      	movs	r2, #3
 8003204:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003206:	2b02      	cmp	r3, #2
 8003208:	d141      	bne.n	800328e <HAL_GPIO_Init+0x1ba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00c      	beq.n	800322c <HAL_GPIO_Init+0x158>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d008      	beq.n	800322c <HAL_GPIO_Init+0x158>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d004      	beq.n	800322c <HAL_GPIO_Init+0x158>
 8003222:	4b8d      	ldr	r3, [pc, #564]	@ (8003458 <HAL_GPIO_Init+0x384>)
 8003224:	21c2      	movs	r1, #194	@ 0xc2
 8003226:	0018      	movs	r0, r3
 8003228:	f7fd fc9c 	bl	8000b64 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	409a      	lsls	r2, r3
 800323a:	0013      	movs	r3, r2
 800323c:	43da      	mvns	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	409a      	lsls	r2, r3
 800324e:	0013      	movs	r3, r2
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003262:	2201      	movs	r2, #1
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	409a      	lsls	r2, r3
 8003268:	0013      	movs	r3, r2
 800326a:	43da      	mvns	r2, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	2201      	movs	r2, #1
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
 8003280:	0013      	movs	r3, r2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2203      	movs	r2, #3
 8003294:	4013      	ands	r3, r2
 8003296:	2b03      	cmp	r3, #3
 8003298:	d028      	beq.n	80032ec <HAL_GPIO_Init+0x218>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00c      	beq.n	80032bc <HAL_GPIO_Init+0x1e8>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d008      	beq.n	80032bc <HAL_GPIO_Init+0x1e8>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d004      	beq.n	80032bc <HAL_GPIO_Init+0x1e8>
 80032b2:	4b69      	ldr	r3, [pc, #420]	@ (8003458 <HAL_GPIO_Init+0x384>)
 80032b4:	21d3      	movs	r1, #211	@ 0xd3
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7fd fc54 	bl	8000b64 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	409a      	lsls	r2, r3
 80032ca:	0013      	movs	r3, r2
 80032cc:	43da      	mvns	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	409a      	lsls	r2, r3
 80032de:	0013      	movs	r3, r2
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2203      	movs	r2, #3
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d146      	bne.n	8003386 <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	2390      	movs	r3, #144	@ 0x90
 80032fc:	05db      	lsls	r3, r3, #23
 80032fe:	429a      	cmp	r2, r3
 8003300:	d014      	beq.n	800332c <HAL_GPIO_Init+0x258>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4f      	ldr	r2, [pc, #316]	@ (8003444 <HAL_GPIO_Init+0x370>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d010      	beq.n	800332c <HAL_GPIO_Init+0x258>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4e      	ldr	r2, [pc, #312]	@ (8003448 <HAL_GPIO_Init+0x374>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00c      	beq.n	800332c <HAL_GPIO_Init+0x258>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4d      	ldr	r2, [pc, #308]	@ (800344c <HAL_GPIO_Init+0x378>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d008      	beq.n	800332c <HAL_GPIO_Init+0x258>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4c      	ldr	r2, [pc, #304]	@ (8003450 <HAL_GPIO_Init+0x37c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_GPIO_Init+0x258>
 8003322:	4b4d      	ldr	r3, [pc, #308]	@ (8003458 <HAL_GPIO_Init+0x384>)
 8003324:	21e0      	movs	r1, #224	@ 0xe0
 8003326:	0018      	movs	r0, r3
 8003328:	f7fd fc1c 	bl	8000b64 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b07      	cmp	r3, #7
 8003332:	d904      	bls.n	800333e <HAL_GPIO_Init+0x26a>
 8003334:	4b48      	ldr	r3, [pc, #288]	@ (8003458 <HAL_GPIO_Init+0x384>)
 8003336:	21e1      	movs	r1, #225	@ 0xe1
 8003338:	0018      	movs	r0, r3
 800333a:	f7fd fc13 	bl	8000b64 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	08da      	lsrs	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3208      	adds	r2, #8
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	58d3      	ldr	r3, [r2, r3]
 800334a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2207      	movs	r2, #7
 8003350:	4013      	ands	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	409a      	lsls	r2, r3
 8003358:	0013      	movs	r3, r2
 800335a:	43da      	mvns	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2107      	movs	r1, #7
 800336a:	400b      	ands	r3, r1
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	409a      	lsls	r2, r3
 8003370:	0013      	movs	r3, r2
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	08da      	lsrs	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3208      	adds	r2, #8
 8003380:	0092      	lsls	r2, r2, #2
 8003382:	6939      	ldr	r1, [r7, #16]
 8003384:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	409a      	lsls	r2, r3
 8003394:	0013      	movs	r3, r2
 8003396:	43da      	mvns	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2203      	movs	r2, #3
 80033a4:	401a      	ands	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	409a      	lsls	r2, r3
 80033ac:	0013      	movs	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	23c0      	movs	r3, #192	@ 0xc0
 80033c0:	029b      	lsls	r3, r3, #10
 80033c2:	4013      	ands	r3, r2
 80033c4:	d100      	bne.n	80033c8 <HAL_GPIO_Init+0x2f4>
 80033c6:	e0b1      	b.n	800352c <HAL_GPIO_Init+0x458>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c8:	4b24      	ldr	r3, [pc, #144]	@ (800345c <HAL_GPIO_Init+0x388>)
 80033ca:	699a      	ldr	r2, [r3, #24]
 80033cc:	4b23      	ldr	r3, [pc, #140]	@ (800345c <HAL_GPIO_Init+0x388>)
 80033ce:	2101      	movs	r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	619a      	str	r2, [r3, #24]
 80033d4:	4b21      	ldr	r3, [pc, #132]	@ (800345c <HAL_GPIO_Init+0x388>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2201      	movs	r2, #1
 80033da:	4013      	ands	r3, r2
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <HAL_GPIO_Init+0x38c>)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	589b      	ldr	r3, [r3, r2]
 80033ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2203      	movs	r2, #3
 80033f2:	4013      	ands	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	220f      	movs	r2, #15
 80033f8:	409a      	lsls	r2, r3
 80033fa:	0013      	movs	r3, r2
 80033fc:	43da      	mvns	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	2390      	movs	r3, #144	@ 0x90
 8003408:	05db      	lsls	r3, r3, #23
 800340a:	429a      	cmp	r2, r3
 800340c:	d02a      	beq.n	8003464 <HAL_GPIO_Init+0x390>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a0c      	ldr	r2, [pc, #48]	@ (8003444 <HAL_GPIO_Init+0x370>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0x36a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a0b      	ldr	r2, [pc, #44]	@ (8003448 <HAL_GPIO_Init+0x374>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00d      	beq.n	800343a <HAL_GPIO_Init+0x366>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <HAL_GPIO_Init+0x378>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x362>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a09      	ldr	r2, [pc, #36]	@ (8003450 <HAL_GPIO_Init+0x37c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_GPIO_Init+0x35e>
 800342e:	2304      	movs	r3, #4
 8003430:	e019      	b.n	8003466 <HAL_GPIO_Init+0x392>
 8003432:	2305      	movs	r3, #5
 8003434:	e017      	b.n	8003466 <HAL_GPIO_Init+0x392>
 8003436:	2303      	movs	r3, #3
 8003438:	e015      	b.n	8003466 <HAL_GPIO_Init+0x392>
 800343a:	2302      	movs	r3, #2
 800343c:	e013      	b.n	8003466 <HAL_GPIO_Init+0x392>
 800343e:	2301      	movs	r3, #1
 8003440:	e011      	b.n	8003466 <HAL_GPIO_Init+0x392>
 8003442:	46c0      	nop			@ (mov r8, r8)
 8003444:	48000400 	.word	0x48000400
 8003448:	48000800 	.word	0x48000800
 800344c:	48000c00 	.word	0x48000c00
 8003450:	48001000 	.word	0x48001000
 8003454:	48001400 	.word	0x48001400
 8003458:	0800c424 	.word	0x0800c424
 800345c:	40021000 	.word	0x40021000
 8003460:	40010000 	.word	0x40010000
 8003464:	2300      	movs	r3, #0
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	2103      	movs	r1, #3
 800346a:	400a      	ands	r2, r1
 800346c:	0092      	lsls	r2, r2, #2
 800346e:	4093      	lsls	r3, r2
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003476:	4935      	ldr	r1, [pc, #212]	@ (800354c <HAL_GPIO_Init+0x478>)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003484:	4b32      	ldr	r3, [pc, #200]	@ (8003550 <HAL_GPIO_Init+0x47c>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	43da      	mvns	r2, r3
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4013      	ands	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	2380      	movs	r3, #128	@ 0x80
 800349a:	035b      	lsls	r3, r3, #13
 800349c:	4013      	ands	r3, r2
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x3d4>
        {
          temp |= iocurrent;
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034a8:	4b29      	ldr	r3, [pc, #164]	@ (8003550 <HAL_GPIO_Init+0x47c>)
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80034ae:	4b28      	ldr	r3, [pc, #160]	@ (8003550 <HAL_GPIO_Init+0x47c>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	43da      	mvns	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	2380      	movs	r3, #128	@ 0x80
 80034c4:	039b      	lsls	r3, r3, #14
 80034c6:	4013      	ands	r3, r2
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x3fe>
        {
          temp |= iocurrent;
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003550 <HAL_GPIO_Init+0x47c>)
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80034d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003550 <HAL_GPIO_Init+0x47c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43da      	mvns	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	2380      	movs	r3, #128	@ 0x80
 80034ee:	029b      	lsls	r3, r3, #10
 80034f0:	4013      	ands	r3, r2
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x428>
        {
          temp |= iocurrent;
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034fc:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <HAL_GPIO_Init+0x47c>)
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003502:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <HAL_GPIO_Init+0x47c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	43da      	mvns	r2, r3
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	025b      	lsls	r3, r3, #9
 800351a:	4013      	ands	r3, r2
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x452>
        {
          temp |= iocurrent;
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003526:	4b0a      	ldr	r3, [pc, #40]	@ (8003550 <HAL_GPIO_Init+0x47c>)
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3301      	adds	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	40da      	lsrs	r2, r3
 800353a:	1e13      	subs	r3, r2, #0
 800353c:	d000      	beq.n	8003540 <HAL_GPIO_Init+0x46c>
 800353e:	e64c      	b.n	80031da <HAL_GPIO_Init+0x106>
  } 
}
 8003540:	46c0      	nop			@ (mov r8, r8)
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b006      	add	sp, #24
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	40010000 	.word	0x40010000
 8003550:	40010400 	.word	0x40010400

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	0008      	movs	r0, r1
 800355e:	0011      	movs	r1, r2
 8003560:	1cbb      	adds	r3, r7, #2
 8003562:	1c02      	adds	r2, r0, #0
 8003564:	801a      	strh	r2, [r3, #0]
 8003566:	1c7b      	adds	r3, r7, #1
 8003568:	1c0a      	adds	r2, r1, #0
 800356a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800356c:	1cbb      	adds	r3, r7, #2
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <HAL_GPIO_WritePin+0x2e>
 8003574:	23d1      	movs	r3, #209	@ 0xd1
 8003576:	005a      	lsls	r2, r3, #1
 8003578:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_GPIO_WritePin+0x70>)
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f7fd faf1 	bl	8000b64 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003582:	1c7b      	adds	r3, r7, #1
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_GPIO_WritePin+0x4e>
 800358a:	1c7b      	adds	r3, r7, #1
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d007      	beq.n	80035a2 <HAL_GPIO_WritePin+0x4e>
 8003592:	23a4      	movs	r3, #164	@ 0xa4
 8003594:	33ff      	adds	r3, #255	@ 0xff
 8003596:	001a      	movs	r2, r3
 8003598:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <HAL_GPIO_WritePin+0x70>)
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f7fd fae1 	bl	8000b64 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80035a2:	1c7b      	adds	r3, r7, #1
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <HAL_GPIO_WritePin+0x60>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035aa:	1cbb      	adds	r3, r7, #2
 80035ac:	881a      	ldrh	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035b2:	e003      	b.n	80035bc <HAL_GPIO_WritePin+0x68>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035b4:	1cbb      	adds	r3, r7, #2
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035bc:	46c0      	nop			@ (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	0800c424 	.word	0x0800c424

080035c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0ee      	b.n	80037b8 <HAL_PCD_Init+0x1f0>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a78      	ldr	r2, [pc, #480]	@ (80037c0 <HAL_PCD_Init+0x1f8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_PCD_Init+0x26>
 80035e4:	4b77      	ldr	r3, [pc, #476]	@ (80037c4 <HAL_PCD_Init+0x1fc>)
 80035e6:	2187      	movs	r1, #135	@ 0x87
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7fd fabb 	bl	8000b64 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a75      	ldr	r2, [pc, #468]	@ (80037c8 <HAL_PCD_Init+0x200>)
 80035f2:	5c9b      	ldrb	r3, [r3, r2]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d108      	bne.n	800360c <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	23a4      	movs	r3, #164	@ 0xa4
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	2100      	movs	r1, #0
 8003602:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f007 fe3c 	bl	800b284 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a6e      	ldr	r2, [pc, #440]	@ (80037c8 <HAL_PCD_Init+0x200>)
 8003610:	2103      	movs	r1, #3
 8003612:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	0018      	movs	r0, r3
 800361a:	f003 fe65 	bl	80072e8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361e:	230f      	movs	r3, #15
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e047      	b.n	80036b8 <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003628:	200f      	movs	r0, #15
 800362a:	183b      	adds	r3, r7, r0
 800362c:	781a      	ldrb	r2, [r3, #0]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	0013      	movs	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	189b      	adds	r3, r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	18cb      	adds	r3, r1, r3
 800363a:	3311      	adds	r3, #17
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003640:	183b      	adds	r3, r7, r0
 8003642:	781a      	ldrb	r2, [r3, #0]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	0013      	movs	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	189b      	adds	r3, r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	18cb      	adds	r3, r1, r3
 8003650:	3310      	adds	r3, #16
 8003652:	183a      	adds	r2, r7, r0
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003658:	183b      	adds	r3, r7, r0
 800365a:	781a      	ldrb	r2, [r3, #0]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	0013      	movs	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	189b      	adds	r3, r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	18cb      	adds	r3, r1, r3
 8003668:	3313      	adds	r3, #19
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800366e:	183b      	adds	r3, r7, r0
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	0013      	movs	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	189b      	adds	r3, r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	18cb      	adds	r3, r1, r3
 800367e:	3320      	adds	r3, #32
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003684:	183b      	adds	r3, r7, r0
 8003686:	781a      	ldrb	r2, [r3, #0]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	0013      	movs	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	189b      	adds	r3, r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	18cb      	adds	r3, r1, r3
 8003694:	3324      	adds	r3, #36	@ 0x24
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800369a:	183b      	adds	r3, r7, r0
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	0013      	movs	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	189b      	adds	r3, r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	2200      	movs	r2, #0
 80036ac:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	183b      	adds	r3, r7, r0
 80036b4:	3201      	adds	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	791b      	ldrb	r3, [r3, #4]
 80036bc:	210f      	movs	r1, #15
 80036be:	187a      	adds	r2, r7, r1
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d3b0      	bcc.n	8003628 <HAL_PCD_Init+0x60>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e056      	b.n	800377c <HAL_PCD_Init+0x1b4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036ce:	240f      	movs	r4, #15
 80036d0:	193b      	adds	r3, r7, r4
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	2352      	movs	r3, #82	@ 0x52
 80036d8:	33ff      	adds	r3, #255	@ 0xff
 80036da:	0019      	movs	r1, r3
 80036dc:	0013      	movs	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	189b      	adds	r3, r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	18c3      	adds	r3, r0, r3
 80036e6:	185b      	adds	r3, r3, r1
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	781a      	ldrb	r2, [r3, #0]
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	23a8      	movs	r3, #168	@ 0xa8
 80036f4:	0059      	lsls	r1, r3, #1
 80036f6:	0013      	movs	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	189b      	adds	r3, r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	18c3      	adds	r3, r0, r3
 8003700:	185b      	adds	r3, r3, r1
 8003702:	193a      	adds	r2, r7, r4
 8003704:	7812      	ldrb	r2, [r2, #0]
 8003706:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003708:	193b      	adds	r3, r7, r4
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	2354      	movs	r3, #84	@ 0x54
 8003710:	33ff      	adds	r3, #255	@ 0xff
 8003712:	0019      	movs	r1, r3
 8003714:	0013      	movs	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	189b      	adds	r3, r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	18c3      	adds	r3, r0, r3
 800371e:	185b      	adds	r3, r3, r1
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003724:	193b      	adds	r3, r7, r4
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	23b0      	movs	r3, #176	@ 0xb0
 800372c:	0059      	lsls	r1, r3, #1
 800372e:	0013      	movs	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	189b      	adds	r3, r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	18c3      	adds	r3, r0, r3
 8003738:	185b      	adds	r3, r3, r1
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800373e:	193b      	adds	r3, r7, r4
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	23b2      	movs	r3, #178	@ 0xb2
 8003746:	0059      	lsls	r1, r3, #1
 8003748:	0013      	movs	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	189b      	adds	r3, r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	18c3      	adds	r3, r0, r3
 8003752:	185b      	adds	r3, r3, r1
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003758:	193b      	adds	r3, r7, r4
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	23b4      	movs	r3, #180	@ 0xb4
 8003760:	0059      	lsls	r1, r3, #1
 8003762:	0013      	movs	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	189b      	adds	r3, r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	18c3      	adds	r3, r0, r3
 800376c:	185b      	adds	r3, r3, r1
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003772:	193b      	adds	r3, r7, r4
 8003774:	781a      	ldrb	r2, [r3, #0]
 8003776:	193b      	adds	r3, r7, r4
 8003778:	3201      	adds	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	791b      	ldrb	r3, [r3, #4]
 8003780:	220f      	movs	r2, #15
 8003782:	18ba      	adds	r2, r7, r2
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d3a1      	bcc.n	80036ce <HAL_PCD_Init+0x106>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6859      	ldr	r1, [r3, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	f003 fdc2 	bl	800731c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a09      	ldr	r2, [pc, #36]	@ (80037c8 <HAL_PCD_Init+0x200>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7a9b      	ldrb	r3, [r3, #10]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d103      	bne.n	80037b6 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f001 fd23 	bl	80051fc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b005      	add	sp, #20
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	40005c00 	.word	0x40005c00
 80037c4:	0800c460 	.word	0x0800c460
 80037c8:	00000291 	.word	0x00000291

080037cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	23a4      	movs	r3, #164	@ 0xa4
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	5cd3      	ldrb	r3, [r2, r3]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_PCD_Start+0x18>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e014      	b.n	800380e <HAL_PCD_Start+0x42>
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	23a4      	movs	r3, #164	@ 0xa4
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	2101      	movs	r1, #1
 80037ec:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f003 fd62 	bl	80072bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f005 fd57 	bl	80092b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	23a4      	movs	r3, #164	@ 0xa4
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	2100      	movs	r1, #0
 800380a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b002      	add	sp, #8
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	0018      	movs	r0, r3
 8003826:	f005 fd59 	bl	80092dc <USB_ReadInterrupts>
 800382a:	0003      	movs	r3, r0
 800382c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	2380      	movs	r3, #128	@ 0x80
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	4013      	ands	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0018      	movs	r0, r3
 800383c:	f000 fb60 	bl	8003f00 <PCD_EP_ISR_Handler>

    return;
 8003840:	e11d      	b.n	8003a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4013      	ands	r3, r2
 800384a:	d015      	beq.n	8003878 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2244      	movs	r2, #68	@ 0x44
 8003852:	5a9b      	ldrh	r3, [r3, r2]
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	498a      	ldr	r1, [pc, #552]	@ (8003a84 <HAL_PCD_IRQHandler+0x26c>)
 800385c:	400a      	ands	r2, r1
 800385e:	b291      	uxth	r1, r2
 8003860:	2244      	movs	r2, #68	@ 0x44
 8003862:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0018      	movs	r0, r3
 8003868:	f007 fd97 	bl	800b39a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2100      	movs	r1, #0
 8003870:	0018      	movs	r0, r3
 8003872:	f000 f915 	bl	8003aa0 <HAL_PCD_SetAddress>

    return;
 8003876:	e102      	b.n	8003a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	01db      	lsls	r3, r3, #7
 800387e:	4013      	ands	r3, r2
 8003880:	d00c      	beq.n	800389c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2244      	movs	r2, #68	@ 0x44
 8003888:	5a9b      	ldrh	r3, [r3, r2]
 800388a:	b29a      	uxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	497d      	ldr	r1, [pc, #500]	@ (8003a88 <HAL_PCD_IRQHandler+0x270>)
 8003892:	400a      	ands	r2, r1
 8003894:	b291      	uxth	r1, r2
 8003896:	2244      	movs	r2, #68	@ 0x44
 8003898:	5299      	strh	r1, [r3, r2]

    return;
 800389a:	e0f0      	b.n	8003a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	019b      	lsls	r3, r3, #6
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00c      	beq.n	80038c0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2244      	movs	r2, #68	@ 0x44
 80038ac:	5a9b      	ldrh	r3, [r3, r2]
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4975      	ldr	r1, [pc, #468]	@ (8003a8c <HAL_PCD_IRQHandler+0x274>)
 80038b6:	400a      	ands	r2, r1
 80038b8:	b291      	uxth	r1, r2
 80038ba:	2244      	movs	r2, #68	@ 0x44
 80038bc:	5299      	strh	r1, [r3, r2]

    return;
 80038be:	e0de      	b.n	8003a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	2380      	movs	r3, #128	@ 0x80
 80038c4:	015b      	lsls	r3, r3, #5
 80038c6:	4013      	ands	r3, r2
 80038c8:	d038      	beq.n	800393c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2240      	movs	r2, #64	@ 0x40
 80038d0:	5a9b      	ldrh	r3, [r3, r2]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2104      	movs	r1, #4
 80038da:	438a      	bics	r2, r1
 80038dc:	b291      	uxth	r1, r2
 80038de:	2240      	movs	r2, #64	@ 0x40
 80038e0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2240      	movs	r2, #64	@ 0x40
 80038e8:	5a9b      	ldrh	r3, [r3, r2]
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2108      	movs	r1, #8
 80038f2:	438a      	bics	r2, r1
 80038f4:	b291      	uxth	r1, r2
 80038f6:	2240      	movs	r2, #64	@ 0x40
 80038f8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	23b2      	movs	r3, #178	@ 0xb2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	5cd3      	ldrb	r3, [r2, r3]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d109      	bne.n	800391a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	23b2      	movs	r3, #178	@ 0xb2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	2100      	movs	r1, #0
 800390e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2100      	movs	r1, #0
 8003914:	0018      	movs	r0, r3
 8003916:	f001 fc9b 	bl	8005250 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0018      	movs	r0, r3
 800391e:	f007 fd7d 	bl	800b41c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2244      	movs	r2, #68	@ 0x44
 8003928:	5a9b      	ldrh	r3, [r3, r2]
 800392a:	b29a      	uxth	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4957      	ldr	r1, [pc, #348]	@ (8003a90 <HAL_PCD_IRQHandler+0x278>)
 8003932:	400a      	ands	r2, r1
 8003934:	b291      	uxth	r1, r2
 8003936:	2244      	movs	r2, #68	@ 0x44
 8003938:	5299      	strh	r1, [r3, r2]

    return;
 800393a:	e0a0      	b.n	8003a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	2380      	movs	r3, #128	@ 0x80
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4013      	ands	r3, r2
 8003944:	d028      	beq.n	8003998 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2240      	movs	r2, #64	@ 0x40
 800394c:	5a9b      	ldrh	r3, [r3, r2]
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2108      	movs	r1, #8
 8003956:	430a      	orrs	r2, r1
 8003958:	b291      	uxth	r1, r2
 800395a:	2240      	movs	r2, #64	@ 0x40
 800395c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2244      	movs	r2, #68	@ 0x44
 8003964:	5a9b      	ldrh	r3, [r3, r2]
 8003966:	b29a      	uxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4949      	ldr	r1, [pc, #292]	@ (8003a94 <HAL_PCD_IRQHandler+0x27c>)
 800396e:	400a      	ands	r2, r1
 8003970:	b291      	uxth	r1, r2
 8003972:	2244      	movs	r2, #68	@ 0x44
 8003974:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2240      	movs	r2, #64	@ 0x40
 800397c:	5a9b      	ldrh	r3, [r3, r2]
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2104      	movs	r1, #4
 8003986:	430a      	orrs	r2, r1
 8003988:	b291      	uxth	r1, r2
 800398a:	2240      	movs	r2, #64	@ 0x40
 800398c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	0018      	movs	r0, r3
 8003992:	f007 fd27 	bl	800b3e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003996:	e072      	b.n	8003a7e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2280      	movs	r2, #128	@ 0x80
 800399c:	4013      	ands	r3, r2
 800399e:	d046      	beq.n	8003a2e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2244      	movs	r2, #68	@ 0x44
 80039a6:	5a9b      	ldrh	r3, [r3, r2]
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2180      	movs	r1, #128	@ 0x80
 80039b0:	438a      	bics	r2, r1
 80039b2:	b291      	uxth	r1, r2
 80039b4:	2244      	movs	r2, #68	@ 0x44
 80039b6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	23b2      	movs	r3, #178	@ 0xb2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d12f      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2240      	movs	r2, #64	@ 0x40
 80039ca:	5a9b      	ldrh	r3, [r3, r2]
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2104      	movs	r1, #4
 80039d4:	430a      	orrs	r2, r1
 80039d6:	b291      	uxth	r1, r2
 80039d8:	2240      	movs	r2, #64	@ 0x40
 80039da:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2240      	movs	r2, #64	@ 0x40
 80039e2:	5a9b      	ldrh	r3, [r3, r2]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2108      	movs	r1, #8
 80039ec:	430a      	orrs	r2, r1
 80039ee:	b291      	uxth	r1, r2
 80039f0:	2240      	movs	r2, #64	@ 0x40
 80039f2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	23b2      	movs	r3, #178	@ 0xb2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	2101      	movs	r1, #1
 80039fc:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2254      	movs	r2, #84	@ 0x54
 8003a04:	5a9b      	ldrh	r3, [r3, r2]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	223c      	movs	r2, #60	@ 0x3c
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	23b3      	movs	r3, #179	@ 0xb3
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f001 fc17 	bl	8005250 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003a22:	e02c      	b.n	8003a7e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	0018      	movs	r0, r3
 8003a28:	f007 fcdc 	bl	800b3e4 <HAL_PCD_SuspendCallback>
    return;
 8003a2c:	e027      	b.n	8003a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	2380      	movs	r3, #128	@ 0x80
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4013      	ands	r3, r2
 8003a36:	d010      	beq.n	8003a5a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2244      	movs	r2, #68	@ 0x44
 8003a3e:	5a9b      	ldrh	r3, [r3, r2]
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4914      	ldr	r1, [pc, #80]	@ (8003a98 <HAL_PCD_IRQHandler+0x280>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	b291      	uxth	r1, r2
 8003a4c:	2244      	movs	r2, #68	@ 0x44
 8003a4e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f007 fc92 	bl	800b37c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a58:	e011      	b.n	8003a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	2380      	movs	r3, #128	@ 0x80
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	d00c      	beq.n	8003a7e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2244      	movs	r2, #68	@ 0x44
 8003a6a:	5a9b      	ldrh	r3, [r3, r2]
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	490a      	ldr	r1, [pc, #40]	@ (8003a9c <HAL_PCD_IRQHandler+0x284>)
 8003a74:	400a      	ands	r2, r1
 8003a76:	b291      	uxth	r1, r2
 8003a78:	2244      	movs	r2, #68	@ 0x44
 8003a7a:	5299      	strh	r1, [r3, r2]

    return;
 8003a7c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b004      	add	sp, #16
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	fffffbff 	.word	0xfffffbff
 8003a88:	ffffbfff 	.word	0xffffbfff
 8003a8c:	ffffdfff 	.word	0xffffdfff
 8003a90:	ffffefff 	.word	0xffffefff
 8003a94:	fffff7ff 	.word	0xfffff7ff
 8003a98:	fffffdff 	.word	0xfffffdff
 8003a9c:	fffffeff 	.word	0xfffffeff

08003aa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	000a      	movs	r2, r1
 8003aaa:	1cfb      	adds	r3, r7, #3
 8003aac:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	23a4      	movs	r3, #164	@ 0xa4
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	5cd3      	ldrb	r3, [r2, r3]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_PCD_SetAddress+0x1e>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e016      	b.n	8003aec <HAL_PCD_SetAddress+0x4c>
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	23a4      	movs	r3, #164	@ 0xa4
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	1cfa      	adds	r2, r7, #3
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	1cfb      	adds	r3, r7, #3
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	0019      	movs	r1, r3
 8003ada:	0010      	movs	r0, r2
 8003adc:	f005 fbd4 	bl	8009288 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	23a4      	movs	r3, #164	@ 0xa4
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003af4:	b590      	push	{r4, r7, lr}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	000c      	movs	r4, r1
 8003afe:	0010      	movs	r0, r2
 8003b00:	0019      	movs	r1, r3
 8003b02:	1cfb      	adds	r3, r7, #3
 8003b04:	1c22      	adds	r2, r4, #0
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	003b      	movs	r3, r7
 8003b0a:	1c02      	adds	r2, r0, #0
 8003b0c:	801a      	strh	r2, [r3, #0]
 8003b0e:	1cbb      	adds	r3, r7, #2
 8003b10:	1c0a      	adds	r2, r1, #0
 8003b12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b14:	230b      	movs	r3, #11
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b1c:	1cfb      	adds	r3, r7, #3
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	da0f      	bge.n	8003b46 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b26:	1cfb      	adds	r3, r7, #3
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2207      	movs	r2, #7
 8003b2c:	401a      	ands	r2, r3
 8003b2e:	0013      	movs	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	3310      	adds	r3, #16
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	18d3      	adds	r3, r2, r3
 8003b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	705a      	strb	r2, [r3, #1]
 8003b44:	e00f      	b.n	8003b66 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b46:	1cfb      	adds	r3, r7, #3
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2207      	movs	r2, #7
 8003b4c:	401a      	ands	r2, r3
 8003b4e:	0013      	movs	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	189b      	adds	r3, r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	3351      	adds	r3, #81	@ 0x51
 8003b58:	33ff      	adds	r3, #255	@ 0xff
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	18d3      	adds	r3, r2, r3
 8003b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b66:	1cfb      	adds	r3, r7, #3
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2207      	movs	r2, #7
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b74:	003b      	movs	r3, r7
 8003b76:	881a      	ldrh	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1cba      	adds	r2, r7, #2
 8003b80:	7812      	ldrb	r2, [r2, #0]
 8003b82:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b84:	1cbb      	adds	r3, r7, #2
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d102      	bne.n	8003b92 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	23a4      	movs	r3, #164	@ 0xa4
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	5cd3      	ldrb	r3, [r2, r3]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_PCD_EP_Open+0xae>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e013      	b.n	8003bca <HAL_PCD_EP_Open+0xd6>
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	23a4      	movs	r3, #164	@ 0xa4
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	2101      	movs	r1, #1
 8003baa:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f003 fbcd 	bl	8007354 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	23a4      	movs	r3, #164	@ 0xa4
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003bc4:	230b      	movs	r3, #11
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	781b      	ldrb	r3, [r3, #0]
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b005      	add	sp, #20
 8003bd0:	bd90      	pop	{r4, r7, pc}

08003bd2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	000a      	movs	r2, r1
 8003bdc:	1cfb      	adds	r3, r7, #3
 8003bde:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003be0:	1cfb      	adds	r3, r7, #3
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	da0f      	bge.n	8003c0a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bea:	1cfb      	adds	r3, r7, #3
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2207      	movs	r2, #7
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	0013      	movs	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	189b      	adds	r3, r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	3310      	adds	r3, #16
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	18d3      	adds	r3, r2, r3
 8003c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	705a      	strb	r2, [r3, #1]
 8003c08:	e00f      	b.n	8003c2a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c0a:	1cfb      	adds	r3, r7, #3
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2207      	movs	r2, #7
 8003c10:	401a      	ands	r2, r3
 8003c12:	0013      	movs	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	189b      	adds	r3, r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	3351      	adds	r3, #81	@ 0x51
 8003c1c:	33ff      	adds	r3, #255	@ 0xff
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	18d3      	adds	r3, r2, r3
 8003c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c2a:	1cfb      	adds	r3, r7, #3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2207      	movs	r2, #7
 8003c30:	4013      	ands	r3, r2
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	23a4      	movs	r3, #164	@ 0xa4
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	5cd3      	ldrb	r3, [r2, r3]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_PCD_EP_Close+0x76>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e011      	b.n	8003c6c <HAL_PCD_EP_Close+0x9a>
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	23a4      	movs	r3, #164	@ 0xa4
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	2101      	movs	r1, #1
 8003c50:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	0011      	movs	r1, r2
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f003 ff22 	bl	8007aa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	23a4      	movs	r3, #164	@ 0xa4
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	2100      	movs	r1, #0
 8003c68:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b004      	add	sp, #16
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	200b      	movs	r0, #11
 8003c82:	183b      	adds	r3, r7, r0
 8003c84:	1c0a      	adds	r2, r1, #0
 8003c86:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c88:	0001      	movs	r1, r0
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2207      	movs	r2, #7
 8003c90:	401a      	ands	r2, r3
 8003c92:	0013      	movs	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	189b      	adds	r3, r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	3351      	adds	r3, #81	@ 0x51
 8003c9c:	33ff      	adds	r3, #255	@ 0xff
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	18d3      	adds	r3, r2, r3
 8003ca2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2207      	movs	r2, #7
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	0011      	movs	r1, r2
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f004 f8a6 	bl	8007e24 <USB_EPStartXfer>

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b006      	add	sp, #24
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	000a      	movs	r2, r1
 8003cec:	1cfb      	adds	r3, r7, #3
 8003cee:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cf0:	1cfb      	adds	r3, r7, #3
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2207      	movs	r2, #7
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	23b6      	movs	r3, #182	@ 0xb6
 8003cfc:	0059      	lsls	r1, r3, #1
 8003cfe:	0013      	movs	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	18c3      	adds	r3, r0, r3
 8003d08:	185b      	adds	r3, r3, r1
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	200b      	movs	r0, #11
 8003d22:	183b      	adds	r3, r7, r0
 8003d24:	1c0a      	adds	r2, r1, #0
 8003d26:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d28:	183b      	adds	r3, r7, r0
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	401a      	ands	r2, r3
 8003d30:	0013      	movs	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	189b      	adds	r3, r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	3310      	adds	r3, #16
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	18d3      	adds	r3, r2, r3
 8003d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2224      	movs	r2, #36	@ 0x24
 8003d50:	2101      	movs	r1, #1
 8003d52:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2201      	movs	r2, #1
 8003d64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d66:	183b      	adds	r3, r7, r0
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2207      	movs	r2, #7
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	0011      	movs	r1, r2
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f004 f851 	bl	8007e24 <USB_EPStartXfer>

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	0018      	movs	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b006      	add	sp, #24
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	000a      	movs	r2, r1
 8003d96:	1cfb      	adds	r3, r7, #3
 8003d98:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d9a:	1cfb      	adds	r3, r7, #3
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2207      	movs	r2, #7
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	7912      	ldrb	r2, [r2, #4]
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e046      	b.n	8003e3c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dae:	1cfb      	adds	r3, r7, #3
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b25b      	sxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	da0f      	bge.n	8003dd8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db8:	1cfb      	adds	r3, r7, #3
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	3310      	adds	r3, #16
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	18d3      	adds	r3, r2, r3
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	705a      	strb	r2, [r3, #1]
 8003dd6:	e00d      	b.n	8003df4 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dd8:	1cfb      	adds	r3, r7, #3
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	0013      	movs	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	189b      	adds	r3, r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	3351      	adds	r3, #81	@ 0x51
 8003de6:	33ff      	adds	r3, #255	@ 0xff
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	18d3      	adds	r3, r2, r3
 8003dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dfa:	1cfb      	adds	r3, r7, #3
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2207      	movs	r2, #7
 8003e00:	4013      	ands	r3, r2
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	23a4      	movs	r3, #164	@ 0xa4
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	5cd3      	ldrb	r3, [r2, r3]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_PCD_EP_SetStall+0x8c>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e011      	b.n	8003e3c <HAL_PCD_EP_SetStall+0xb0>
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	23a4      	movs	r3, #164	@ 0xa4
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	2101      	movs	r1, #1
 8003e20:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	0011      	movs	r1, r2
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f005 f92a 	bl	8009084 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	23a4      	movs	r3, #164	@ 0xa4
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	2100      	movs	r1, #0
 8003e38:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b004      	add	sp, #16
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	000a      	movs	r2, r1
 8003e4e:	1cfb      	adds	r3, r7, #3
 8003e50:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e52:	1cfb      	adds	r3, r7, #3
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	220f      	movs	r2, #15
 8003e58:	4013      	ands	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	7912      	ldrb	r2, [r2, #4]
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e048      	b.n	8003ef8 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e66:	1cfb      	adds	r3, r7, #3
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	b25b      	sxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	da0f      	bge.n	8003e90 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e70:	1cfb      	adds	r3, r7, #3
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2207      	movs	r2, #7
 8003e76:	401a      	ands	r2, r3
 8003e78:	0013      	movs	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	189b      	adds	r3, r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	3310      	adds	r3, #16
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	18d3      	adds	r3, r2, r3
 8003e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	705a      	strb	r2, [r3, #1]
 8003e8e:	e00f      	b.n	8003eb0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e90:	1cfb      	adds	r3, r7, #3
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2207      	movs	r2, #7
 8003e96:	401a      	ands	r2, r3
 8003e98:	0013      	movs	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	189b      	adds	r3, r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	3351      	adds	r3, #81	@ 0x51
 8003ea2:	33ff      	adds	r3, #255	@ 0xff
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	18d3      	adds	r3, r2, r3
 8003ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb6:	1cfb      	adds	r3, r7, #3
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2207      	movs	r2, #7
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	23a4      	movs	r3, #164	@ 0xa4
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_PCD_EP_ClrStall+0x90>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e011      	b.n	8003ef8 <HAL_PCD_EP_ClrStall+0xb4>
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	23a4      	movs	r3, #164	@ 0xa4
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	2101      	movs	r1, #1
 8003edc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	0011      	movs	r1, r2
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f005 f91c 	bl	8009124 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	23a4      	movs	r3, #164	@ 0xa4
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f00:	b5b0      	push	{r4, r5, r7, lr}
 8003f02:	b096      	sub	sp, #88	@ 0x58
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f08:	f000 fbea 	bl	80046e0 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	2048      	movs	r0, #72	@ 0x48
 8003f12:	183b      	adds	r3, r7, r0
 8003f14:	2144      	movs	r1, #68	@ 0x44
 8003f16:	5a52      	ldrh	r2, [r2, r1]
 8003f18:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f1a:	183b      	adds	r3, r7, r0
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	244f      	movs	r4, #79	@ 0x4f
 8003f22:	193b      	adds	r3, r7, r4
 8003f24:	210f      	movs	r1, #15
 8003f26:	400a      	ands	r2, r1
 8003f28:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003f2a:	193b      	adds	r3, r7, r4
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d000      	beq.n	8003f34 <PCD_EP_ISR_Handler+0x34>
 8003f32:	e18d      	b.n	8004250 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f34:	183b      	adds	r3, r7, r0
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	2210      	movs	r2, #16
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d152      	bne.n	8003fe4 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	200e      	movs	r0, #14
 8003f48:	183b      	adds	r3, r7, r0
 8003f4a:	49ba      	ldr	r1, [pc, #744]	@ (8004234 <PCD_EP_ISR_Handler+0x334>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	183a      	adds	r2, r7, r0
 8003f56:	8812      	ldrh	r2, [r2, #0]
 8003f58:	49b7      	ldr	r1, [pc, #732]	@ (8004238 <PCD_EP_ISR_Handler+0x338>)
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3310      	adds	r3, #16
 8003f64:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2250      	movs	r2, #80	@ 0x50
 8003f6c:	5a9b      	ldrh	r3, [r3, r2]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	001a      	movs	r2, r3
 8003f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	18d2      	adds	r2, r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	18d3      	adds	r3, r2, r3
 8003f80:	4aae      	ldr	r2, [pc, #696]	@ (800423c <PCD_EP_ISR_Handler+0x33c>)
 8003f82:	4694      	mov	ip, r2
 8003f84:	4463      	add	r3, ip
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	059b      	lsls	r3, r3, #22
 8003f8a:	0d9a      	lsrs	r2, r3, #22
 8003f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	18d2      	adds	r2, r2, r3
 8003f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f007 f9cc 	bl	800b340 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7b1b      	ldrb	r3, [r3, #12]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <PCD_EP_ISR_Handler+0xb6>
 8003fb2:	f000 fb95 	bl	80046e0 <PCD_EP_ISR_Handler+0x7e0>
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <PCD_EP_ISR_Handler+0xc2>
 8003fbe:	f000 fb8f 	bl	80046e0 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7b1b      	ldrb	r3, [r3, #12]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2280      	movs	r2, #128	@ 0x80
 8003fca:	4252      	negs	r2, r2
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	0011      	movs	r1, r2
 8003fd6:	224c      	movs	r2, #76	@ 0x4c
 8003fd8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	731a      	strb	r2, [r3, #12]
 8003fe0:	f000 fb7e 	bl	80046e0 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3351      	adds	r3, #81	@ 0x51
 8003fe8:	33ff      	adds	r3, #255	@ 0xff
 8003fea:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	214c      	movs	r1, #76	@ 0x4c
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	8812      	ldrh	r2, [r2, #0]
 8003ff6:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	881a      	ldrh	r2, [r3, #0]
 8003ffc:	2380      	movs	r3, #128	@ 0x80
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	4013      	ands	r3, r2
 8004002:	d037      	beq.n	8004074 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2250      	movs	r2, #80	@ 0x50
 800400a:	5a9b      	ldrh	r3, [r3, r2]
 800400c:	b29b      	uxth	r3, r3
 800400e:	001a      	movs	r2, r3
 8004010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	18d2      	adds	r2, r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	18d3      	adds	r3, r2, r3
 800401e:	4a88      	ldr	r2, [pc, #544]	@ (8004240 <PCD_EP_ISR_Handler+0x340>)
 8004020:	4694      	mov	ip, r2
 8004022:	4463      	add	r3, ip
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	059b      	lsls	r3, r3, #22
 8004028:	0d9a      	lsrs	r2, r3, #22
 800402a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800402c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	22a6      	movs	r2, #166	@ 0xa6
 8004036:	0092      	lsls	r2, r2, #2
 8004038:	1899      	adds	r1, r3, r2
 800403a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800403c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800403e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004040:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004042:	b29b      	uxth	r3, r3
 8004044:	f005 f9a1 	bl	800938a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29a      	uxth	r2, r3
 8004050:	2010      	movs	r0, #16
 8004052:	183b      	adds	r3, r7, r0
 8004054:	497b      	ldr	r1, [pc, #492]	@ (8004244 <PCD_EP_ISR_Handler+0x344>)
 8004056:	400a      	ands	r2, r1
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	183a      	adds	r2, r7, r0
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	2180      	movs	r1, #128	@ 0x80
 8004064:	430a      	orrs	r2, r1
 8004066:	b292      	uxth	r2, r2
 8004068:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0018      	movs	r0, r3
 800406e:	f007 f931 	bl	800b2d4 <HAL_PCD_SetupStageCallback>
 8004072:	e335      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004074:	234c      	movs	r3, #76	@ 0x4c
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	2200      	movs	r2, #0
 800407a:	5e9b      	ldrsh	r3, [r3, r2]
 800407c:	2b00      	cmp	r3, #0
 800407e:	db00      	blt.n	8004082 <PCD_EP_ISR_Handler+0x182>
 8004080:	e32e      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b29a      	uxth	r2, r3
 800408a:	201e      	movs	r0, #30
 800408c:	183b      	adds	r3, r7, r0
 800408e:	496d      	ldr	r1, [pc, #436]	@ (8004244 <PCD_EP_ISR_Handler+0x344>)
 8004090:	400a      	ands	r2, r1
 8004092:	801a      	strh	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	183a      	adds	r2, r7, r0
 800409a:	8812      	ldrh	r2, [r2, #0]
 800409c:	2180      	movs	r1, #128	@ 0x80
 800409e:	430a      	orrs	r2, r1
 80040a0:	b292      	uxth	r2, r2
 80040a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2250      	movs	r2, #80	@ 0x50
 80040aa:	5a9b      	ldrh	r3, [r3, r2]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	001a      	movs	r2, r3
 80040b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	18d2      	adds	r2, r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	4a60      	ldr	r2, [pc, #384]	@ (8004240 <PCD_EP_ISR_Handler+0x340>)
 80040c0:	4694      	mov	ip, r2
 80040c2:	4463      	add	r3, ip
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	059b      	lsls	r3, r3, #22
 80040c8:	0d9a      	lsrs	r2, r3, #22
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01a      	beq.n	800410c <PCD_EP_ISR_Handler+0x20c>
 80040d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e4:	6959      	ldr	r1, [r3, #20]
 80040e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80040ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f005 f94b 	bl	800938a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80040f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	18d2      	adds	r2, r2, r3
 80040fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004100:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2100      	movs	r1, #0
 8004106:	0018      	movs	r0, r3
 8004108:	f007 f8f9 	bl	800b2fe <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	214c      	movs	r1, #76	@ 0x4c
 8004112:	187b      	adds	r3, r7, r1
 8004114:	8812      	ldrh	r2, [r2, #0]
 8004116:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004118:	187b      	adds	r3, r7, r1
 800411a:	881a      	ldrh	r2, [r3, #0]
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4013      	ands	r3, r2
 8004122:	d000      	beq.n	8004126 <PCD_EP_ISR_Handler+0x226>
 8004124:	e2dc      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7e0>
 8004126:	187b      	adds	r3, r7, r1
 8004128:	881a      	ldrh	r2, [r3, #0]
 800412a:	23c0      	movs	r3, #192	@ 0xc0
 800412c:	019b      	lsls	r3, r3, #6
 800412e:	401a      	ands	r2, r3
 8004130:	23c0      	movs	r3, #192	@ 0xc0
 8004132:	019b      	lsls	r3, r3, #6
 8004134:	429a      	cmp	r2, r3
 8004136:	d100      	bne.n	800413a <PCD_EP_ISR_Handler+0x23a>
 8004138:	e2d2      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2250      	movs	r2, #80	@ 0x50
 8004146:	5a9b      	ldrh	r3, [r3, r2]
 8004148:	b29b      	uxth	r3, r3
 800414a:	001a      	movs	r2, r3
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	189b      	adds	r3, r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4a3a      	ldr	r2, [pc, #232]	@ (8004240 <PCD_EP_ISR_Handler+0x340>)
 8004156:	4694      	mov	ip, r2
 8004158:	4463      	add	r3, ip
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	059b      	lsls	r3, r3, #22
 8004164:	0d9b      	lsrs	r3, r3, #22
 8004166:	b29a      	uxth	r2, r3
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	801a      	strh	r2, [r3, #0]
 800416c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d108      	bne.n	8004186 <PCD_EP_ISR_Handler+0x286>
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	4a2f      	ldr	r2, [pc, #188]	@ (8004238 <PCD_EP_ISR_Handler+0x338>)
 800417c:	4313      	orrs	r3, r2
 800417e:	b29a      	uxth	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	801a      	strh	r2, [r3, #0]
 8004184:	e035      	b.n	80041f2 <PCD_EP_ISR_Handler+0x2f2>
 8004186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b3e      	cmp	r3, #62	@ 0x3e
 800418c:	d817      	bhi.n	80041be <PCD_EP_ISR_Handler+0x2be>
 800418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	647b      	str	r3, [r7, #68]	@ 0x44
 8004196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2201      	movs	r2, #1
 800419c:	4013      	ands	r3, r2
 800419e:	d002      	beq.n	80041a6 <PCD_EP_ISR_Handler+0x2a6>
 80041a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a2:	3301      	adds	r3, #1
 80041a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	029b      	lsls	r3, r3, #10
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	4313      	orrs	r3, r2
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	801a      	strh	r2, [r3, #0]
 80041bc:	e019      	b.n	80041f2 <PCD_EP_ISR_Handler+0x2f2>
 80041be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	221f      	movs	r2, #31
 80041cc:	4013      	ands	r3, r2
 80041ce:	d102      	bne.n	80041d6 <PCD_EP_ISR_Handler+0x2d6>
 80041d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d2:	3b01      	subs	r3, #1
 80041d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29a      	uxth	r2, r3
 80041dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041de:	b29b      	uxth	r3, r3
 80041e0:	029b      	lsls	r3, r3, #10
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	4313      	orrs	r3, r2
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	4a13      	ldr	r2, [pc, #76]	@ (8004238 <PCD_EP_ISR_Handler+0x338>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	2012      	movs	r0, #18
 80041fc:	183b      	adds	r3, r7, r0
 80041fe:	4912      	ldr	r1, [pc, #72]	@ (8004248 <PCD_EP_ISR_Handler+0x348>)
 8004200:	400a      	ands	r2, r1
 8004202:	801a      	strh	r2, [r3, #0]
 8004204:	183b      	adds	r3, r7, r0
 8004206:	183a      	adds	r2, r7, r0
 8004208:	8812      	ldrh	r2, [r2, #0]
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	0149      	lsls	r1, r1, #5
 800420e:	404a      	eors	r2, r1
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	183b      	adds	r3, r7, r0
 8004214:	183a      	adds	r2, r7, r0
 8004216:	8812      	ldrh	r2, [r2, #0]
 8004218:	2180      	movs	r1, #128	@ 0x80
 800421a:	0189      	lsls	r1, r1, #6
 800421c:	404a      	eors	r2, r1
 800421e:	801a      	strh	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	183a      	adds	r2, r7, r0
 8004226:	8812      	ldrh	r2, [r2, #0]
 8004228:	4908      	ldr	r1, [pc, #32]	@ (800424c <PCD_EP_ISR_Handler+0x34c>)
 800422a:	430a      	orrs	r2, r1
 800422c:	b292      	uxth	r2, r2
 800422e:	801a      	strh	r2, [r3, #0]
 8004230:	e256      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7e0>
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	ffff8f0f 	.word	0xffff8f0f
 8004238:	ffff8000 	.word	0xffff8000
 800423c:	00000402 	.word	0x00000402
 8004240:	00000406 	.word	0x00000406
 8004244:	00000f8f 	.word	0x00000f8f
 8004248:	ffffbf8f 	.word	0xffffbf8f
 800424c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	001a      	movs	r2, r3
 8004256:	204f      	movs	r0, #79	@ 0x4f
 8004258:	183b      	adds	r3, r7, r0
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	18d2      	adds	r2, r2, r3
 8004260:	214c      	movs	r1, #76	@ 0x4c
 8004262:	187b      	adds	r3, r7, r1
 8004264:	8812      	ldrh	r2, [r2, #0]
 8004266:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004268:	187b      	adds	r3, r7, r1
 800426a:	2200      	movs	r2, #0
 800426c:	5e9b      	ldrsh	r3, [r3, r2]
 800426e:	2b00      	cmp	r3, #0
 8004270:	db00      	blt.n	8004274 <PCD_EP_ISR_Handler+0x374>
 8004272:	e0fa      	b.n	800446a <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	001a      	movs	r2, r3
 800427a:	183b      	adds	r3, r7, r0
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	18d3      	adds	r3, r2, r3
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29a      	uxth	r2, r3
 8004286:	244a      	movs	r4, #74	@ 0x4a
 8004288:	193b      	adds	r3, r7, r4
 800428a:	49d1      	ldr	r1, [pc, #836]	@ (80045d0 <PCD_EP_ISR_Handler+0x6d0>)
 800428c:	400a      	ands	r2, r1
 800428e:	801a      	strh	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	001a      	movs	r2, r3
 8004296:	183b      	adds	r3, r7, r0
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	18d3      	adds	r3, r2, r3
 800429e:	193a      	adds	r2, r7, r4
 80042a0:	8812      	ldrh	r2, [r2, #0]
 80042a2:	2180      	movs	r1, #128	@ 0x80
 80042a4:	430a      	orrs	r2, r1
 80042a6:	b292      	uxth	r2, r2
 80042a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80042aa:	183b      	adds	r3, r7, r0
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	0013      	movs	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	3351      	adds	r3, #81	@ 0x51
 80042b8:	33ff      	adds	r3, #255	@ 0xff
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	18d3      	adds	r3, r2, r3
 80042be:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80042c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c2:	7b1b      	ldrb	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d125      	bne.n	8004314 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2250      	movs	r2, #80	@ 0x50
 80042ce:	5a9b      	ldrh	r3, [r3, r2]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	001a      	movs	r2, r3
 80042d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	18d2      	adds	r2, r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	18d3      	adds	r3, r2, r3
 80042e2:	4abc      	ldr	r2, [pc, #752]	@ (80045d4 <PCD_EP_ISR_Handler+0x6d4>)
 80042e4:	4694      	mov	ip, r2
 80042e6:	4463      	add	r3, ip
 80042e8:	881a      	ldrh	r2, [r3, #0]
 80042ea:	2450      	movs	r4, #80	@ 0x50
 80042ec:	193b      	adds	r3, r7, r4
 80042ee:	0592      	lsls	r2, r2, #22
 80042f0:	0d92      	lsrs	r2, r2, #22
 80042f2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80042f4:	193b      	adds	r3, r7, r4
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d100      	bne.n	80042fe <PCD_EP_ISR_Handler+0x3fe>
 80042fc:	e08d      	b.n	800441a <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	6959      	ldr	r1, [r3, #20]
 8004306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004308:	88da      	ldrh	r2, [r3, #6]
 800430a:	193b      	adds	r3, r7, r4
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	f005 f83c 	bl	800938a <USB_ReadPMA>
 8004312:	e082      	b.n	800441a <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004316:	78db      	ldrb	r3, [r3, #3]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d10c      	bne.n	8004336 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800431c:	2350      	movs	r3, #80	@ 0x50
 800431e:	18fc      	adds	r4, r7, r3
 8004320:	234c      	movs	r3, #76	@ 0x4c
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	881a      	ldrh	r2, [r3, #0]
 8004326:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f9ec 	bl	8004708 <HAL_PCD_EP_DB_Receive>
 8004330:	0003      	movs	r3, r0
 8004332:	8023      	strh	r3, [r4, #0]
 8004334:	e071      	b.n	800441a <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	001a      	movs	r2, r3
 800433c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	18d3      	adds	r3, r2, r3
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29a      	uxth	r2, r3
 8004348:	2052      	movs	r0, #82	@ 0x52
 800434a:	183b      	adds	r3, r7, r0
 800434c:	49a2      	ldr	r1, [pc, #648]	@ (80045d8 <PCD_EP_ISR_Handler+0x6d8>)
 800434e:	400a      	ands	r2, r1
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	001a      	movs	r2, r3
 8004358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	18d3      	adds	r3, r2, r3
 8004360:	183a      	adds	r2, r7, r0
 8004362:	8812      	ldrh	r2, [r2, #0]
 8004364:	499d      	ldr	r1, [pc, #628]	@ (80045dc <PCD_EP_ISR_Handler+0x6dc>)
 8004366:	430a      	orrs	r2, r1
 8004368:	b292      	uxth	r2, r2
 800436a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	001a      	movs	r2, r3
 8004372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	18d3      	adds	r3, r2, r3
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	001a      	movs	r2, r3
 8004380:	2380      	movs	r3, #128	@ 0x80
 8004382:	01db      	lsls	r3, r3, #7
 8004384:	4013      	ands	r3, r2
 8004386:	d024      	beq.n	80043d2 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2250      	movs	r2, #80	@ 0x50
 800438e:	5a9b      	ldrh	r3, [r3, r2]
 8004390:	b29b      	uxth	r3, r3
 8004392:	001a      	movs	r2, r3
 8004394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	18d2      	adds	r2, r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	18d3      	adds	r3, r2, r3
 80043a2:	4a8f      	ldr	r2, [pc, #572]	@ (80045e0 <PCD_EP_ISR_Handler+0x6e0>)
 80043a4:	4694      	mov	ip, r2
 80043a6:	4463      	add	r3, ip
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	2450      	movs	r4, #80	@ 0x50
 80043ac:	193b      	adds	r3, r7, r4
 80043ae:	0592      	lsls	r2, r2, #22
 80043b0:	0d92      	lsrs	r2, r2, #22
 80043b2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02e      	beq.n	800441a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c2:	6959      	ldr	r1, [r3, #20]
 80043c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c6:	891a      	ldrh	r2, [r3, #8]
 80043c8:	193b      	adds	r3, r7, r4
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	f004 ffdd 	bl	800938a <USB_ReadPMA>
 80043d0:	e023      	b.n	800441a <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2250      	movs	r2, #80	@ 0x50
 80043d8:	5a9b      	ldrh	r3, [r3, r2]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	001a      	movs	r2, r3
 80043de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	18d2      	adds	r2, r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	18d3      	adds	r3, r2, r3
 80043ec:	4a79      	ldr	r2, [pc, #484]	@ (80045d4 <PCD_EP_ISR_Handler+0x6d4>)
 80043ee:	4694      	mov	ip, r2
 80043f0:	4463      	add	r3, ip
 80043f2:	881a      	ldrh	r2, [r3, #0]
 80043f4:	2450      	movs	r4, #80	@ 0x50
 80043f6:	193b      	adds	r3, r7, r4
 80043f8:	0592      	lsls	r2, r2, #22
 80043fa:	0d92      	lsrs	r2, r2, #22
 80043fc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80043fe:	193b      	adds	r3, r7, r4
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440c:	6959      	ldr	r1, [r3, #20]
 800440e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004410:	895a      	ldrh	r2, [r3, #10]
 8004412:	193b      	adds	r3, r7, r4
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	f004 ffb8 	bl	800938a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800441a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	2150      	movs	r1, #80	@ 0x50
 8004420:	187b      	adds	r3, r7, r1
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	18d2      	adds	r2, r2, r3
 8004426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004428:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800442a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	187b      	adds	r3, r7, r1
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	18d2      	adds	r2, r2, r3
 8004434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004436:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <PCD_EP_ISR_Handler+0x54c>
 8004440:	187b      	adds	r3, r7, r1
 8004442:	881a      	ldrh	r2, [r3, #0]
 8004444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	429a      	cmp	r2, r3
 800444a:	d207      	bcs.n	800445c <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800444c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444e:	781a      	ldrb	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	0011      	movs	r1, r2
 8004454:	0018      	movs	r0, r3
 8004456:	f006 ff52 	bl	800b2fe <HAL_PCD_DataOutStageCallback>
 800445a:	e006      	b.n	800446a <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004462:	0011      	movs	r1, r2
 8004464:	0018      	movs	r0, r3
 8004466:	f003 fcdd 	bl	8007e24 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800446a:	244c      	movs	r4, #76	@ 0x4c
 800446c:	193b      	adds	r3, r7, r4
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	2280      	movs	r2, #128	@ 0x80
 8004472:	4013      	ands	r3, r2
 8004474:	d100      	bne.n	8004478 <PCD_EP_ISR_Handler+0x578>
 8004476:	e133      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8004478:	204f      	movs	r0, #79	@ 0x4f
 800447a:	183b      	adds	r3, r7, r0
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	0013      	movs	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	189b      	adds	r3, r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	3310      	adds	r3, #16
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	001a      	movs	r2, r3
 8004494:	183b      	adds	r3, r7, r0
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	18d3      	adds	r3, r2, r3
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	2542      	movs	r5, #66	@ 0x42
 80044a2:	197b      	adds	r3, r7, r5
 80044a4:	494f      	ldr	r1, [pc, #316]	@ (80045e4 <PCD_EP_ISR_Handler+0x6e4>)
 80044a6:	400a      	ands	r2, r1
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	001a      	movs	r2, r3
 80044b0:	183b      	adds	r3, r7, r0
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	18d3      	adds	r3, r2, r3
 80044b8:	197a      	adds	r2, r7, r5
 80044ba:	8812      	ldrh	r2, [r2, #0]
 80044bc:	494a      	ldr	r1, [pc, #296]	@ (80045e8 <PCD_EP_ISR_Handler+0x6e8>)
 80044be:	430a      	orrs	r2, r1
 80044c0:	b292      	uxth	r2, r2
 80044c2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80044c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c6:	78db      	ldrb	r3, [r3, #3]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d000      	beq.n	80044ce <PCD_EP_ISR_Handler+0x5ce>
 80044cc:	e0af      	b.n	800462e <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 80044ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d0:	2200      	movs	r2, #0
 80044d2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80044d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d6:	7b1b      	ldrb	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d100      	bne.n	80044de <PCD_EP_ISR_Handler+0x5de>
 80044dc:	e09f      	b.n	800461e <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044de:	193b      	adds	r3, r7, r4
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	2240      	movs	r2, #64	@ 0x40
 80044e4:	4013      	ands	r3, r2
 80044e6:	d046      	beq.n	8004576 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d125      	bne.n	800453c <PCD_EP_ISR_Handler+0x63c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2250      	movs	r2, #80	@ 0x50
 80044fc:	5a9b      	ldrh	r3, [r3, r2]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	001a      	movs	r2, r3
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	189b      	adds	r3, r3, r2
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
 8004508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	00da      	lsls	r2, r3, #3
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	18d3      	adds	r3, r2, r3
 8004512:	4a33      	ldr	r2, [pc, #204]	@ (80045e0 <PCD_EP_ISR_Handler+0x6e0>)
 8004514:	4694      	mov	ip, r2
 8004516:	4463      	add	r3, ip
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	059b      	lsls	r3, r3, #22
 8004522:	0d9b      	lsrs	r3, r3, #22
 8004524:	b29a      	uxth	r2, r3
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	4a2d      	ldr	r2, [pc, #180]	@ (80045e8 <PCD_EP_ISR_Handler+0x6e8>)
 8004532:	4313      	orrs	r3, r2
 8004534:	b29a      	uxth	r2, r3
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	e070      	b.n	800461e <PCD_EP_ISR_Handler+0x71e>
 800453c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d16c      	bne.n	800461e <PCD_EP_ISR_Handler+0x71e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2250      	movs	r2, #80	@ 0x50
 8004550:	5a9b      	ldrh	r3, [r3, r2]
 8004552:	b29b      	uxth	r3, r3
 8004554:	001a      	movs	r2, r3
 8004556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004558:	189b      	adds	r3, r3, r2
 800455a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	00da      	lsls	r2, r3, #3
 8004562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	4a1e      	ldr	r2, [pc, #120]	@ (80045e0 <PCD_EP_ISR_Handler+0x6e0>)
 8004568:	4694      	mov	ip, r2
 800456a:	4463      	add	r3, ip
 800456c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	2200      	movs	r2, #0
 8004572:	801a      	strh	r2, [r3, #0]
 8004574:	e053      	b.n	800461e <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800457c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d133      	bne.n	80045ec <PCD_EP_ISR_Handler+0x6ec>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	637b      	str	r3, [r7, #52]	@ 0x34
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2250      	movs	r2, #80	@ 0x50
 8004590:	5a9b      	ldrh	r3, [r3, r2]
 8004592:	b29b      	uxth	r3, r3
 8004594:	001a      	movs	r2, r3
 8004596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004598:	189b      	adds	r3, r3, r2
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
 800459c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	00da      	lsls	r2, r3, #3
 80045a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a4:	18d3      	adds	r3, r2, r3
 80045a6:	4a0b      	ldr	r2, [pc, #44]	@ (80045d4 <PCD_EP_ISR_Handler+0x6d4>)
 80045a8:	4694      	mov	ip, r2
 80045aa:	4463      	add	r3, ip
 80045ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	059b      	lsls	r3, r3, #22
 80045b6:	0d9b      	lsrs	r3, r3, #22
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	4a08      	ldr	r2, [pc, #32]	@ (80045e8 <PCD_EP_ISR_Handler+0x6e8>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	801a      	strh	r2, [r3, #0]
 80045ce:	e026      	b.n	800461e <PCD_EP_ISR_Handler+0x71e>
 80045d0:	00000f8f 	.word	0x00000f8f
 80045d4:	00000406 	.word	0x00000406
 80045d8:	ffff8f8f 	.word	0xffff8f8f
 80045dc:	ffff80c0 	.word	0xffff80c0
 80045e0:	00000402 	.word	0x00000402
 80045e4:	ffff8f0f 	.word	0xffff8f0f
 80045e8:	ffff8000 	.word	0xffff8000
 80045ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d114      	bne.n	800461e <PCD_EP_ISR_Handler+0x71e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2250      	movs	r2, #80	@ 0x50
 80045fa:	5a9b      	ldrh	r3, [r3, r2]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	001a      	movs	r2, r3
 8004600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004602:	189b      	adds	r3, r3, r2
 8004604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	00da      	lsls	r2, r3, #3
 800460c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800460e:	18d3      	adds	r3, r2, r3
 8004610:	4a3b      	ldr	r2, [pc, #236]	@ (8004700 <PCD_EP_ISR_Handler+0x800>)
 8004612:	4694      	mov	ip, r2
 8004614:	4463      	add	r3, ip
 8004616:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461a:	2200      	movs	r2, #0
 800461c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800461e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	0011      	movs	r1, r2
 8004626:	0018      	movs	r0, r3
 8004628:	f006 fe8a 	bl	800b340 <HAL_PCD_DataInStageCallback>
 800462c:	e058      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800462e:	234c      	movs	r3, #76	@ 0x4c
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	881a      	ldrh	r2, [r3, #0]
 8004634:	2380      	movs	r3, #128	@ 0x80
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4013      	ands	r3, r2
 800463a:	d149      	bne.n	80046d0 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2250      	movs	r2, #80	@ 0x50
 8004642:	5a9b      	ldrh	r3, [r3, r2]
 8004644:	b29b      	uxth	r3, r3
 8004646:	001a      	movs	r2, r3
 8004648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	18d2      	adds	r2, r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	18d3      	adds	r3, r2, r3
 8004656:	4a2b      	ldr	r2, [pc, #172]	@ (8004704 <PCD_EP_ISR_Handler+0x804>)
 8004658:	4694      	mov	ip, r2
 800465a:	4463      	add	r3, ip
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	2140      	movs	r1, #64	@ 0x40
 8004660:	187b      	adds	r3, r7, r1
 8004662:	0592      	lsls	r2, r2, #22
 8004664:	0d92      	lsrs	r2, r2, #22
 8004666:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8004668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	187b      	adds	r3, r7, r1
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d907      	bls.n	8004684 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8004674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	187b      	adds	r3, r7, r1
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	1ad2      	subs	r2, r2, r3
 800467e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004680:	619a      	str	r2, [r3, #24]
 8004682:	e002      	b.n	800468a <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004686:	2200      	movs	r2, #0
 8004688:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800468a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d107      	bne.n	80046a2 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004694:	781a      	ldrb	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0011      	movs	r1, r2
 800469a:	0018      	movs	r0, r3
 800469c:	f006 fe50 	bl	800b340 <HAL_PCD_DataInStageCallback>
 80046a0:	e01e      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80046a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	2140      	movs	r1, #64	@ 0x40
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	18d2      	adds	r2, r2, r3
 80046ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80046b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b4:	69da      	ldr	r2, [r3, #28]
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	18d2      	adds	r2, r2, r3
 80046bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046be:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046c6:	0011      	movs	r1, r2
 80046c8:	0018      	movs	r0, r3
 80046ca:	f003 fbab 	bl	8007e24 <USB_EPStartXfer>
 80046ce:	e007      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80046d0:	234c      	movs	r3, #76	@ 0x4c
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	0018      	movs	r0, r3
 80046dc:	f000 f930 	bl	8004940 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2244      	movs	r2, #68	@ 0x44
 80046e6:	5a9b      	ldrh	r3, [r3, r2]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	b21b      	sxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	da01      	bge.n	80046f4 <PCD_EP_ISR_Handler+0x7f4>
 80046f0:	f7ff fc0c 	bl	8003f0c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	0018      	movs	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b016      	add	sp, #88	@ 0x58
 80046fc:	bdb0      	pop	{r4, r5, r7, pc}
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	00000406 	.word	0x00000406
 8004704:	00000402 	.word	0x00000402

08004708 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004708:	b590      	push	{r4, r7, lr}
 800470a:	b089      	sub	sp, #36	@ 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	1dbb      	adds	r3, r7, #6
 8004714:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004716:	1dbb      	adds	r3, r7, #6
 8004718:	881a      	ldrh	r2, [r3, #0]
 800471a:	2380      	movs	r3, #128	@ 0x80
 800471c:	01db      	lsls	r3, r3, #7
 800471e:	4013      	ands	r3, r2
 8004720:	d100      	bne.n	8004724 <HAL_PCD_EP_DB_Receive+0x1c>
 8004722:	e07d      	b.n	8004820 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2250      	movs	r2, #80	@ 0x50
 800472a:	5a9b      	ldrh	r3, [r3, r2]
 800472c:	b29b      	uxth	r3, r3
 800472e:	001a      	movs	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	18d2      	adds	r2, r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	18d3      	adds	r3, r2, r3
 800473e:	4a7a      	ldr	r2, [pc, #488]	@ (8004928 <HAL_PCD_EP_DB_Receive+0x220>)
 8004740:	4694      	mov	ip, r2
 8004742:	4463      	add	r3, ip
 8004744:	881a      	ldrh	r2, [r3, #0]
 8004746:	211a      	movs	r1, #26
 8004748:	187b      	adds	r3, r7, r1
 800474a:	0592      	lsls	r2, r2, #22
 800474c:	0d92      	lsrs	r2, r2, #22
 800474e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	187b      	adds	r3, r7, r1
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d307      	bcc.n	800476c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	699a      	ldr	r2, [r3, #24]
 8004760:	187b      	adds	r3, r7, r1
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	1ad2      	subs	r2, r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	619a      	str	r2, [r3, #24]
 800476a:	e002      	b.n	8004772 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2200      	movs	r2, #0
 8004770:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d121      	bne.n	80047be <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	001a      	movs	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	18d3      	adds	r3, r2, r3
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29a      	uxth	r2, r3
 800478c:	2018      	movs	r0, #24
 800478e:	183b      	adds	r3, r7, r0
 8004790:	4966      	ldr	r1, [pc, #408]	@ (800492c <HAL_PCD_EP_DB_Receive+0x224>)
 8004792:	400a      	ands	r2, r1
 8004794:	801a      	strh	r2, [r3, #0]
 8004796:	183b      	adds	r3, r7, r0
 8004798:	183a      	adds	r2, r7, r0
 800479a:	8812      	ldrh	r2, [r2, #0]
 800479c:	2180      	movs	r1, #128	@ 0x80
 800479e:	0189      	lsls	r1, r1, #6
 80047a0:	404a      	eors	r2, r1
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	001a      	movs	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	18d3      	adds	r3, r2, r3
 80047b2:	183a      	adds	r2, r7, r0
 80047b4:	8812      	ldrh	r2, [r2, #0]
 80047b6:	495e      	ldr	r1, [pc, #376]	@ (8004930 <HAL_PCD_EP_DB_Receive+0x228>)
 80047b8:	430a      	orrs	r2, r1
 80047ba:	b292      	uxth	r2, r2
 80047bc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047be:	1dbb      	adds	r3, r7, #6
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	2240      	movs	r2, #64	@ 0x40
 80047c4:	4013      	ands	r3, r2
 80047c6:	d01a      	beq.n	80047fe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	001a      	movs	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	18d3      	adds	r3, r2, r3
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	2016      	movs	r0, #22
 80047dc:	183b      	adds	r3, r7, r0
 80047de:	4955      	ldr	r1, [pc, #340]	@ (8004934 <HAL_PCD_EP_DB_Receive+0x22c>)
 80047e0:	400a      	ands	r2, r1
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	001a      	movs	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	18d3      	adds	r3, r2, r3
 80047f2:	183a      	adds	r2, r7, r0
 80047f4:	8812      	ldrh	r2, [r2, #0]
 80047f6:	4950      	ldr	r1, [pc, #320]	@ (8004938 <HAL_PCD_EP_DB_Receive+0x230>)
 80047f8:	430a      	orrs	r2, r1
 80047fa:	b292      	uxth	r2, r2
 80047fc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80047fe:	241a      	movs	r4, #26
 8004800:	193b      	adds	r3, r7, r4
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d100      	bne.n	800480a <HAL_PCD_EP_DB_Receive+0x102>
 8004808:	e086      	b.n	8004918 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6959      	ldr	r1, [r3, #20]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	891a      	ldrh	r2, [r3, #8]
 8004816:	193b      	adds	r3, r7, r4
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	f004 fdb6 	bl	800938a <USB_ReadPMA>
 800481e:	e07b      	b.n	8004918 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2250      	movs	r2, #80	@ 0x50
 8004826:	5a9b      	ldrh	r3, [r3, r2]
 8004828:	b29b      	uxth	r3, r3
 800482a:	001a      	movs	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	18d2      	adds	r2, r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	18d3      	adds	r3, r2, r3
 800483a:	4a40      	ldr	r2, [pc, #256]	@ (800493c <HAL_PCD_EP_DB_Receive+0x234>)
 800483c:	4694      	mov	ip, r2
 800483e:	4463      	add	r3, ip
 8004840:	881a      	ldrh	r2, [r3, #0]
 8004842:	211a      	movs	r1, #26
 8004844:	187b      	adds	r3, r7, r1
 8004846:	0592      	lsls	r2, r2, #22
 8004848:	0d92      	lsrs	r2, r2, #22
 800484a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	187b      	adds	r3, r7, r1
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d307      	bcc.n	8004868 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	187b      	adds	r3, r7, r1
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	1ad2      	subs	r2, r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	619a      	str	r2, [r3, #24]
 8004866:	e002      	b.n	800486e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d121      	bne.n	80048ba <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	001a      	movs	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	18d3      	adds	r3, r2, r3
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29a      	uxth	r2, r3
 8004888:	201e      	movs	r0, #30
 800488a:	183b      	adds	r3, r7, r0
 800488c:	4927      	ldr	r1, [pc, #156]	@ (800492c <HAL_PCD_EP_DB_Receive+0x224>)
 800488e:	400a      	ands	r2, r1
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	183b      	adds	r3, r7, r0
 8004894:	183a      	adds	r2, r7, r0
 8004896:	8812      	ldrh	r2, [r2, #0]
 8004898:	2180      	movs	r1, #128	@ 0x80
 800489a:	0189      	lsls	r1, r1, #6
 800489c:	404a      	eors	r2, r1
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	001a      	movs	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	18d3      	adds	r3, r2, r3
 80048ae:	183a      	adds	r2, r7, r0
 80048b0:	8812      	ldrh	r2, [r2, #0]
 80048b2:	491f      	ldr	r1, [pc, #124]	@ (8004930 <HAL_PCD_EP_DB_Receive+0x228>)
 80048b4:	430a      	orrs	r2, r1
 80048b6:	b292      	uxth	r2, r2
 80048b8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80048ba:	1dbb      	adds	r3, r7, #6
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	2240      	movs	r2, #64	@ 0x40
 80048c0:	4013      	ands	r3, r2
 80048c2:	d11a      	bne.n	80048fa <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	001a      	movs	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	18d3      	adds	r3, r2, r3
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	201c      	movs	r0, #28
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	4916      	ldr	r1, [pc, #88]	@ (8004934 <HAL_PCD_EP_DB_Receive+0x22c>)
 80048dc:	400a      	ands	r2, r1
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	001a      	movs	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	18d3      	adds	r3, r2, r3
 80048ee:	183a      	adds	r2, r7, r0
 80048f0:	8812      	ldrh	r2, [r2, #0]
 80048f2:	4911      	ldr	r1, [pc, #68]	@ (8004938 <HAL_PCD_EP_DB_Receive+0x230>)
 80048f4:	430a      	orrs	r2, r1
 80048f6:	b292      	uxth	r2, r2
 80048f8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80048fa:	241a      	movs	r4, #26
 80048fc:	193b      	adds	r3, r7, r4
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6959      	ldr	r1, [r3, #20]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	895a      	ldrh	r2, [r3, #10]
 8004910:	193b      	adds	r3, r7, r4
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	f004 fd39 	bl	800938a <USB_ReadPMA>
    }
  }

  return count;
 8004918:	231a      	movs	r3, #26
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	881b      	ldrh	r3, [r3, #0]
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b009      	add	sp, #36	@ 0x24
 8004924:	bd90      	pop	{r4, r7, pc}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	00000402 	.word	0x00000402
 800492c:	ffffbf8f 	.word	0xffffbf8f
 8004930:	ffff8080 	.word	0xffff8080
 8004934:	ffff8f8f 	.word	0xffff8f8f
 8004938:	ffff80c0 	.word	0xffff80c0
 800493c:	00000406 	.word	0x00000406

08004940 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b0a4      	sub	sp, #144	@ 0x90
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	1dbb      	adds	r3, r7, #6
 800494c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800494e:	1dbb      	adds	r3, r7, #6
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	2240      	movs	r2, #64	@ 0x40
 8004954:	4013      	ands	r3, r2
 8004956:	d100      	bne.n	800495a <HAL_PCD_EP_DB_Transmit+0x1a>
 8004958:	e1e4      	b.n	8004d24 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2250      	movs	r2, #80	@ 0x50
 8004960:	5a9b      	ldrh	r3, [r3, r2]
 8004962:	b29b      	uxth	r3, r3
 8004964:	001a      	movs	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	18d2      	adds	r2, r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	18d3      	adds	r3, r2, r3
 8004974:	4ad0      	ldr	r2, [pc, #832]	@ (8004cb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004976:	4694      	mov	ip, r2
 8004978:	4463      	add	r3, ip
 800497a:	881a      	ldrh	r2, [r3, #0]
 800497c:	2188      	movs	r1, #136	@ 0x88
 800497e:	187b      	adds	r3, r7, r1
 8004980:	0592      	lsls	r2, r2, #22
 8004982:	0d92      	lsrs	r2, r2, #22
 8004984:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	187b      	adds	r3, r7, r1
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d907      	bls.n	80049a2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	187b      	adds	r3, r7, r1
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	1ad2      	subs	r2, r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	619a      	str	r2, [r3, #24]
 80049a0:	e002      	b.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d000      	beq.n	80049b2 <HAL_PCD_EP_DB_Transmit+0x72>
 80049b0:	e0b5      	b.n	8004b1e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d125      	bne.n	8004a06 <HAL_PCD_EP_DB_Transmit+0xc6>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2250      	movs	r2, #80	@ 0x50
 80049c6:	5a9b      	ldrh	r3, [r3, r2]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	001a      	movs	r2, r3
 80049cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	00da      	lsls	r2, r3, #3
 80049d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049da:	18d3      	adds	r3, r2, r3
 80049dc:	4ab6      	ldr	r2, [pc, #728]	@ (8004cb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 80049de:	4694      	mov	ip, r2
 80049e0:	4463      	add	r3, ip
 80049e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	059b      	lsls	r3, r3, #22
 80049ec:	0d9b      	lsrs	r3, r3, #22
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	4ab0      	ldr	r2, [pc, #704]	@ (8004cbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	e01b      	b.n	8004a3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d117      	bne.n	8004a3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2250      	movs	r2, #80	@ 0x50
 8004a1a:	5a9b      	ldrh	r3, [r3, r2]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	001a      	movs	r2, r3
 8004a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	00da      	lsls	r2, r3, #3
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	4aa1      	ldr	r2, [pc, #644]	@ (8004cb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004a32:	4694      	mov	ip, r2
 8004a34:	4463      	add	r3, ip
 8004a36:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d125      	bne.n	8004a98 <HAL_PCD_EP_DB_Transmit+0x158>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2250      	movs	r2, #80	@ 0x50
 8004a58:	5a9b      	ldrh	r3, [r3, r2]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	001a      	movs	r2, r3
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	00da      	lsls	r2, r3, #3
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	18d3      	adds	r3, r2, r3
 8004a6e:	4a94      	ldr	r2, [pc, #592]	@ (8004cc0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8004a70:	4694      	mov	ip, r2
 8004a72:	4463      	add	r3, ip
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	059b      	lsls	r3, r3, #22
 8004a7e:	0d9b      	lsrs	r3, r3, #22
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	801a      	strh	r2, [r3, #0]
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	4a8b      	ldr	r2, [pc, #556]	@ (8004cbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	801a      	strh	r2, [r3, #0]
 8004a96:	e018      	b.n	8004aca <HAL_PCD_EP_DB_Transmit+0x18a>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d114      	bne.n	8004aca <HAL_PCD_EP_DB_Transmit+0x18a>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2250      	movs	r2, #80	@ 0x50
 8004aa6:	5a9b      	ldrh	r3, [r3, r2]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	001a      	movs	r2, r3
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	00da      	lsls	r2, r3, #3
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	18d3      	adds	r3, r2, r3
 8004abc:	4a80      	ldr	r2, [pc, #512]	@ (8004cc0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8004abe:	4694      	mov	ip, r2
 8004ac0:	4463      	add	r3, ip
 8004ac2:	623b      	str	r3, [r7, #32]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	0011      	movs	r1, r2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f006 fc34 	bl	800b340 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ad8:	1dbb      	adds	r3, r7, #6
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	2380      	movs	r3, #128	@ 0x80
 8004ade:	01db      	lsls	r3, r3, #7
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d100      	bne.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004ae4:	e308      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	001a      	movs	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	18d3      	adds	r3, r2, r3
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	2016      	movs	r0, #22
 8004afa:	183b      	adds	r3, r7, r0
 8004afc:	4971      	ldr	r1, [pc, #452]	@ (8004cc4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8004afe:	400a      	ands	r2, r1
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	001a      	movs	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	18d3      	adds	r3, r2, r3
 8004b10:	183a      	adds	r2, r7, r0
 8004b12:	8812      	ldrh	r2, [r2, #0]
 8004b14:	496c      	ldr	r1, [pc, #432]	@ (8004cc8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8004b16:	430a      	orrs	r2, r1
 8004b18:	b292      	uxth	r2, r2
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	e2ec      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b1e:	1dbb      	adds	r3, r7, #6
 8004b20:	881a      	ldrh	r2, [r3, #0]
 8004b22:	2380      	movs	r3, #128	@ 0x80
 8004b24:	01db      	lsls	r3, r3, #7
 8004b26:	4013      	ands	r3, r2
 8004b28:	d01a      	beq.n	8004b60 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	001a      	movs	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	18d3      	adds	r3, r2, r3
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	208a      	movs	r0, #138	@ 0x8a
 8004b3e:	183b      	adds	r3, r7, r0
 8004b40:	4960      	ldr	r1, [pc, #384]	@ (8004cc4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8004b42:	400a      	ands	r2, r1
 8004b44:	801a      	strh	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	001a      	movs	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	183a      	adds	r2, r7, r0
 8004b56:	8812      	ldrh	r2, [r2, #0]
 8004b58:	495b      	ldr	r1, [pc, #364]	@ (8004cc8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2224      	movs	r2, #36	@ 0x24
 8004b64:	5c9b      	ldrb	r3, [r3, r2]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d000      	beq.n	8004b6c <HAL_PCD_EP_DB_Transmit+0x22c>
 8004b6a:	e2c5      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	2188      	movs	r1, #136	@ 0x88
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	18d2      	adds	r2, r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	187b      	adds	r3, r7, r1
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	18d2      	adds	r2, r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6a1a      	ldr	r2, [r3, #32]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d30c      	bcc.n	8004bb0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	218c      	movs	r1, #140	@ 0x8c
 8004b9c:	187a      	adds	r2, r7, r1
 8004b9e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	6a1a      	ldr	r2, [r3, #32]
 8004ba4:	187b      	adds	r3, r7, r1
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	1ad2      	subs	r2, r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	621a      	str	r2, [r3, #32]
 8004bae:	e01a      	b.n	8004be6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004bb8:	2388      	movs	r3, #136	@ 0x88
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	228c      	movs	r2, #140	@ 0x8c
 8004bc0:	18ba      	adds	r2, r7, r2
 8004bc2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2224      	movs	r2, #36	@ 0x24
 8004bc8:	2100      	movs	r1, #0
 8004bca:	5499      	strb	r1, [r3, r2]
 8004bcc:	e00b      	b.n	8004be6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2224      	movs	r2, #36	@ 0x24
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	228c      	movs	r2, #140	@ 0x8c
 8004bdc:	18ba      	adds	r2, r7, r2
 8004bde:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2200      	movs	r2, #0
 8004be4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	785b      	ldrb	r3, [r3, #1]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d000      	beq.n	8004bf0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8004bee:	e06d      	b.n	8004ccc <HAL_PCD_EP_DB_Transmit+0x38c>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2250      	movs	r2, #80	@ 0x50
 8004bfc:	5a9b      	ldrh	r3, [r3, r2]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	001a      	movs	r2, r3
 8004c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c04:	189b      	adds	r3, r3, r2
 8004c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	00da      	lsls	r2, r3, #3
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c10:	18d3      	adds	r3, r2, r3
 8004c12:	4a29      	ldr	r2, [pc, #164]	@ (8004cb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004c14:	4694      	mov	ip, r2
 8004c16:	4463      	add	r3, ip
 8004c18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	059b      	lsls	r3, r3, #22
 8004c22:	0d9b      	lsrs	r3, r3, #22
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	801a      	strh	r2, [r3, #0]
 8004c2a:	238c      	movs	r3, #140	@ 0x8c
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d108      	bne.n	8004c46 <HAL_PCD_EP_DB_Transmit+0x306>
 8004c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4a20      	ldr	r2, [pc, #128]	@ (8004cbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	801a      	strh	r2, [r3, #0]
 8004c44:	e061      	b.n	8004d0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004c46:	228c      	movs	r2, #140	@ 0x8c
 8004c48:	18bb      	adds	r3, r7, r2
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c4e:	d817      	bhi.n	8004c80 <HAL_PCD_EP_DB_Transmit+0x340>
 8004c50:	18bb      	adds	r3, r7, r2
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c58:	18bb      	adds	r3, r7, r2
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d002      	beq.n	8004c68 <HAL_PCD_EP_DB_Transmit+0x328>
 8004c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c64:	3301      	adds	r3, #1
 8004c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	029b      	lsls	r3, r3, #10
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	e044      	b.n	8004d0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004c80:	228c      	movs	r2, #140	@ 0x8c
 8004c82:	18bb      	adds	r3, r7, r2
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c8a:	18bb      	adds	r3, r7, r2
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	221f      	movs	r2, #31
 8004c90:	4013      	ands	r3, r2
 8004c92:	d102      	bne.n	8004c9a <HAL_PCD_EP_DB_Transmit+0x35a>
 8004c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c96:	3b01      	subs	r3, #1
 8004c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	029b      	lsls	r3, r3, #10
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	4a03      	ldr	r2, [pc, #12]	@ (8004cbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	e028      	b.n	8004d0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004cb8:	00000402 	.word	0x00000402
 8004cbc:	ffff8000 	.word	0xffff8000
 8004cc0:	00000406 	.word	0x00000406
 8004cc4:	ffff8f8f 	.word	0xffff8f8f
 8004cc8:	ffffc080 	.word	0xffffc080
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d11a      	bne.n	8004d0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2250      	movs	r2, #80	@ 0x50
 8004ce0:	5a9b      	ldrh	r3, [r3, r2]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	001a      	movs	r2, r3
 8004ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	00da      	lsls	r2, r3, #3
 8004cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cf4:	18d3      	adds	r3, r2, r3
 8004cf6:	4ad9      	ldr	r2, [pc, #868]	@ (800505c <HAL_PCD_EP_DB_Transmit+0x71c>)
 8004cf8:	4694      	mov	ip, r2
 8004cfa:	4463      	add	r3, ip
 8004cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cfe:	238c      	movs	r3, #140	@ 0x8c
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d08:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6959      	ldr	r1, [r3, #20]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	891a      	ldrh	r2, [r3, #8]
 8004d16:	238c      	movs	r3, #140	@ 0x8c
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f004 faeb 	bl	80092f8 <USB_WritePMA>
 8004d22:	e1e9      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2250      	movs	r2, #80	@ 0x50
 8004d2a:	5a9b      	ldrh	r3, [r3, r2]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	001a      	movs	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	18d2      	adds	r2, r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	18d3      	adds	r3, r2, r3
 8004d3e:	4ac8      	ldr	r2, [pc, #800]	@ (8005060 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004d40:	4694      	mov	ip, r2
 8004d42:	4463      	add	r3, ip
 8004d44:	881a      	ldrh	r2, [r3, #0]
 8004d46:	2188      	movs	r1, #136	@ 0x88
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	0592      	lsls	r2, r2, #22
 8004d4c:	0d92      	lsrs	r2, r2, #22
 8004d4e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	187b      	adds	r3, r7, r1
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d307      	bcc.n	8004d6c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	699a      	ldr	r2, [r3, #24]
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	619a      	str	r2, [r3, #24]
 8004d6a:	e002      	b.n	8004d72 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d000      	beq.n	8004d7c <HAL_PCD_EP_DB_Transmit+0x43c>
 8004d7a:	e0bb      	b.n	8004ef4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d125      	bne.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x490>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2250      	movs	r2, #80	@ 0x50
 8004d90:	5a9b      	ldrh	r3, [r3, r2]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	001a      	movs	r2, r3
 8004d96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d98:	189b      	adds	r3, r3, r2
 8004d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	00da      	lsls	r2, r3, #3
 8004da2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004da4:	18d3      	adds	r3, r2, r3
 8004da6:	4aad      	ldr	r2, [pc, #692]	@ (800505c <HAL_PCD_EP_DB_Transmit+0x71c>)
 8004da8:	4694      	mov	ip, r2
 8004daa:	4463      	add	r3, ip
 8004dac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	059b      	lsls	r3, r3, #22
 8004db6:	0d9b      	lsrs	r3, r3, #22
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dbc:	801a      	strh	r2, [r3, #0]
 8004dbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4aa7      	ldr	r2, [pc, #668]	@ (8005064 <HAL_PCD_EP_DB_Transmit+0x724>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	e01b      	b.n	8004e08 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d117      	bne.n	8004e08 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2250      	movs	r2, #80	@ 0x50
 8004de4:	5a9b      	ldrh	r3, [r3, r2]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	001a      	movs	r2, r3
 8004dea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dec:	189b      	adds	r3, r3, r2
 8004dee:	667b      	str	r3, [r7, #100]	@ 0x64
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	00da      	lsls	r2, r3, #3
 8004df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004df8:	18d3      	adds	r3, r2, r3
 8004dfa:	4a98      	ldr	r2, [pc, #608]	@ (800505c <HAL_PCD_EP_DB_Transmit+0x71c>)
 8004dfc:	4694      	mov	ip, r2
 8004dfe:	4463      	add	r3, ip
 8004e00:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e04:	2200      	movs	r2, #0
 8004e06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d12b      	bne.n	8004e6e <HAL_PCD_EP_DB_Transmit+0x52e>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2250      	movs	r2, #80	@ 0x50
 8004e22:	5a9b      	ldrh	r3, [r3, r2]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	001a      	movs	r2, r3
 8004e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	00da      	lsls	r2, r3, #3
 8004e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e36:	18d3      	adds	r3, r2, r3
 8004e38:	4a89      	ldr	r2, [pc, #548]	@ (8005060 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004e3a:	4694      	mov	ip, r2
 8004e3c:	4463      	add	r3, ip
 8004e3e:	2184      	movs	r1, #132	@ 0x84
 8004e40:	187a      	adds	r2, r7, r1
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	187b      	adds	r3, r7, r1
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	059b      	lsls	r3, r3, #22
 8004e4e:	0d9b      	lsrs	r3, r3, #22
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	187b      	adds	r3, r7, r1
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4a80      	ldr	r2, [pc, #512]	@ (8005064 <HAL_PCD_EP_DB_Transmit+0x724>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	187b      	adds	r3, r7, r1
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	801a      	strh	r2, [r3, #0]
 8004e6c:	e018      	b.n	8004ea0 <HAL_PCD_EP_DB_Transmit+0x560>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	785b      	ldrb	r3, [r3, #1]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d114      	bne.n	8004ea0 <HAL_PCD_EP_DB_Transmit+0x560>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2250      	movs	r2, #80	@ 0x50
 8004e7c:	5a9b      	ldrh	r3, [r3, r2]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	001a      	movs	r2, r3
 8004e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e84:	189b      	adds	r3, r3, r2
 8004e86:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	00da      	lsls	r2, r3, #3
 8004e8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e90:	18d3      	adds	r3, r2, r3
 8004e92:	4a73      	ldr	r2, [pc, #460]	@ (8005060 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004e94:	4694      	mov	ip, r2
 8004e96:	4463      	add	r3, ip
 8004e98:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	781a      	ldrb	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	0011      	movs	r1, r2
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f006 fa49 	bl	800b340 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004eae:	1dbb      	adds	r3, r7, #6
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	2380      	movs	r3, #128	@ 0x80
 8004eb4:	01db      	lsls	r3, r3, #7
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d000      	beq.n	8004ebc <HAL_PCD_EP_DB_Transmit+0x57c>
 8004eba:	e11d      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	001a      	movs	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	18d3      	adds	r3, r2, r3
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	2082      	movs	r0, #130	@ 0x82
 8004ed0:	183b      	adds	r3, r7, r0
 8004ed2:	4965      	ldr	r1, [pc, #404]	@ (8005068 <HAL_PCD_EP_DB_Transmit+0x728>)
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	001a      	movs	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	18d3      	adds	r3, r2, r3
 8004ee6:	183a      	adds	r2, r7, r0
 8004ee8:	8812      	ldrh	r2, [r2, #0]
 8004eea:	4960      	ldr	r1, [pc, #384]	@ (800506c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8004eec:	430a      	orrs	r2, r1
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	e101      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ef4:	1dbb      	adds	r3, r7, #6
 8004ef6:	881a      	ldrh	r2, [r3, #0]
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	01db      	lsls	r3, r3, #7
 8004efc:	4013      	ands	r3, r2
 8004efe:	d11a      	bne.n	8004f36 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	001a      	movs	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	18d3      	adds	r3, r2, r3
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	204e      	movs	r0, #78	@ 0x4e
 8004f14:	183b      	adds	r3, r7, r0
 8004f16:	4954      	ldr	r1, [pc, #336]	@ (8005068 <HAL_PCD_EP_DB_Transmit+0x728>)
 8004f18:	400a      	ands	r2, r1
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	001a      	movs	r2, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	18d3      	adds	r3, r2, r3
 8004f2a:	183a      	adds	r2, r7, r0
 8004f2c:	8812      	ldrh	r2, [r2, #0]
 8004f2e:	494f      	ldr	r1, [pc, #316]	@ (800506c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8004f30:	430a      	orrs	r2, r1
 8004f32:	b292      	uxth	r2, r2
 8004f34:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2224      	movs	r2, #36	@ 0x24
 8004f3a:	5c9b      	ldrb	r3, [r3, r2]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d000      	beq.n	8004f42 <HAL_PCD_EP_DB_Transmit+0x602>
 8004f40:	e0da      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	2188      	movs	r1, #136	@ 0x88
 8004f48:	187b      	adds	r3, r7, r1
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	18d2      	adds	r2, r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	187b      	adds	r3, r7, r1
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	18d2      	adds	r2, r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d30c      	bcc.n	8004f86 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	218c      	movs	r1, #140	@ 0x8c
 8004f72:	187a      	adds	r2, r7, r1
 8004f74:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6a1a      	ldr	r2, [r3, #32]
 8004f7a:	187b      	adds	r3, r7, r1
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	621a      	str	r2, [r3, #32]
 8004f84:	e01a      	b.n	8004fbc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8004f8e:	2388      	movs	r3, #136	@ 0x88
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	228c      	movs	r2, #140	@ 0x8c
 8004f96:	18ba      	adds	r2, r7, r2
 8004f98:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2224      	movs	r2, #36	@ 0x24
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	5499      	strb	r1, [r3, r2]
 8004fa2:	e00b      	b.n	8004fbc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	228c      	movs	r2, #140	@ 0x8c
 8004faa:	18ba      	adds	r2, r7, r2
 8004fac:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2224      	movs	r2, #36	@ 0x24
 8004fb8:	2100      	movs	r1, #0
 8004fba:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d000      	beq.n	8004fcc <HAL_PCD_EP_DB_Transmit+0x68c>
 8004fca:	e06d      	b.n	80050a8 <HAL_PCD_EP_DB_Transmit+0x768>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2250      	movs	r2, #80	@ 0x50
 8004fd8:	5a9b      	ldrh	r3, [r3, r2]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	001a      	movs	r2, r3
 8004fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fe0:	189b      	adds	r3, r3, r2
 8004fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	00da      	lsls	r2, r3, #3
 8004fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fec:	18d3      	adds	r3, r2, r3
 8004fee:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004ff0:	4694      	mov	ip, r2
 8004ff2:	4463      	add	r3, ip
 8004ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	059b      	lsls	r3, r3, #22
 8004ffe:	0d9b      	lsrs	r3, r3, #22
 8005000:	b29a      	uxth	r2, r3
 8005002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	238c      	movs	r3, #140	@ 0x8c
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d108      	bne.n	8005022 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8005010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	4a13      	ldr	r2, [pc, #76]	@ (8005064 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005018:	4313      	orrs	r3, r2
 800501a:	b29a      	uxth	r2, r3
 800501c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800501e:	801a      	strh	r2, [r3, #0]
 8005020:	e05e      	b.n	80050e0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005022:	228c      	movs	r2, #140	@ 0x8c
 8005024:	18bb      	adds	r3, r7, r2
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b3e      	cmp	r3, #62	@ 0x3e
 800502a:	d821      	bhi.n	8005070 <HAL_PCD_EP_DB_Transmit+0x730>
 800502c:	18bb      	adds	r3, r7, r2
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	085b      	lsrs	r3, r3, #1
 8005032:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005034:	18bb      	adds	r3, r7, r2
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2201      	movs	r2, #1
 800503a:	4013      	ands	r3, r2
 800503c:	d002      	beq.n	8005044 <HAL_PCD_EP_DB_Transmit+0x704>
 800503e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005040:	3301      	adds	r3, #1
 8005042:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29a      	uxth	r2, r3
 800504a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800504c:	b29b      	uxth	r3, r3
 800504e:	029b      	lsls	r3, r3, #10
 8005050:	b29b      	uxth	r3, r3
 8005052:	4313      	orrs	r3, r2
 8005054:	b29a      	uxth	r2, r3
 8005056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e041      	b.n	80050e0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800505c:	00000402 	.word	0x00000402
 8005060:	00000406 	.word	0x00000406
 8005064:	ffff8000 	.word	0xffff8000
 8005068:	ffff8f8f 	.word	0xffff8f8f
 800506c:	ffffc080 	.word	0xffffc080
 8005070:	228c      	movs	r2, #140	@ 0x8c
 8005072:	18bb      	adds	r3, r7, r2
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	66bb      	str	r3, [r7, #104]	@ 0x68
 800507a:	18bb      	adds	r3, r7, r2
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	221f      	movs	r2, #31
 8005080:	4013      	ands	r3, r2
 8005082:	d102      	bne.n	800508a <HAL_PCD_EP_DB_Transmit+0x74a>
 8005084:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005086:	3b01      	subs	r3, #1
 8005088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800508a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29a      	uxth	r2, r3
 8005090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005092:	b29b      	uxth	r3, r3
 8005094:	029b      	lsls	r3, r3, #10
 8005096:	b29b      	uxth	r3, r3
 8005098:	4313      	orrs	r3, r2
 800509a:	b29b      	uxth	r3, r3
 800509c:	4a2c      	ldr	r2, [pc, #176]	@ (8005150 <HAL_PCD_EP_DB_Transmit+0x810>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	e01b      	b.n	80050e0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d117      	bne.n	80050e0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2250      	movs	r2, #80	@ 0x50
 80050b6:	5a9b      	ldrh	r3, [r3, r2]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	001a      	movs	r2, r3
 80050bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	00da      	lsls	r2, r3, #3
 80050c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ca:	18d3      	adds	r3, r2, r3
 80050cc:	4a21      	ldr	r2, [pc, #132]	@ (8005154 <HAL_PCD_EP_DB_Transmit+0x814>)
 80050ce:	4694      	mov	ip, r2
 80050d0:	4463      	add	r3, ip
 80050d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050d4:	238c      	movs	r3, #140	@ 0x8c
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	b29a      	uxth	r2, r3
 80050dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6959      	ldr	r1, [r3, #20]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	895a      	ldrh	r2, [r3, #10]
 80050ec:	238c      	movs	r3, #140	@ 0x8c
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f004 f900 	bl	80092f8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	001a      	movs	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	18d3      	adds	r3, r2, r3
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29a      	uxth	r2, r3
 800510a:	2014      	movs	r0, #20
 800510c:	183b      	adds	r3, r7, r0
 800510e:	4912      	ldr	r1, [pc, #72]	@ (8005158 <HAL_PCD_EP_DB_Transmit+0x818>)
 8005110:	400a      	ands	r2, r1
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	183b      	adds	r3, r7, r0
 8005116:	183a      	adds	r2, r7, r0
 8005118:	8812      	ldrh	r2, [r2, #0]
 800511a:	2110      	movs	r1, #16
 800511c:	404a      	eors	r2, r1
 800511e:	801a      	strh	r2, [r3, #0]
 8005120:	183b      	adds	r3, r7, r0
 8005122:	183a      	adds	r2, r7, r0
 8005124:	8812      	ldrh	r2, [r2, #0]
 8005126:	2120      	movs	r1, #32
 8005128:	404a      	eors	r2, r1
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	001a      	movs	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	18d3      	adds	r3, r2, r3
 800513a:	183a      	adds	r2, r7, r0
 800513c:	8812      	ldrh	r2, [r2, #0]
 800513e:	4907      	ldr	r1, [pc, #28]	@ (800515c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8005140:	430a      	orrs	r2, r1
 8005142:	b292      	uxth	r2, r2
 8005144:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b024      	add	sp, #144	@ 0x90
 800514e:	bd80      	pop	{r7, pc}
 8005150:	ffff8000 	.word	0xffff8000
 8005154:	00000406 	.word	0x00000406
 8005158:	ffff8fbf 	.word	0xffff8fbf
 800515c:	ffff8080 	.word	0xffff8080

08005160 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	0008      	movs	r0, r1
 800516a:	0011      	movs	r1, r2
 800516c:	607b      	str	r3, [r7, #4]
 800516e:	240a      	movs	r4, #10
 8005170:	193b      	adds	r3, r7, r4
 8005172:	1c02      	adds	r2, r0, #0
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	2308      	movs	r3, #8
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	1c0a      	adds	r2, r1, #0
 800517c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800517e:	0021      	movs	r1, r4
 8005180:	187b      	adds	r3, r7, r1
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	2280      	movs	r2, #128	@ 0x80
 8005186:	4013      	ands	r3, r2
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00c      	beq.n	80051a8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800518e:	187b      	adds	r3, r7, r1
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	2207      	movs	r2, #7
 8005194:	401a      	ands	r2, r3
 8005196:	0013      	movs	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	189b      	adds	r3, r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	3310      	adds	r3, #16
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	18d3      	adds	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e00b      	b.n	80051c0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051a8:	230a      	movs	r3, #10
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	881a      	ldrh	r2, [r3, #0]
 80051ae:	0013      	movs	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	3351      	adds	r3, #81	@ 0x51
 80051b8:	33ff      	adds	r3, #255	@ 0xff
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	18d3      	adds	r3, r2, r3
 80051be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80051c0:	2308      	movs	r3, #8
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d107      	bne.n	80051da <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	80da      	strh	r2, [r3, #6]
 80051d8:	e00b      	b.n	80051f2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2201      	movs	r2, #1
 80051de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	0c1b      	lsrs	r3, r3, #16
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b007      	add	sp, #28
 80051fa:	bd90      	pop	{r4, r7, pc}

080051fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	23b4      	movs	r3, #180	@ 0xb4
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	2101      	movs	r1, #1
 8005212:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	23b2      	movs	r3, #178	@ 0xb2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	2100      	movs	r1, #0
 800521c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2254      	movs	r2, #84	@ 0x54
 8005222:	5a9b      	ldrh	r3, [r3, r2]
 8005224:	b29b      	uxth	r3, r3
 8005226:	2201      	movs	r2, #1
 8005228:	4313      	orrs	r3, r2
 800522a:	b299      	uxth	r1, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2254      	movs	r2, #84	@ 0x54
 8005230:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2254      	movs	r2, #84	@ 0x54
 8005236:	5a9b      	ldrh	r3, [r3, r2]
 8005238:	b29b      	uxth	r3, r3
 800523a:	2202      	movs	r2, #2
 800523c:	4313      	orrs	r3, r2
 800523e:	b299      	uxth	r1, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2254      	movs	r2, #84	@ 0x54
 8005244:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	0018      	movs	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	b004      	add	sp, #16
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	000a      	movs	r2, r1
 800525a:	1cfb      	adds	r3, r7, #3
 800525c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800525e:	46c0      	nop			@ (mov r8, r8)
 8005260:	46bd      	mov	sp, r7
 8005262:	b002      	add	sp, #8
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f000 fd06 	bl	8005c88 <HAL_RCC_OscConfig+0xa20>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d025      	beq.n	80052d0 <HAL_RCC_OscConfig+0x68>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	4013      	ands	r3, r2
 800528c:	d120      	bne.n	80052d0 <HAL_RCC_OscConfig+0x68>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2202      	movs	r2, #2
 8005294:	4013      	ands	r3, r2
 8005296:	d11b      	bne.n	80052d0 <HAL_RCC_OscConfig+0x68>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2208      	movs	r2, #8
 800529e:	4013      	ands	r3, r2
 80052a0:	d116      	bne.n	80052d0 <HAL_RCC_OscConfig+0x68>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2204      	movs	r2, #4
 80052a8:	4013      	ands	r3, r2
 80052aa:	d111      	bne.n	80052d0 <HAL_RCC_OscConfig+0x68>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2210      	movs	r2, #16
 80052b2:	4013      	ands	r3, r2
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x68>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2220      	movs	r2, #32
 80052bc:	4013      	ands	r3, r2
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_OscConfig+0x68>
 80052c0:	2338      	movs	r3, #56	@ 0x38
 80052c2:	33ff      	adds	r3, #255	@ 0xff
 80052c4:	001a      	movs	r2, r3
 80052c6:	4bc4      	ldr	r3, [pc, #784]	@ (80055d8 <HAL_RCC_OscConfig+0x370>)
 80052c8:	0011      	movs	r1, r2
 80052ca:	0018      	movs	r0, r3
 80052cc:	f7fb fc4a 	bl	8000b64 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2201      	movs	r2, #1
 80052d6:	4013      	ands	r3, r2
 80052d8:	d100      	bne.n	80052dc <HAL_RCC_OscConfig+0x74>
 80052da:	e0a4      	b.n	8005426 <HAL_RCC_OscConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <HAL_RCC_OscConfig+0x9c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d00b      	beq.n	8005304 <HAL_RCC_OscConfig+0x9c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b05      	cmp	r3, #5
 80052f2:	d007      	beq.n	8005304 <HAL_RCC_OscConfig+0x9c>
 80052f4:	233e      	movs	r3, #62	@ 0x3e
 80052f6:	33ff      	adds	r3, #255	@ 0xff
 80052f8:	001a      	movs	r2, r3
 80052fa:	4bb7      	ldr	r3, [pc, #732]	@ (80055d8 <HAL_RCC_OscConfig+0x370>)
 80052fc:	0011      	movs	r1, r2
 80052fe:	0018      	movs	r0, r3
 8005300:	f7fb fc30 	bl	8000b64 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005304:	4bb5      	ldr	r3, [pc, #724]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	220c      	movs	r2, #12
 800530a:	4013      	ands	r3, r2
 800530c:	2b04      	cmp	r3, #4
 800530e:	d00e      	beq.n	800532e <HAL_RCC_OscConfig+0xc6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005310:	4bb2      	ldr	r3, [pc, #712]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	220c      	movs	r2, #12
 8005316:	4013      	ands	r3, r2
 8005318:	2b08      	cmp	r3, #8
 800531a:	d117      	bne.n	800534c <HAL_RCC_OscConfig+0xe4>
 800531c:	4baf      	ldr	r3, [pc, #700]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	23c0      	movs	r3, #192	@ 0xc0
 8005322:	025b      	lsls	r3, r3, #9
 8005324:	401a      	ands	r2, r3
 8005326:	2380      	movs	r3, #128	@ 0x80
 8005328:	025b      	lsls	r3, r3, #9
 800532a:	429a      	cmp	r2, r3
 800532c:	d10e      	bne.n	800534c <HAL_RCC_OscConfig+0xe4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532e:	4bab      	ldr	r3, [pc, #684]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	2380      	movs	r3, #128	@ 0x80
 8005334:	029b      	lsls	r3, r3, #10
 8005336:	4013      	ands	r3, r2
 8005338:	d100      	bne.n	800533c <HAL_RCC_OscConfig+0xd4>
 800533a:	e073      	b.n	8005424 <HAL_RCC_OscConfig+0x1bc>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d000      	beq.n	8005346 <HAL_RCC_OscConfig+0xde>
 8005344:	e06e      	b.n	8005424 <HAL_RCC_OscConfig+0x1bc>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f000 fc9e 	bl	8005c88 <HAL_RCC_OscConfig+0xa20>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d107      	bne.n	8005364 <HAL_RCC_OscConfig+0xfc>
 8005354:	4ba1      	ldr	r3, [pc, #644]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4ba0      	ldr	r3, [pc, #640]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800535a:	2180      	movs	r1, #128	@ 0x80
 800535c:	0249      	lsls	r1, r1, #9
 800535e:	430a      	orrs	r2, r1
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e02f      	b.n	80053c4 <HAL_RCC_OscConfig+0x15c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10c      	bne.n	8005386 <HAL_RCC_OscConfig+0x11e>
 800536c:	4b9b      	ldr	r3, [pc, #620]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b9a      	ldr	r3, [pc, #616]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005372:	499b      	ldr	r1, [pc, #620]	@ (80055e0 <HAL_RCC_OscConfig+0x378>)
 8005374:	400a      	ands	r2, r1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	4b98      	ldr	r3, [pc, #608]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b97      	ldr	r3, [pc, #604]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800537e:	4999      	ldr	r1, [pc, #612]	@ (80055e4 <HAL_RCC_OscConfig+0x37c>)
 8005380:	400a      	ands	r2, r1
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e01e      	b.n	80053c4 <HAL_RCC_OscConfig+0x15c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b05      	cmp	r3, #5
 800538c:	d10e      	bne.n	80053ac <HAL_RCC_OscConfig+0x144>
 800538e:	4b93      	ldr	r3, [pc, #588]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b92      	ldr	r3, [pc, #584]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005394:	2180      	movs	r1, #128	@ 0x80
 8005396:	02c9      	lsls	r1, r1, #11
 8005398:	430a      	orrs	r2, r1
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	4b8f      	ldr	r3, [pc, #572]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4b8e      	ldr	r3, [pc, #568]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80053a2:	2180      	movs	r1, #128	@ 0x80
 80053a4:	0249      	lsls	r1, r1, #9
 80053a6:	430a      	orrs	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e00b      	b.n	80053c4 <HAL_RCC_OscConfig+0x15c>
 80053ac:	4b8b      	ldr	r3, [pc, #556]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b8a      	ldr	r3, [pc, #552]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80053b2:	498b      	ldr	r1, [pc, #556]	@ (80055e0 <HAL_RCC_OscConfig+0x378>)
 80053b4:	400a      	ands	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	4b88      	ldr	r3, [pc, #544]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	4b87      	ldr	r3, [pc, #540]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80053be:	4989      	ldr	r1, [pc, #548]	@ (80055e4 <HAL_RCC_OscConfig+0x37c>)
 80053c0:	400a      	ands	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d015      	beq.n	80053f8 <HAL_RCC_OscConfig+0x190>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053cc:	f7fb fe38 	bl	8001040 <HAL_GetTick>
 80053d0:	0003      	movs	r3, r0
 80053d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d4:	e009      	b.n	80053ea <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d6:	f7fb fe33 	bl	8001040 <HAL_GetTick>
 80053da:	0002      	movs	r2, r0
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b64      	cmp	r3, #100	@ 0x64
 80053e2:	d902      	bls.n	80053ea <HAL_RCC_OscConfig+0x182>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	f000 fc4f 	bl	8005c88 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ea:	4b7c      	ldr	r3, [pc, #496]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	2380      	movs	r3, #128	@ 0x80
 80053f0:	029b      	lsls	r3, r3, #10
 80053f2:	4013      	ands	r3, r2
 80053f4:	d0ef      	beq.n	80053d6 <HAL_RCC_OscConfig+0x16e>
 80053f6:	e016      	b.n	8005426 <HAL_RCC_OscConfig+0x1be>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f8:	f7fb fe22 	bl	8001040 <HAL_GetTick>
 80053fc:	0003      	movs	r3, r0
 80053fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005400:	e009      	b.n	8005416 <HAL_RCC_OscConfig+0x1ae>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005402:	f7fb fe1d 	bl	8001040 <HAL_GetTick>
 8005406:	0002      	movs	r2, r0
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b64      	cmp	r3, #100	@ 0x64
 800540e:	d902      	bls.n	8005416 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	f000 fc39 	bl	8005c88 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005416:	4b71      	ldr	r3, [pc, #452]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	2380      	movs	r3, #128	@ 0x80
 800541c:	029b      	lsls	r3, r3, #10
 800541e:	4013      	ands	r3, r2
 8005420:	d1ef      	bne.n	8005402 <HAL_RCC_OscConfig+0x19a>
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x1be>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2202      	movs	r2, #2
 800542c:	4013      	ands	r3, r2
 800542e:	d100      	bne.n	8005432 <HAL_RCC_OscConfig+0x1ca>
 8005430:	e08a      	b.n	8005548 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00b      	beq.n	8005452 <HAL_RCC_OscConfig+0x1ea>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d007      	beq.n	8005452 <HAL_RCC_OscConfig+0x1ea>
 8005442:	2372      	movs	r3, #114	@ 0x72
 8005444:	33ff      	adds	r3, #255	@ 0xff
 8005446:	001a      	movs	r2, r3
 8005448:	4b63      	ldr	r3, [pc, #396]	@ (80055d8 <HAL_RCC_OscConfig+0x370>)
 800544a:	0011      	movs	r1, r2
 800544c:	0018      	movs	r0, r3
 800544e:	f7fb fb89 	bl	8000b64 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b1f      	cmp	r3, #31
 8005458:	d906      	bls.n	8005468 <HAL_RCC_OscConfig+0x200>
 800545a:	23b9      	movs	r3, #185	@ 0xb9
 800545c:	005a      	lsls	r2, r3, #1
 800545e:	4b5e      	ldr	r3, [pc, #376]	@ (80055d8 <HAL_RCC_OscConfig+0x370>)
 8005460:	0011      	movs	r1, r2
 8005462:	0018      	movs	r0, r3
 8005464:	f7fb fb7e 	bl	8000b64 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005468:	4b5c      	ldr	r3, [pc, #368]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	220c      	movs	r2, #12
 800546e:	4013      	ands	r3, r2
 8005470:	d00e      	beq.n	8005490 <HAL_RCC_OscConfig+0x228>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005472:	4b5a      	ldr	r3, [pc, #360]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	220c      	movs	r2, #12
 8005478:	4013      	ands	r3, r2
 800547a:	2b08      	cmp	r3, #8
 800547c:	d120      	bne.n	80054c0 <HAL_RCC_OscConfig+0x258>
 800547e:	4b57      	ldr	r3, [pc, #348]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	23c0      	movs	r3, #192	@ 0xc0
 8005484:	025b      	lsls	r3, r3, #9
 8005486:	401a      	ands	r2, r3
 8005488:	2380      	movs	r3, #128	@ 0x80
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	429a      	cmp	r2, r3
 800548e:	d117      	bne.n	80054c0 <HAL_RCC_OscConfig+0x258>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005490:	4b52      	ldr	r3, [pc, #328]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2202      	movs	r2, #2
 8005496:	4013      	ands	r3, r2
 8005498:	d006      	beq.n	80054a8 <HAL_RCC_OscConfig+0x240>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d002      	beq.n	80054a8 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f000 fbf0 	bl	8005c88 <HAL_RCC_OscConfig+0xa20>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a8:	4b4c      	ldr	r3, [pc, #304]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	22f8      	movs	r2, #248	@ 0xf8
 80054ae:	4393      	bics	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	00da      	lsls	r2, r3, #3
 80054b8:	4b48      	ldr	r3, [pc, #288]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054be:	e043      	b.n	8005548 <HAL_RCC_OscConfig+0x2e0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d025      	beq.n	8005514 <HAL_RCC_OscConfig+0x2ac>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c8:	4b44      	ldr	r3, [pc, #272]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4b43      	ldr	r3, [pc, #268]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80054ce:	2101      	movs	r1, #1
 80054d0:	430a      	orrs	r2, r1
 80054d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d4:	f7fb fdb4 	bl	8001040 <HAL_GetTick>
 80054d8:	0003      	movs	r3, r0
 80054da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054dc:	e009      	b.n	80054f2 <HAL_RCC_OscConfig+0x28a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054de:	f7fb fdaf 	bl	8001040 <HAL_GetTick>
 80054e2:	0002      	movs	r2, r0
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d902      	bls.n	80054f2 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	f000 fbcb 	bl	8005c88 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f2:	4b3a      	ldr	r3, [pc, #232]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2202      	movs	r2, #2
 80054f8:	4013      	ands	r3, r2
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x276>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fc:	4b37      	ldr	r3, [pc, #220]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	22f8      	movs	r2, #248	@ 0xf8
 8005502:	4393      	bics	r3, r2
 8005504:	0019      	movs	r1, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	00da      	lsls	r2, r3, #3
 800550c:	4b33      	ldr	r3, [pc, #204]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800550e:	430a      	orrs	r2, r1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e019      	b.n	8005548 <HAL_RCC_OscConfig+0x2e0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005514:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b30      	ldr	r3, [pc, #192]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800551a:	2101      	movs	r1, #1
 800551c:	438a      	bics	r2, r1
 800551e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7fb fd8e 	bl	8001040 <HAL_GetTick>
 8005524:	0003      	movs	r3, r0
 8005526:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005528:	e009      	b.n	800553e <HAL_RCC_OscConfig+0x2d6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800552a:	f7fb fd89 	bl	8001040 <HAL_GetTick>
 800552e:	0002      	movs	r2, r0
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d902      	bls.n	800553e <HAL_RCC_OscConfig+0x2d6>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	f000 fba5 	bl	8005c88 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553e:	4b27      	ldr	r3, [pc, #156]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2202      	movs	r2, #2
 8005544:	4013      	ands	r3, r2
 8005546:	d1f0      	bne.n	800552a <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2208      	movs	r2, #8
 800554e:	4013      	ands	r3, r2
 8005550:	d04f      	beq.n	80055f2 <HAL_RCC_OscConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_RCC_OscConfig+0x308>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d006      	beq.n	8005570 <HAL_RCC_OscConfig+0x308>
 8005562:	23d9      	movs	r3, #217	@ 0xd9
 8005564:	005a      	lsls	r2, r3, #1
 8005566:	4b1c      	ldr	r3, [pc, #112]	@ (80055d8 <HAL_RCC_OscConfig+0x370>)
 8005568:	0011      	movs	r1, r2
 800556a:	0018      	movs	r0, r3
 800556c:	f7fb fafa 	bl	8000b64 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01a      	beq.n	80055ae <HAL_RCC_OscConfig+0x346>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005578:	4b18      	ldr	r3, [pc, #96]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800557a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800557c:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 800557e:	2101      	movs	r1, #1
 8005580:	430a      	orrs	r2, r1
 8005582:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005584:	f7fb fd5c 	bl	8001040 <HAL_GetTick>
 8005588:	0003      	movs	r3, r0
 800558a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558c:	e009      	b.n	80055a2 <HAL_RCC_OscConfig+0x33a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558e:	f7fb fd57 	bl	8001040 <HAL_GetTick>
 8005592:	0002      	movs	r2, r0
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d902      	bls.n	80055a2 <HAL_RCC_OscConfig+0x33a>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	f000 fb73 	bl	8005c88 <HAL_RCC_OscConfig+0xa20>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a2:	4b0e      	ldr	r3, [pc, #56]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80055a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a6:	2202      	movs	r2, #2
 80055a8:	4013      	ands	r3, r2
 80055aa:	d0f0      	beq.n	800558e <HAL_RCC_OscConfig+0x326>
 80055ac:	e021      	b.n	80055f2 <HAL_RCC_OscConfig+0x38a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ae:	4b0b      	ldr	r3, [pc, #44]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80055b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055b2:	4b0a      	ldr	r3, [pc, #40]	@ (80055dc <HAL_RCC_OscConfig+0x374>)
 80055b4:	2101      	movs	r1, #1
 80055b6:	438a      	bics	r2, r1
 80055b8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ba:	f7fb fd41 	bl	8001040 <HAL_GetTick>
 80055be:	0003      	movs	r3, r0
 80055c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c2:	e011      	b.n	80055e8 <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c4:	f7fb fd3c 	bl	8001040 <HAL_GetTick>
 80055c8:	0002      	movs	r2, r0
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d90a      	bls.n	80055e8 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	f000 fb58 	bl	8005c88 <HAL_RCC_OscConfig+0xa20>
 80055d8:	0800c498 	.word	0x0800c498
 80055dc:	40021000 	.word	0x40021000
 80055e0:	fffeffff 	.word	0xfffeffff
 80055e4:	fffbffff 	.word	0xfffbffff
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e8:	4bc3      	ldr	r3, [pc, #780]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	2202      	movs	r2, #2
 80055ee:	4013      	ands	r3, r2
 80055f0:	d1e8      	bne.n	80055c4 <HAL_RCC_OscConfig+0x35c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2204      	movs	r2, #4
 80055f8:	4013      	ands	r3, r2
 80055fa:	d100      	bne.n	80055fe <HAL_RCC_OscConfig+0x396>
 80055fc:	e0c0      	b.n	8005780 <HAL_RCC_OscConfig+0x518>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fe:	231f      	movs	r3, #31
 8005600:	18fb      	adds	r3, r7, r3
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00e      	beq.n	800562c <HAL_RCC_OscConfig+0x3c4>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d00a      	beq.n	800562c <HAL_RCC_OscConfig+0x3c4>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b05      	cmp	r3, #5
 800561c:	d006      	beq.n	800562c <HAL_RCC_OscConfig+0x3c4>
 800561e:	23ef      	movs	r3, #239	@ 0xef
 8005620:	005a      	lsls	r2, r3, #1
 8005622:	4bb6      	ldr	r3, [pc, #728]	@ (80058fc <HAL_RCC_OscConfig+0x694>)
 8005624:	0011      	movs	r1, r2
 8005626:	0018      	movs	r0, r3
 8005628:	f7fb fa9c 	bl	8000b64 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800562c:	4bb2      	ldr	r3, [pc, #712]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	2380      	movs	r3, #128	@ 0x80
 8005632:	055b      	lsls	r3, r3, #21
 8005634:	4013      	ands	r3, r2
 8005636:	d111      	bne.n	800565c <HAL_RCC_OscConfig+0x3f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005638:	4baf      	ldr	r3, [pc, #700]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	4bae      	ldr	r3, [pc, #696]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800563e:	2180      	movs	r1, #128	@ 0x80
 8005640:	0549      	lsls	r1, r1, #21
 8005642:	430a      	orrs	r2, r1
 8005644:	61da      	str	r2, [r3, #28]
 8005646:	4bac      	ldr	r3, [pc, #688]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005648:	69da      	ldr	r2, [r3, #28]
 800564a:	2380      	movs	r3, #128	@ 0x80
 800564c:	055b      	lsls	r3, r3, #21
 800564e:	4013      	ands	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005654:	231f      	movs	r3, #31
 8005656:	18fb      	adds	r3, r7, r3
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565c:	4ba8      	ldr	r3, [pc, #672]	@ (8005900 <HAL_RCC_OscConfig+0x698>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	2380      	movs	r3, #128	@ 0x80
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	4013      	ands	r3, r2
 8005666:	d11a      	bne.n	800569e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005668:	4ba5      	ldr	r3, [pc, #660]	@ (8005900 <HAL_RCC_OscConfig+0x698>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4ba4      	ldr	r3, [pc, #656]	@ (8005900 <HAL_RCC_OscConfig+0x698>)
 800566e:	2180      	movs	r1, #128	@ 0x80
 8005670:	0049      	lsls	r1, r1, #1
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005676:	f7fb fce3 	bl	8001040 <HAL_GetTick>
 800567a:	0003      	movs	r3, r0
 800567c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005680:	f7fb fcde 	bl	8001040 <HAL_GetTick>
 8005684:	0002      	movs	r2, r0
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b64      	cmp	r3, #100	@ 0x64
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e2fa      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005692:	4b9b      	ldr	r3, [pc, #620]	@ (8005900 <HAL_RCC_OscConfig+0x698>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	2380      	movs	r3, #128	@ 0x80
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4013      	ands	r3, r2
 800569c:	d0f0      	beq.n	8005680 <HAL_RCC_OscConfig+0x418>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d106      	bne.n	80056b4 <HAL_RCC_OscConfig+0x44c>
 80056a6:	4b94      	ldr	r3, [pc, #592]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056a8:	6a1a      	ldr	r2, [r3, #32]
 80056aa:	4b93      	ldr	r3, [pc, #588]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056ac:	2101      	movs	r1, #1
 80056ae:	430a      	orrs	r2, r1
 80056b0:	621a      	str	r2, [r3, #32]
 80056b2:	e02d      	b.n	8005710 <HAL_RCC_OscConfig+0x4a8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10c      	bne.n	80056d6 <HAL_RCC_OscConfig+0x46e>
 80056bc:	4b8e      	ldr	r3, [pc, #568]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056be:	6a1a      	ldr	r2, [r3, #32]
 80056c0:	4b8d      	ldr	r3, [pc, #564]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056c2:	2101      	movs	r1, #1
 80056c4:	438a      	bics	r2, r1
 80056c6:	621a      	str	r2, [r3, #32]
 80056c8:	4b8b      	ldr	r3, [pc, #556]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	4b8a      	ldr	r3, [pc, #552]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056ce:	2104      	movs	r1, #4
 80056d0:	438a      	bics	r2, r1
 80056d2:	621a      	str	r2, [r3, #32]
 80056d4:	e01c      	b.n	8005710 <HAL_RCC_OscConfig+0x4a8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b05      	cmp	r3, #5
 80056dc:	d10c      	bne.n	80056f8 <HAL_RCC_OscConfig+0x490>
 80056de:	4b86      	ldr	r3, [pc, #536]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	4b85      	ldr	r3, [pc, #532]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056e4:	2104      	movs	r1, #4
 80056e6:	430a      	orrs	r2, r1
 80056e8:	621a      	str	r2, [r3, #32]
 80056ea:	4b83      	ldr	r3, [pc, #524]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056ec:	6a1a      	ldr	r2, [r3, #32]
 80056ee:	4b82      	ldr	r3, [pc, #520]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056f0:	2101      	movs	r1, #1
 80056f2:	430a      	orrs	r2, r1
 80056f4:	621a      	str	r2, [r3, #32]
 80056f6:	e00b      	b.n	8005710 <HAL_RCC_OscConfig+0x4a8>
 80056f8:	4b7f      	ldr	r3, [pc, #508]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056fa:	6a1a      	ldr	r2, [r3, #32]
 80056fc:	4b7e      	ldr	r3, [pc, #504]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80056fe:	2101      	movs	r1, #1
 8005700:	438a      	bics	r2, r1
 8005702:	621a      	str	r2, [r3, #32]
 8005704:	4b7c      	ldr	r3, [pc, #496]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005706:	6a1a      	ldr	r2, [r3, #32]
 8005708:	4b7b      	ldr	r3, [pc, #492]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800570a:	2104      	movs	r1, #4
 800570c:	438a      	bics	r2, r1
 800570e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d014      	beq.n	8005742 <HAL_RCC_OscConfig+0x4da>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005718:	f7fb fc92 	bl	8001040 <HAL_GetTick>
 800571c:	0003      	movs	r3, r0
 800571e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005720:	e009      	b.n	8005736 <HAL_RCC_OscConfig+0x4ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fb fc8d 	bl	8001040 <HAL_GetTick>
 8005726:	0002      	movs	r2, r0
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	4a75      	ldr	r2, [pc, #468]	@ (8005904 <HAL_RCC_OscConfig+0x69c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e2a8      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005736:	4b70      	ldr	r3, [pc, #448]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	2202      	movs	r2, #2
 800573c:	4013      	ands	r3, r2
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x4ba>
 8005740:	e013      	b.n	800576a <HAL_RCC_OscConfig+0x502>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005742:	f7fb fc7d 	bl	8001040 <HAL_GetTick>
 8005746:	0003      	movs	r3, r0
 8005748:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574a:	e009      	b.n	8005760 <HAL_RCC_OscConfig+0x4f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800574c:	f7fb fc78 	bl	8001040 <HAL_GetTick>
 8005750:	0002      	movs	r2, r0
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	4a6b      	ldr	r2, [pc, #428]	@ (8005904 <HAL_RCC_OscConfig+0x69c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e293      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005760:	4b65      	ldr	r3, [pc, #404]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	2202      	movs	r2, #2
 8005766:	4013      	ands	r3, r2
 8005768:	d1f0      	bne.n	800574c <HAL_RCC_OscConfig+0x4e4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800576a:	231f      	movs	r3, #31
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d105      	bne.n	8005780 <HAL_RCC_OscConfig+0x518>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005774:	4b60      	ldr	r3, [pc, #384]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	4b5f      	ldr	r3, [pc, #380]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800577a:	4963      	ldr	r1, [pc, #396]	@ (8005908 <HAL_RCC_OscConfig+0x6a0>)
 800577c:	400a      	ands	r2, r1
 800577e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2210      	movs	r2, #16
 8005786:	4013      	ands	r3, r2
 8005788:	d100      	bne.n	800578c <HAL_RCC_OscConfig+0x524>
 800578a:	e080      	b.n	800588e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00e      	beq.n	80057b2 <HAL_RCC_OscConfig+0x54a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d00a      	beq.n	80057b2 <HAL_RCC_OscConfig+0x54a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	3305      	adds	r3, #5
 80057a2:	d006      	beq.n	80057b2 <HAL_RCC_OscConfig+0x54a>
 80057a4:	2389      	movs	r3, #137	@ 0x89
 80057a6:	009a      	lsls	r2, r3, #2
 80057a8:	4b54      	ldr	r3, [pc, #336]	@ (80058fc <HAL_RCC_OscConfig+0x694>)
 80057aa:	0011      	movs	r1, r2
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7fb f9d9 	bl	8000b64 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b1f      	cmp	r3, #31
 80057b8:	d905      	bls.n	80057c6 <HAL_RCC_OscConfig+0x55e>
 80057ba:	4a54      	ldr	r2, [pc, #336]	@ (800590c <HAL_RCC_OscConfig+0x6a4>)
 80057bc:	4b4f      	ldr	r3, [pc, #316]	@ (80058fc <HAL_RCC_OscConfig+0x694>)
 80057be:	0011      	movs	r1, r2
 80057c0:	0018      	movs	r0, r3
 80057c2:	f7fb f9cf 	bl	8000b64 <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d12a      	bne.n	8005824 <HAL_RCC_OscConfig+0x5bc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80057ce:	4b4a      	ldr	r3, [pc, #296]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80057d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057d2:	4b49      	ldr	r3, [pc, #292]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80057d4:	2104      	movs	r1, #4
 80057d6:	430a      	orrs	r2, r1
 80057d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80057da:	4b47      	ldr	r3, [pc, #284]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80057dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057de:	4b46      	ldr	r3, [pc, #280]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80057e0:	2101      	movs	r1, #1
 80057e2:	430a      	orrs	r2, r1
 80057e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e6:	f7fb fc2b 	bl	8001040 <HAL_GetTick>
 80057ea:	0003      	movs	r3, r0
 80057ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x59a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80057f0:	f7fb fc26 	bl	8001040 <HAL_GetTick>
 80057f4:	0002      	movs	r2, r0
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x59a>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e242      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005802:	4b3d      	ldr	r3, [pc, #244]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005806:	2202      	movs	r2, #2
 8005808:	4013      	ands	r3, r2
 800580a:	d0f1      	beq.n	80057f0 <HAL_RCC_OscConfig+0x588>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800580c:	4b3a      	ldr	r3, [pc, #232]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800580e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005810:	22f8      	movs	r2, #248	@ 0xf8
 8005812:	4393      	bics	r3, r2
 8005814:	0019      	movs	r1, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	00da      	lsls	r2, r3, #3
 800581c:	4b36      	ldr	r3, [pc, #216]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800581e:	430a      	orrs	r2, r1
 8005820:	635a      	str	r2, [r3, #52]	@ 0x34
 8005822:	e034      	b.n	800588e <HAL_RCC_OscConfig+0x626>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	3305      	adds	r3, #5
 800582a:	d111      	bne.n	8005850 <HAL_RCC_OscConfig+0x5e8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800582c:	4b32      	ldr	r3, [pc, #200]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800582e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005830:	4b31      	ldr	r3, [pc, #196]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005832:	2104      	movs	r1, #4
 8005834:	438a      	bics	r2, r1
 8005836:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005838:	4b2f      	ldr	r3, [pc, #188]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800583a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583c:	22f8      	movs	r2, #248	@ 0xf8
 800583e:	4393      	bics	r3, r2
 8005840:	0019      	movs	r1, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	00da      	lsls	r2, r3, #3
 8005848:	4b2b      	ldr	r3, [pc, #172]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800584a:	430a      	orrs	r2, r1
 800584c:	635a      	str	r2, [r3, #52]	@ 0x34
 800584e:	e01e      	b.n	800588e <HAL_RCC_OscConfig+0x626>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005850:	4b29      	ldr	r3, [pc, #164]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005854:	4b28      	ldr	r3, [pc, #160]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005856:	2104      	movs	r1, #4
 8005858:	430a      	orrs	r2, r1
 800585a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800585c:	4b26      	ldr	r3, [pc, #152]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 800585e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005860:	4b25      	ldr	r3, [pc, #148]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005862:	2101      	movs	r1, #1
 8005864:	438a      	bics	r2, r1
 8005866:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005868:	f7fb fbea 	bl	8001040 <HAL_GetTick>
 800586c:	0003      	movs	r3, r0
 800586e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x61c>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005872:	f7fb fbe5 	bl	8001040 <HAL_GetTick>
 8005876:	0002      	movs	r2, r0
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e201      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005884:	4b1c      	ldr	r3, [pc, #112]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 8005886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005888:	2202      	movs	r2, #2
 800588a:	4013      	ands	r3, r2
 800588c:	d1f1      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2220      	movs	r2, #32
 8005894:	4013      	ands	r3, r2
 8005896:	d100      	bne.n	800589a <HAL_RCC_OscConfig+0x632>
 8005898:	e078      	b.n	800598c <HAL_RCC_OscConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d009      	beq.n	80058b6 <HAL_RCC_OscConfig+0x64e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d005      	beq.n	80058b6 <HAL_RCC_OscConfig+0x64e>
 80058aa:	4a19      	ldr	r2, [pc, #100]	@ (8005910 <HAL_RCC_OscConfig+0x6a8>)
 80058ac:	4b13      	ldr	r3, [pc, #76]	@ (80058fc <HAL_RCC_OscConfig+0x694>)
 80058ae:	0011      	movs	r1, r2
 80058b0:	0018      	movs	r0, r3
 80058b2:	f7fb f957 	bl	8000b64 <assert_failed>

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80058b6:	4b10      	ldr	r3, [pc, #64]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	220c      	movs	r2, #12
 80058bc:	4013      	ands	r3, r2
 80058be:	2b0c      	cmp	r3, #12
 80058c0:	d00e      	beq.n	80058e0 <HAL_RCC_OscConfig+0x678>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	220c      	movs	r2, #12
 80058c8:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d122      	bne.n	8005914 <HAL_RCC_OscConfig+0x6ac>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80058ce:	4b0a      	ldr	r3, [pc, #40]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	23c0      	movs	r3, #192	@ 0xc0
 80058d4:	025b      	lsls	r3, r3, #9
 80058d6:	401a      	ands	r2, r3
 80058d8:	23c0      	movs	r3, #192	@ 0xc0
 80058da:	025b      	lsls	r3, r3, #9
 80058dc:	429a      	cmp	r2, r3
 80058de:	d119      	bne.n	8005914 <HAL_RCC_OscConfig+0x6ac>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80058e0:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <HAL_RCC_OscConfig+0x690>)
 80058e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058e4:	2380      	movs	r3, #128	@ 0x80
 80058e6:	029b      	lsls	r3, r3, #10
 80058e8:	4013      	ands	r3, r2
 80058ea:	d04e      	beq.n	800598a <HAL_RCC_OscConfig+0x722>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d04a      	beq.n	800598a <HAL_RCC_OscConfig+0x722>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e1c7      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
 80058f8:	40021000 	.word	0x40021000
 80058fc:	0800c498 	.word	0x0800c498
 8005900:	40007000 	.word	0x40007000
 8005904:	00001388 	.word	0x00001388
 8005908:	efffffff 	.word	0xefffffff
 800590c:	00000225 	.word	0x00000225
 8005910:	00000262 	.word	0x00000262
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <HAL_RCC_OscConfig+0x6ec>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800591c:	4bbf      	ldr	r3, [pc, #764]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 800591e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005920:	4bbe      	ldr	r3, [pc, #760]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005922:	2180      	movs	r1, #128	@ 0x80
 8005924:	0249      	lsls	r1, r1, #9
 8005926:	430a      	orrs	r2, r1
 8005928:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592a:	f7fb fb89 	bl	8001040 <HAL_GetTick>
 800592e:	0003      	movs	r3, r0
 8005930:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005934:	f7fb fb84 	bl	8001040 <HAL_GetTick>
 8005938:	0002      	movs	r2, r0
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e1a0      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005946:	4bb5      	ldr	r3, [pc, #724]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800594a:	2380      	movs	r3, #128	@ 0x80
 800594c:	029b      	lsls	r3, r3, #10
 800594e:	4013      	ands	r3, r2
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0x6cc>
 8005952:	e01b      	b.n	800598c <HAL_RCC_OscConfig+0x724>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005954:	4bb1      	ldr	r3, [pc, #708]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005958:	4bb0      	ldr	r3, [pc, #704]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 800595a:	49b1      	ldr	r1, [pc, #708]	@ (8005c20 <HAL_RCC_OscConfig+0x9b8>)
 800595c:	400a      	ands	r2, r1
 800595e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005960:	f7fb fb6e 	bl	8001040 <HAL_GetTick>
 8005964:	0003      	movs	r3, r0
 8005966:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800596a:	f7fb fb69 	bl	8001040 <HAL_GetTick>
 800596e:	0002      	movs	r2, r0
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e185      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800597c:	4ba7      	ldr	r3, [pc, #668]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 800597e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005980:	2380      	movs	r3, #128	@ 0x80
 8005982:	029b      	lsls	r3, r3, #10
 8005984:	4013      	ands	r3, r2
 8005986:	d1f0      	bne.n	800596a <HAL_RCC_OscConfig+0x702>
 8005988:	e000      	b.n	800598c <HAL_RCC_OscConfig+0x724>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800598a:	46c0      	nop			@ (mov r8, r8)
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00e      	beq.n	80059b2 <HAL_RCC_OscConfig+0x74a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	2b01      	cmp	r3, #1
 800599a:	d00a      	beq.n	80059b2 <HAL_RCC_OscConfig+0x74a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d006      	beq.n	80059b2 <HAL_RCC_OscConfig+0x74a>
 80059a4:	23a6      	movs	r3, #166	@ 0xa6
 80059a6:	009a      	lsls	r2, r3, #2
 80059a8:	4b9e      	ldr	r3, [pc, #632]	@ (8005c24 <HAL_RCC_OscConfig+0x9bc>)
 80059aa:	0011      	movs	r1, r2
 80059ac:	0018      	movs	r0, r3
 80059ae:	f7fb f8d9 	bl	8000b64 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d100      	bne.n	80059bc <HAL_RCC_OscConfig+0x754>
 80059ba:	e164      	b.n	8005c86 <HAL_RCC_OscConfig+0xa1e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059bc:	4b97      	ldr	r3, [pc, #604]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	220c      	movs	r2, #12
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d100      	bne.n	80059ca <HAL_RCC_OscConfig+0x762>
 80059c8:	e138      	b.n	8005c3c <HAL_RCC_OscConfig+0x9d4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d000      	beq.n	80059d4 <HAL_RCC_OscConfig+0x76c>
 80059d2:	e108      	b.n	8005be6 <HAL_RCC_OscConfig+0x97e>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059d8:	2380      	movs	r3, #128	@ 0x80
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	429a      	cmp	r2, r3
 80059de:	d011      	beq.n	8005a04 <HAL_RCC_OscConfig+0x79c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059e4:	23c0      	movs	r3, #192	@ 0xc0
 80059e6:	025b      	lsls	r3, r3, #9
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d00b      	beq.n	8005a04 <HAL_RCC_OscConfig+0x79c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059f0:	2380      	movs	r3, #128	@ 0x80
 80059f2:	025b      	lsls	r3, r3, #9
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_OscConfig+0x79c>
 80059f8:	4a8b      	ldr	r2, [pc, #556]	@ (8005c28 <HAL_RCC_OscConfig+0x9c0>)
 80059fa:	4b8a      	ldr	r3, [pc, #552]	@ (8005c24 <HAL_RCC_OscConfig+0x9bc>)
 80059fc:	0011      	movs	r1, r2
 80059fe:	0018      	movs	r0, r3
 8005a00:	f7fb f8b0 	bl	8000b64 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d059      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a10:	2380      	movs	r3, #128	@ 0x80
 8005a12:	02db      	lsls	r3, r3, #11
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d053      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1c:	2380      	movs	r3, #128	@ 0x80
 8005a1e:	031b      	lsls	r3, r3, #12
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d04d      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a28:	23c0      	movs	r3, #192	@ 0xc0
 8005a2a:	031b      	lsls	r3, r3, #12
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d047      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a34:	2380      	movs	r3, #128	@ 0x80
 8005a36:	035b      	lsls	r3, r3, #13
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d041      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a40:	23a0      	movs	r3, #160	@ 0xa0
 8005a42:	035b      	lsls	r3, r3, #13
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d03b      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a4c:	23c0      	movs	r3, #192	@ 0xc0
 8005a4e:	035b      	lsls	r3, r3, #13
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d035      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a58:	23e0      	movs	r3, #224	@ 0xe0
 8005a5a:	035b      	lsls	r3, r3, #13
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d02f      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a64:	2380      	movs	r3, #128	@ 0x80
 8005a66:	039b      	lsls	r3, r3, #14
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d029      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a70:	2390      	movs	r3, #144	@ 0x90
 8005a72:	039b      	lsls	r3, r3, #14
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d023      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7c:	23a0      	movs	r3, #160	@ 0xa0
 8005a7e:	039b      	lsls	r3, r3, #14
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d01d      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a88:	23b0      	movs	r3, #176	@ 0xb0
 8005a8a:	039b      	lsls	r3, r3, #14
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d017      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a94:	23c0      	movs	r3, #192	@ 0xc0
 8005a96:	039b      	lsls	r3, r3, #14
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d011      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa0:	23d0      	movs	r3, #208	@ 0xd0
 8005aa2:	039b      	lsls	r3, r3, #14
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d00b      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aac:	23e0      	movs	r3, #224	@ 0xe0
 8005aae:	039b      	lsls	r3, r3, #14
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x858>
 8005ab4:	4a5d      	ldr	r2, [pc, #372]	@ (8005c2c <HAL_RCC_OscConfig+0x9c4>)
 8005ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8005c24 <HAL_RCC_OscConfig+0x9bc>)
 8005ab8:	0011      	movs	r1, r2
 8005aba:	0018      	movs	r0, r3
 8005abc:	f7fb f852 	bl	8000b64 <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d041      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d03d      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d039      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d035      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d031      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	d02d      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d029      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afc:	2b07      	cmp	r3, #7
 8005afe:	d025      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d021      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0c:	2b09      	cmp	r3, #9
 8005b0e:	d01d      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b14:	2b0a      	cmp	r3, #10
 8005b16:	d019      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1c:	2b0b      	cmp	r3, #11
 8005b1e:	d015      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b24:	2b0c      	cmp	r3, #12
 8005b26:	d011      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2c:	2b0d      	cmp	r3, #13
 8005b2e:	d00d      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b34:	2b0e      	cmp	r3, #14
 8005b36:	d009      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3c:	2b0f      	cmp	r3, #15
 8005b3e:	d005      	beq.n	8005b4c <HAL_RCC_OscConfig+0x8e4>
 8005b40:	4a3b      	ldr	r2, [pc, #236]	@ (8005c30 <HAL_RCC_OscConfig+0x9c8>)
 8005b42:	4b38      	ldr	r3, [pc, #224]	@ (8005c24 <HAL_RCC_OscConfig+0x9bc>)
 8005b44:	0011      	movs	r1, r2
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7fb f80c 	bl	8000b64 <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b4c:	4b33      	ldr	r3, [pc, #204]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4b32      	ldr	r3, [pc, #200]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005b52:	4938      	ldr	r1, [pc, #224]	@ (8005c34 <HAL_RCC_OscConfig+0x9cc>)
 8005b54:	400a      	ands	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b58:	f7fb fa72 	bl	8001040 <HAL_GetTick>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x90c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b62:	f7fb fa6d 	bl	8001040 <HAL_GetTick>
 8005b66:	0002      	movs	r2, r0
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x90c>
          {
            return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e089      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b74:	4b29      	ldr	r3, [pc, #164]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	049b      	lsls	r3, r3, #18
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d1f0      	bne.n	8005b62 <HAL_RCC_OscConfig+0x8fa>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b80:	4b26      	ldr	r3, [pc, #152]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	220f      	movs	r2, #15
 8005b86:	4393      	bics	r3, r2
 8005b88:	0019      	movs	r1, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b8e:	4b23      	ldr	r3, [pc, #140]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005b90:	430a      	orrs	r2, r1
 8005b92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b94:	4b21      	ldr	r3, [pc, #132]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4a27      	ldr	r2, [pc, #156]	@ (8005c38 <HAL_RCC_OscConfig+0x9d0>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bae:	4b1b      	ldr	r3, [pc, #108]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005bb4:	2180      	movs	r1, #128	@ 0x80
 8005bb6:	0449      	lsls	r1, r1, #17
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbc:	f7fb fa40 	bl	8001040 <HAL_GetTick>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x970>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fb fa3b 	bl	8001040 <HAL_GetTick>
 8005bca:	0002      	movs	r2, r0
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x970>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e057      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd8:	4b10      	ldr	r3, [pc, #64]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	2380      	movs	r3, #128	@ 0x80
 8005bde:	049b      	lsls	r3, r3, #18
 8005be0:	4013      	ands	r3, r2
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x95e>
 8005be4:	e04f      	b.n	8005c86 <HAL_RCC_OscConfig+0xa1e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b0c      	ldr	r3, [pc, #48]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005bec:	4911      	ldr	r1, [pc, #68]	@ (8005c34 <HAL_RCC_OscConfig+0x9cc>)
 8005bee:	400a      	ands	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf2:	f7fb fa25 	bl	8001040 <HAL_GetTick>
 8005bf6:	0003      	movs	r3, r0
 8005bf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x9a6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bfc:	f7fb fa20 	bl	8001040 <HAL_GetTick>
 8005c00:	0002      	movs	r2, r0
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x9a6>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e03c      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c0e:	4b03      	ldr	r3, [pc, #12]	@ (8005c1c <HAL_RCC_OscConfig+0x9b4>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	2380      	movs	r3, #128	@ 0x80
 8005c14:	049b      	lsls	r3, r3, #18
 8005c16:	4013      	ands	r3, r2
 8005c18:	d1f0      	bne.n	8005bfc <HAL_RCC_OscConfig+0x994>
 8005c1a:	e034      	b.n	8005c86 <HAL_RCC_OscConfig+0xa1e>
 8005c1c:	40021000 	.word	0x40021000
 8005c20:	fffeffff 	.word	0xfffeffff
 8005c24:	0800c498 	.word	0x0800c498
 8005c28:	000002a1 	.word	0x000002a1
 8005c2c:	000002a2 	.word	0x000002a2
 8005c30:	000002a3 	.word	0x000002a3
 8005c34:	feffffff 	.word	0xfeffffff
 8005c38:	ffc27fff 	.word	0xffc27fff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_OscConfig+0x9e0>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e01f      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005c48:	4b11      	ldr	r3, [pc, #68]	@ (8005c90 <HAL_RCC_OscConfig+0xa28>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005c4e:	4b10      	ldr	r3, [pc, #64]	@ (8005c90 <HAL_RCC_OscConfig+0xa28>)
 8005c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c52:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	23c0      	movs	r3, #192	@ 0xc0
 8005c58:	025b      	lsls	r3, r3, #9
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d10e      	bne.n	8005c82 <HAL_RCC_OscConfig+0xa1a>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	220f      	movs	r2, #15
 8005c68:	401a      	ands	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d107      	bne.n	8005c82 <HAL_RCC_OscConfig+0xa1a>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	23f0      	movs	r3, #240	@ 0xf0
 8005c76:	039b      	lsls	r3, r3, #14
 8005c78:	401a      	ands	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d001      	beq.n	8005c86 <HAL_RCC_OscConfig+0xa1e>
        {
          return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <HAL_RCC_OscConfig+0xa20>
        }
      }
    }
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b008      	add	sp, #32
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40021000 	.word	0x40021000

08005c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e145      	b.n	8005f34 <HAL_RCC_ClockConfig+0x2a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2201      	movs	r2, #1
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d110      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x40>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d10b      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d106      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x40>
 8005cc6:	23c5      	movs	r3, #197	@ 0xc5
 8005cc8:	009a      	lsls	r2, r3, #2
 8005cca:	4b9c      	ldr	r3, [pc, #624]	@ (8005f3c <HAL_RCC_ClockConfig+0x2a8>)
 8005ccc:	0011      	movs	r1, r2
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f7fa ff48 	bl	8000b64 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <HAL_RCC_ClockConfig+0x58>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d005      	beq.n	8005cec <HAL_RCC_ClockConfig+0x58>
 8005ce0:	4a97      	ldr	r2, [pc, #604]	@ (8005f40 <HAL_RCC_ClockConfig+0x2ac>)
 8005ce2:	4b96      	ldr	r3, [pc, #600]	@ (8005f3c <HAL_RCC_ClockConfig+0x2a8>)
 8005ce4:	0011      	movs	r1, r2
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f7fa ff3c 	bl	8000b64 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cec:	4b95      	ldr	r3, [pc, #596]	@ (8005f44 <HAL_RCC_ClockConfig+0x2b0>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d911      	bls.n	8005d1e <HAL_RCC_ClockConfig+0x8a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfa:	4b92      	ldr	r3, [pc, #584]	@ (8005f44 <HAL_RCC_ClockConfig+0x2b0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	4393      	bics	r3, r2
 8005d02:	0019      	movs	r1, r3
 8005d04:	4b8f      	ldr	r3, [pc, #572]	@ (8005f44 <HAL_RCC_ClockConfig+0x2b0>)
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0c:	4b8d      	ldr	r3, [pc, #564]	@ (8005f44 <HAL_RCC_ClockConfig+0x2b0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	4013      	ands	r3, r2
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d001      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x8a>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e10a      	b.n	8005f34 <HAL_RCC_ClockConfig+0x2a0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2202      	movs	r2, #2
 8005d24:	4013      	ands	r3, r2
 8005d26:	d040      	beq.n	8005daa <HAL_RCC_ClockConfig+0x116>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	4013      	ands	r3, r2
 8005d30:	d006      	beq.n	8005d40 <HAL_RCC_ClockConfig+0xac>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d32:	4b85      	ldr	r3, [pc, #532]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	4b84      	ldr	r3, [pc, #528]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005d38:	21e0      	movs	r1, #224	@ 0xe0
 8005d3a:	00c9      	lsls	r1, r1, #3
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d026      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x102>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b80      	cmp	r3, #128	@ 0x80
 8005d4e:	d022      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x102>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b90      	cmp	r3, #144	@ 0x90
 8005d56:	d01e      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x102>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2ba0      	cmp	r3, #160	@ 0xa0
 8005d5e:	d01a      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x102>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2bb0      	cmp	r3, #176	@ 0xb0
 8005d66:	d016      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x102>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d6e:	d012      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x102>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2bd0      	cmp	r3, #208	@ 0xd0
 8005d76:	d00e      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x102>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2be0      	cmp	r3, #224	@ 0xe0
 8005d7e:	d00a      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x102>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2bf0      	cmp	r3, #240	@ 0xf0
 8005d86:	d006      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x102>
 8005d88:	23cd      	movs	r3, #205	@ 0xcd
 8005d8a:	009a      	lsls	r2, r3, #2
 8005d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8005f3c <HAL_RCC_ClockConfig+0x2a8>)
 8005d8e:	0011      	movs	r1, r2
 8005d90:	0018      	movs	r0, r3
 8005d92:	f7fa fee7 	bl	8000b64 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d96:	4b6c      	ldr	r3, [pc, #432]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	22f0      	movs	r2, #240	@ 0xf0
 8005d9c:	4393      	bics	r3, r2
 8005d9e:	0019      	movs	r1, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	4b68      	ldr	r3, [pc, #416]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2201      	movs	r2, #1
 8005db0:	4013      	ands	r3, r2
 8005db2:	d100      	bne.n	8005db6 <HAL_RCC_ClockConfig+0x122>
 8005db4:	e062      	b.n	8005e7c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d011      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x14e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d00d      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x14e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d009      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x14e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d005      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x14e>
 8005dd6:	4a5d      	ldr	r2, [pc, #372]	@ (8005f4c <HAL_RCC_ClockConfig+0x2b8>)
 8005dd8:	4b58      	ldr	r3, [pc, #352]	@ (8005f3c <HAL_RCC_ClockConfig+0x2a8>)
 8005dda:	0011      	movs	r1, r2
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f7fa fec1 	bl	8000b64 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d107      	bne.n	8005dfa <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dea:	4b57      	ldr	r3, [pc, #348]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	2380      	movs	r3, #128	@ 0x80
 8005df0:	029b      	lsls	r3, r3, #10
 8005df2:	4013      	ands	r3, r2
 8005df4:	d120      	bne.n	8005e38 <HAL_RCC_ClockConfig+0x1a4>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e09c      	b.n	8005f34 <HAL_RCC_ClockConfig+0x2a0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d107      	bne.n	8005e12 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e02:	4b51      	ldr	r3, [pc, #324]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	2380      	movs	r3, #128	@ 0x80
 8005e08:	049b      	lsls	r3, r3, #18
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d114      	bne.n	8005e38 <HAL_RCC_ClockConfig+0x1a4>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e090      	b.n	8005f34 <HAL_RCC_ClockConfig+0x2a0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0x196>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e1e:	2380      	movs	r3, #128	@ 0x80
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	4013      	ands	r3, r2
 8005e24:	d108      	bne.n	8005e38 <HAL_RCC_ClockConfig+0x1a4>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e084      	b.n	8005f34 <HAL_RCC_ClockConfig+0x2a0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e2a:	4b47      	ldr	r3, [pc, #284]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	4013      	ands	r3, r2
 8005e32:	d101      	bne.n	8005e38 <HAL_RCC_ClockConfig+0x1a4>
      {
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e07d      	b.n	8005f34 <HAL_RCC_ClockConfig+0x2a0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e38:	4b43      	ldr	r3, [pc, #268]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	4393      	bics	r3, r2
 8005e40:	0019      	movs	r1, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	4b40      	ldr	r3, [pc, #256]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e4c:	f7fb f8f8 	bl	8001040 <HAL_GetTick>
 8005e50:	0003      	movs	r3, r0
 8005e52:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e54:	e009      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1d6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e56:	f7fb f8f3 	bl	8001040 <HAL_GetTick>
 8005e5a:	0002      	movs	r2, r0
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	4a3b      	ldr	r2, [pc, #236]	@ (8005f50 <HAL_RCC_ClockConfig+0x2bc>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_ClockConfig+0x1d6>
      {
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e064      	b.n	8005f34 <HAL_RCC_ClockConfig+0x2a0>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6a:	4b37      	ldr	r3, [pc, #220]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	220c      	movs	r2, #12
 8005e70:	401a      	ands	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d1ec      	bne.n	8005e56 <HAL_RCC_ClockConfig+0x1c2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b31      	ldr	r3, [pc, #196]	@ (8005f44 <HAL_RCC_ClockConfig+0x2b0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2201      	movs	r2, #1
 8005e82:	4013      	ands	r3, r2
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d211      	bcs.n	8005eae <HAL_RCC_ClockConfig+0x21a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f44 <HAL_RCC_ClockConfig+0x2b0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	4393      	bics	r3, r2
 8005e92:	0019      	movs	r1, r3
 8005e94:	4b2b      	ldr	r3, [pc, #172]	@ (8005f44 <HAL_RCC_ClockConfig+0x2b0>)
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9c:	4b29      	ldr	r3, [pc, #164]	@ (8005f44 <HAL_RCC_ClockConfig+0x2b0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d001      	beq.n	8005eae <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e042      	b.n	8005f34 <HAL_RCC_ClockConfig+0x2a0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d02b      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01d      	beq.n	8005efc <HAL_RCC_ClockConfig+0x268>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	2380      	movs	r3, #128	@ 0x80
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d017      	beq.n	8005efc <HAL_RCC_ClockConfig+0x268>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	23a0      	movs	r3, #160	@ 0xa0
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d011      	beq.n	8005efc <HAL_RCC_ClockConfig+0x268>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	23c0      	movs	r3, #192	@ 0xc0
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d00b      	beq.n	8005efc <HAL_RCC_ClockConfig+0x268>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	23e0      	movs	r3, #224	@ 0xe0
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d005      	beq.n	8005efc <HAL_RCC_ClockConfig+0x268>
 8005ef0:	4a18      	ldr	r2, [pc, #96]	@ (8005f54 <HAL_RCC_ClockConfig+0x2c0>)
 8005ef2:	4b12      	ldr	r3, [pc, #72]	@ (8005f3c <HAL_RCC_ClockConfig+0x2a8>)
 8005ef4:	0011      	movs	r1, r2
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f7fa fe34 	bl	8000b64 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005efc:	4b12      	ldr	r3, [pc, #72]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	4a15      	ldr	r2, [pc, #84]	@ (8005f58 <HAL_RCC_ClockConfig+0x2c4>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	0019      	movs	r1, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f10:	f000 f828 	bl	8005f64 <HAL_RCC_GetSysClockFreq>
 8005f14:	0001      	movs	r1, r0
 8005f16:	4b0c      	ldr	r3, [pc, #48]	@ (8005f48 <HAL_RCC_ClockConfig+0x2b4>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	091b      	lsrs	r3, r3, #4
 8005f1c:	220f      	movs	r2, #15
 8005f1e:	4013      	ands	r3, r2
 8005f20:	4a0e      	ldr	r2, [pc, #56]	@ (8005f5c <HAL_RCC_ClockConfig+0x2c8>)
 8005f22:	5cd3      	ldrb	r3, [r2, r3]
 8005f24:	000a      	movs	r2, r1
 8005f26:	40da      	lsrs	r2, r3
 8005f28:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <HAL_RCC_ClockConfig+0x2cc>)
 8005f2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005f2c:	2003      	movs	r0, #3
 8005f2e:	f7fb f841 	bl	8000fb4 <HAL_InitTick>
  
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	0018      	movs	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b004      	add	sp, #16
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	0800c498 	.word	0x0800c498
 8005f40:	00000315 	.word	0x00000315
 8005f44:	40022000 	.word	0x40022000
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	0000033b 	.word	0x0000033b
 8005f50:	00001388 	.word	0x00001388
 8005f54:	00000382 	.word	0x00000382
 8005f58:	fffff8ff 	.word	0xfffff8ff
 8005f5c:	0800c5b4 	.word	0x0800c5b4
 8005f60:	20000018 	.word	0x20000018

08005f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	2300      	movs	r3, #0
 8005f78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8006034 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	220c      	movs	r2, #12
 8005f88:	4013      	ands	r3, r2
 8005f8a:	2b0c      	cmp	r3, #12
 8005f8c:	d046      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0xb8>
 8005f8e:	d848      	bhi.n	8006022 <HAL_RCC_GetSysClockFreq+0xbe>
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d002      	beq.n	8005f9a <HAL_RCC_GetSysClockFreq+0x36>
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d003      	beq.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x3c>
 8005f98:	e043      	b.n	8006022 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f9a:	4b27      	ldr	r3, [pc, #156]	@ (8006038 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005f9c:	613b      	str	r3, [r7, #16]
      break;
 8005f9e:	e043      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	0c9b      	lsrs	r3, r3, #18
 8005fa4:	220f      	movs	r2, #15
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	4a24      	ldr	r2, [pc, #144]	@ (800603c <HAL_RCC_GetSysClockFreq+0xd8>)
 8005faa:	5cd3      	ldrb	r3, [r2, r3]
 8005fac:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005fae:	4b21      	ldr	r3, [pc, #132]	@ (8006034 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb2:	220f      	movs	r2, #15
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	4a22      	ldr	r2, [pc, #136]	@ (8006040 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005fb8:	5cd3      	ldrb	r3, [r2, r3]
 8005fba:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	23c0      	movs	r3, #192	@ 0xc0
 8005fc0:	025b      	lsls	r3, r3, #9
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	2380      	movs	r3, #128	@ 0x80
 8005fc6:	025b      	lsls	r3, r3, #9
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d109      	bne.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	481a      	ldr	r0, [pc, #104]	@ (8006038 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005fd0:	f7fa f8ac 	bl	800012c <__udivsi3>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	001a      	movs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4353      	muls	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	e01a      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	23c0      	movs	r3, #192	@ 0xc0
 8005fe4:	025b      	lsls	r3, r3, #9
 8005fe6:	401a      	ands	r2, r3
 8005fe8:	23c0      	movs	r3, #192	@ 0xc0
 8005fea:	025b      	lsls	r3, r3, #9
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d109      	bne.n	8006004 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	4814      	ldr	r0, [pc, #80]	@ (8006044 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005ff4:	f7fa f89a 	bl	800012c <__udivsi3>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	001a      	movs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4353      	muls	r3, r2
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e008      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	480c      	ldr	r0, [pc, #48]	@ (8006038 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006008:	f7fa f890 	bl	800012c <__udivsi3>
 800600c:	0003      	movs	r3, r0
 800600e:	001a      	movs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4353      	muls	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	613b      	str	r3, [r7, #16]
      break;
 800601a:	e005      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800601c:	4b09      	ldr	r3, [pc, #36]	@ (8006044 <HAL_RCC_GetSysClockFreq+0xe0>)
 800601e:	613b      	str	r3, [r7, #16]
      break;
 8006020:	e002      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006022:	4b05      	ldr	r3, [pc, #20]	@ (8006038 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006024:	613b      	str	r3, [r7, #16]
      break;
 8006026:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006028:	693b      	ldr	r3, [r7, #16]
}
 800602a:	0018      	movs	r0, r3
 800602c:	46bd      	mov	sp, r7
 800602e:	b006      	add	sp, #24
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			@ (mov r8, r8)
 8006034:	40021000 	.word	0x40021000
 8006038:	007a1200 	.word	0x007a1200
 800603c:	0800c5c4 	.word	0x0800c5c4
 8006040:	0800c5d4 	.word	0x0800c5d4
 8006044:	02dc6c00 	.word	0x02dc6c00

08006048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4ab0      	ldr	r2, [pc, #704]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d904      	bls.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x24>
 8006062:	4bb0      	ldr	r3, [pc, #704]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006064:	216c      	movs	r1, #108	@ 0x6c
 8006066:	0018      	movs	r0, r3
 8006068:	f7fa fd7c 	bl	8000b64 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	2380      	movs	r3, #128	@ 0x80
 8006072:	025b      	lsls	r3, r3, #9
 8006074:	4013      	ands	r3, r2
 8006076:	d100      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006078:	e0a9      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	2380      	movs	r3, #128	@ 0x80
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	429a      	cmp	r2, r3
 800608c:	d010      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	2380      	movs	r3, #128	@ 0x80
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	429a      	cmp	r2, r3
 8006098:	d00a      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	23c0      	movs	r3, #192	@ 0xc0
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d004      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80060a6:	4b9f      	ldr	r3, [pc, #636]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80060a8:	2172      	movs	r1, #114	@ 0x72
 80060aa:	0018      	movs	r0, r3
 80060ac:	f7fa fd5a 	bl	8000b64 <assert_failed>
    
    FlagStatus       pwrclkchanged = RESET;
 80060b0:	2017      	movs	r0, #23
 80060b2:	183b      	adds	r3, r7, r0
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060b8:	4b9b      	ldr	r3, [pc, #620]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	2380      	movs	r3, #128	@ 0x80
 80060be:	055b      	lsls	r3, r3, #21
 80060c0:	4013      	ands	r3, r2
 80060c2:	d110      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060c4:	4b98      	ldr	r3, [pc, #608]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	4b97      	ldr	r3, [pc, #604]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80060ca:	2180      	movs	r1, #128	@ 0x80
 80060cc:	0549      	lsls	r1, r1, #21
 80060ce:	430a      	orrs	r2, r1
 80060d0:	61da      	str	r2, [r3, #28]
 80060d2:	4b95      	ldr	r3, [pc, #596]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80060d4:	69da      	ldr	r2, [r3, #28]
 80060d6:	2380      	movs	r3, #128	@ 0x80
 80060d8:	055b      	lsls	r3, r3, #21
 80060da:	4013      	ands	r3, r2
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060e0:	183b      	adds	r3, r7, r0
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e6:	4b91      	ldr	r3, [pc, #580]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	2380      	movs	r3, #128	@ 0x80
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	4013      	ands	r3, r2
 80060f0:	d11a      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060f2:	4b8e      	ldr	r3, [pc, #568]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b8d      	ldr	r3, [pc, #564]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060f8:	2180      	movs	r1, #128	@ 0x80
 80060fa:	0049      	lsls	r1, r1, #1
 80060fc:	430a      	orrs	r2, r1
 80060fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006100:	f7fa ff9e 	bl	8001040 <HAL_GetTick>
 8006104:	0003      	movs	r3, r0
 8006106:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006108:	e008      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800610a:	f7fa ff99 	bl	8001040 <HAL_GetTick>
 800610e:	0002      	movs	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b64      	cmp	r3, #100	@ 0x64
 8006116:	d901      	bls.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e0fd      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800611c:	4b83      	ldr	r3, [pc, #524]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	2380      	movs	r3, #128	@ 0x80
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4013      	ands	r3, r2
 8006126:	d0f0      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006128:	4b7f      	ldr	r3, [pc, #508]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	23c0      	movs	r3, #192	@ 0xc0
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d034      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	23c0      	movs	r3, #192	@ 0xc0
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4013      	ands	r3, r2
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	429a      	cmp	r2, r3
 8006148:	d02c      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800614a:	4b77      	ldr	r3, [pc, #476]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	4a78      	ldr	r2, [pc, #480]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006150:	4013      	ands	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006154:	4b74      	ldr	r3, [pc, #464]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	4b73      	ldr	r3, [pc, #460]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800615a:	2180      	movs	r1, #128	@ 0x80
 800615c:	0249      	lsls	r1, r1, #9
 800615e:	430a      	orrs	r2, r1
 8006160:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006162:	4b71      	ldr	r3, [pc, #452]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006164:	6a1a      	ldr	r2, [r3, #32]
 8006166:	4b70      	ldr	r3, [pc, #448]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006168:	4972      	ldr	r1, [pc, #456]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800616a:	400a      	ands	r2, r1
 800616c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800616e:	4b6e      	ldr	r3, [pc, #440]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	4013      	ands	r3, r2
 800617a:	d013      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617c:	f7fa ff60 	bl	8001040 <HAL_GetTick>
 8006180:	0003      	movs	r3, r0
 8006182:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006184:	e009      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x152>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006186:	f7fa ff5b 	bl	8001040 <HAL_GetTick>
 800618a:	0002      	movs	r2, r0
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	4a69      	ldr	r2, [pc, #420]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x152>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e0be      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800619a:	4b63      	ldr	r3, [pc, #396]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	2202      	movs	r2, #2
 80061a0:	4013      	ands	r3, r2
 80061a2:	d0f0      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061a4:	4b60      	ldr	r3, [pc, #384]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	4a61      	ldr	r2, [pc, #388]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	0019      	movs	r1, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80061b4:	430a      	orrs	r2, r1
 80061b6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80061b8:	2317      	movs	r3, #23
 80061ba:	18fb      	adds	r3, r7, r3
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d105      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061c2:	4b59      	ldr	r3, [pc, #356]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80061c4:	69da      	ldr	r2, [r3, #28]
 80061c6:	4b58      	ldr	r3, [pc, #352]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80061c8:	495c      	ldr	r1, [pc, #368]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ca:	400a      	ands	r2, r1
 80061cc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2201      	movs	r2, #1
 80061d4:	4013      	ands	r3, r2
 80061d6:	d01e      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d010      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d00c      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d008      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d004      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 80061f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80061fa:	21b9      	movs	r1, #185	@ 0xb9
 80061fc:	0018      	movs	r0, r3
 80061fe:	f7fa fcb1 	bl	8000b64 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006202:	4b49      	ldr	r3, [pc, #292]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006206:	2203      	movs	r2, #3
 8006208:	4393      	bics	r3, r2
 800620a:	0019      	movs	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	4b45      	ldr	r3, [pc, #276]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006212:	430a      	orrs	r2, r1
 8006214:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2202      	movs	r2, #2
 800621c:	4013      	ands	r3, r2
 800621e:	d024      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d016      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	2380      	movs	r3, #128	@ 0x80
 800622e:	025b      	lsls	r3, r3, #9
 8006230:	429a      	cmp	r2, r3
 8006232:	d010      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	2380      	movs	r3, #128	@ 0x80
 800623a:	029b      	lsls	r3, r3, #10
 800623c:	429a      	cmp	r2, r3
 800623e:	d00a      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	23c0      	movs	r3, #192	@ 0xc0
 8006246:	029b      	lsls	r3, r3, #10
 8006248:	429a      	cmp	r2, r3
 800624a:	d004      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800624c:	4b35      	ldr	r3, [pc, #212]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800624e:	21c5      	movs	r1, #197	@ 0xc5
 8006250:	0018      	movs	r0, r3
 8006252:	f7fa fc87 	bl	8000b64 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006256:	4b34      	ldr	r3, [pc, #208]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625a:	4a39      	ldr	r2, [pc, #228]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800625c:	4013      	ands	r3, r2
 800625e:	0019      	movs	r1, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	4b30      	ldr	r3, [pc, #192]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006266:	430a      	orrs	r2, r1
 8006268:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2220      	movs	r2, #32
 8006270:	4013      	ands	r3, r2
 8006272:	d016      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x246>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b10      	cmp	r3, #16
 8006282:	d004      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8006284:	4b27      	ldr	r3, [pc, #156]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006286:	21dd      	movs	r1, #221	@ 0xdd
 8006288:	0018      	movs	r0, r3
 800628a:	f7fa fc6b 	bl	8000b64 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800628e:	4b26      	ldr	r3, [pc, #152]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006292:	2210      	movs	r2, #16
 8006294:	4393      	bics	r3, r2
 8006296:	0019      	movs	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	4b22      	ldr	r3, [pc, #136]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800629e:	430a      	orrs	r2, r1
 80062a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	2380      	movs	r3, #128	@ 0x80
 80062a8:	029b      	lsls	r3, r3, #10
 80062aa:	4013      	ands	r3, r2
 80062ac:	d016      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	2b80      	cmp	r3, #128	@ 0x80
 80062bc:	d004      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80062be:	4b19      	ldr	r3, [pc, #100]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80062c0:	21e8      	movs	r1, #232	@ 0xe8
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7fa fc4e 	bl	8000b64 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062c8:	4b17      	ldr	r3, [pc, #92]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80062ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062cc:	2280      	movs	r2, #128	@ 0x80
 80062ce:	4393      	bics	r3, r2
 80062d0:	0019      	movs	r1, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	4b14      	ldr	r3, [pc, #80]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80062d8:	430a      	orrs	r2, r1
 80062da:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	2380      	movs	r3, #128	@ 0x80
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4013      	ands	r3, r2
 80062e6:	d016      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	d004      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80062f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80062fa:	21f7      	movs	r1, #247	@ 0xf7
 80062fc:	0018      	movs	r0, r3
 80062fe:	f7fa fc31 	bl	8000b64 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006302:	4b09      	ldr	r3, [pc, #36]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006306:	2240      	movs	r2, #64	@ 0x40
 8006308:	4393      	bics	r3, r2
 800630a:	0019      	movs	r1, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	695a      	ldr	r2, [r3, #20]
 8006310:	4b05      	ldr	r3, [pc, #20]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006312:	430a      	orrs	r2, r1
 8006314:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	b006      	add	sp, #24
 800631e:	bd80      	pop	{r7, pc}
 8006320:	00030423 	.word	0x00030423
 8006324:	0800c4d0 	.word	0x0800c4d0
 8006328:	40021000 	.word	0x40021000
 800632c:	40007000 	.word	0x40007000
 8006330:	fffffcff 	.word	0xfffffcff
 8006334:	fffeffff 	.word	0xfffeffff
 8006338:	00001388 	.word	0x00001388
 800633c:	efffffff 	.word	0xefffffff
 8006340:	fffcffff 	.word	0xfffcffff

08006344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e0e1      	b.n	800651a <HAL_TIM_Base_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a72      	ldr	r2, [pc, #456]	@ (8006524 <HAL_TIM_Base_Init+0x1e0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d030      	beq.n	80063c2 <HAL_TIM_Base_Init+0x7e>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	2380      	movs	r3, #128	@ 0x80
 8006366:	05db      	lsls	r3, r3, #23
 8006368:	429a      	cmp	r2, r3
 800636a:	d02a      	beq.n	80063c2 <HAL_TIM_Base_Init+0x7e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a6d      	ldr	r2, [pc, #436]	@ (8006528 <HAL_TIM_Base_Init+0x1e4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d025      	beq.n	80063c2 <HAL_TIM_Base_Init+0x7e>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a6c      	ldr	r2, [pc, #432]	@ (800652c <HAL_TIM_Base_Init+0x1e8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d020      	beq.n	80063c2 <HAL_TIM_Base_Init+0x7e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a6a      	ldr	r2, [pc, #424]	@ (8006530 <HAL_TIM_Base_Init+0x1ec>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01b      	beq.n	80063c2 <HAL_TIM_Base_Init+0x7e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a69      	ldr	r2, [pc, #420]	@ (8006534 <HAL_TIM_Base_Init+0x1f0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d016      	beq.n	80063c2 <HAL_TIM_Base_Init+0x7e>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a67      	ldr	r2, [pc, #412]	@ (8006538 <HAL_TIM_Base_Init+0x1f4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d011      	beq.n	80063c2 <HAL_TIM_Base_Init+0x7e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a66      	ldr	r2, [pc, #408]	@ (800653c <HAL_TIM_Base_Init+0x1f8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00c      	beq.n	80063c2 <HAL_TIM_Base_Init+0x7e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a64      	ldr	r2, [pc, #400]	@ (8006540 <HAL_TIM_Base_Init+0x1fc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d007      	beq.n	80063c2 <HAL_TIM_Base_Init+0x7e>
 80063b2:	2314      	movs	r3, #20
 80063b4:	33ff      	adds	r3, #255	@ 0xff
 80063b6:	001a      	movs	r2, r3
 80063b8:	4b62      	ldr	r3, [pc, #392]	@ (8006544 <HAL_TIM_Base_Init+0x200>)
 80063ba:	0011      	movs	r1, r2
 80063bc:	0018      	movs	r0, r3
 80063be:	f7fa fbd1 	bl	8000b64 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_TIM_Base_Init+0xb4>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d012      	beq.n	80063f8 <HAL_TIM_Base_Init+0xb4>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d00e      	beq.n	80063f8 <HAL_TIM_Base_Init+0xb4>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b40      	cmp	r3, #64	@ 0x40
 80063e0:	d00a      	beq.n	80063f8 <HAL_TIM_Base_Init+0xb4>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b60      	cmp	r3, #96	@ 0x60
 80063e8:	d006      	beq.n	80063f8 <HAL_TIM_Base_Init+0xb4>
 80063ea:	238a      	movs	r3, #138	@ 0x8a
 80063ec:	005a      	lsls	r2, r3, #1
 80063ee:	4b55      	ldr	r3, [pc, #340]	@ (8006544 <HAL_TIM_Base_Init+0x200>)
 80063f0:	0011      	movs	r1, r2
 80063f2:	0018      	movs	r0, r3
 80063f4:	f7fa fbb6 	bl	8000b64 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d013      	beq.n	8006428 <HAL_TIM_Base_Init+0xe4>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	2380      	movs	r3, #128	@ 0x80
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	429a      	cmp	r2, r3
 800640a:	d00d      	beq.n	8006428 <HAL_TIM_Base_Init+0xe4>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	2380      	movs	r3, #128	@ 0x80
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	429a      	cmp	r2, r3
 8006416:	d007      	beq.n	8006428 <HAL_TIM_Base_Init+0xe4>
 8006418:	2316      	movs	r3, #22
 800641a:	33ff      	adds	r3, #255	@ 0xff
 800641c:	001a      	movs	r2, r3
 800641e:	4b49      	ldr	r3, [pc, #292]	@ (8006544 <HAL_TIM_Base_Init+0x200>)
 8006420:	0011      	movs	r1, r2
 8006422:	0018      	movs	r0, r3
 8006424:	f7fa fb9e 	bl	8000b64 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	2380      	movs	r3, #128	@ 0x80
 800642e:	05db      	lsls	r3, r3, #23
 8006430:	429a      	cmp	r2, r3
 8006432:	d011      	beq.n	8006458 <HAL_TIM_Base_Init+0x114>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <HAL_TIM_Base_Init+0x108>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	2380      	movs	r3, #128	@ 0x80
 8006442:	025b      	lsls	r3, r3, #9
 8006444:	429a      	cmp	r2, r3
 8006446:	d201      	bcs.n	800644c <HAL_TIM_Base_Init+0x108>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <HAL_TIM_Base_Init+0x10a>
 800644c:	2300      	movs	r3, #0
 800644e:	1c1a      	adds	r2, r3, #0
 8006450:	2301      	movs	r3, #1
 8006452:	4013      	ands	r3, r2
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e004      	b.n	8006462 <HAL_TIM_Base_Init+0x11e>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	1e5a      	subs	r2, r3, #1
 800645e:	4193      	sbcs	r3, r2
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_TIM_Base_Init+0x130>
 8006466:	238b      	movs	r3, #139	@ 0x8b
 8006468:	005a      	lsls	r2, r3, #1
 800646a:	4b36      	ldr	r3, [pc, #216]	@ (8006544 <HAL_TIM_Base_Init+0x200>)
 800646c:	0011      	movs	r1, r2
 800646e:	0018      	movs	r0, r3
 8006470:	f7fa fb78 	bl	8000b64 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <HAL_TIM_Base_Init+0x150>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	2b80      	cmp	r3, #128	@ 0x80
 8006482:	d007      	beq.n	8006494 <HAL_TIM_Base_Init+0x150>
 8006484:	2318      	movs	r3, #24
 8006486:	33ff      	adds	r3, #255	@ 0xff
 8006488:	001a      	movs	r2, r3
 800648a:	4b2e      	ldr	r3, [pc, #184]	@ (8006544 <HAL_TIM_Base_Init+0x200>)
 800648c:	0011      	movs	r1, r2
 800648e:	0018      	movs	r0, r3
 8006490:	f7fa fb68 	bl	8000b64 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	223d      	movs	r2, #61	@ 0x3d
 8006498:	5c9b      	ldrb	r3, [r3, r2]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d107      	bne.n	80064b0 <HAL_TIM_Base_Init+0x16c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	223c      	movs	r2, #60	@ 0x3c
 80064a4:	2100      	movs	r1, #0
 80064a6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	0018      	movs	r0, r3
 80064ac:	f7fa fc6e 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	223d      	movs	r2, #61	@ 0x3d
 80064b4:	2102      	movs	r1, #2
 80064b6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	0019      	movs	r1, r3
 80064c2:	0010      	movs	r0, r2
 80064c4:	f000 fcfe 	bl	8006ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2246      	movs	r2, #70	@ 0x46
 80064cc:	2101      	movs	r1, #1
 80064ce:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	223e      	movs	r2, #62	@ 0x3e
 80064d4:	2101      	movs	r1, #1
 80064d6:	5499      	strb	r1, [r3, r2]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	223f      	movs	r2, #63	@ 0x3f
 80064dc:	2101      	movs	r1, #1
 80064de:	5499      	strb	r1, [r3, r2]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2240      	movs	r2, #64	@ 0x40
 80064e4:	2101      	movs	r1, #1
 80064e6:	5499      	strb	r1, [r3, r2]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2241      	movs	r2, #65	@ 0x41
 80064ec:	2101      	movs	r1, #1
 80064ee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2242      	movs	r2, #66	@ 0x42
 80064f4:	2101      	movs	r1, #1
 80064f6:	5499      	strb	r1, [r3, r2]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2243      	movs	r2, #67	@ 0x43
 80064fc:	2101      	movs	r1, #1
 80064fe:	5499      	strb	r1, [r3, r2]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2244      	movs	r2, #68	@ 0x44
 8006504:	2101      	movs	r1, #1
 8006506:	5499      	strb	r1, [r3, r2]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2245      	movs	r2, #69	@ 0x45
 800650c:	2101      	movs	r1, #1
 800650e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	223d      	movs	r2, #61	@ 0x3d
 8006514:	2101      	movs	r1, #1
 8006516:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	0018      	movs	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	b002      	add	sp, #8
 8006520:	bd80      	pop	{r7, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	40012c00 	.word	0x40012c00
 8006528:	40000400 	.word	0x40000400
 800652c:	40001000 	.word	0x40001000
 8006530:	40001400 	.word	0x40001400
 8006534:	40002000 	.word	0x40002000
 8006538:	40014000 	.word	0x40014000
 800653c:	40014400 	.word	0x40014400
 8006540:	40014800 	.word	0x40014800
 8006544:	0800c50c 	.word	0x0800c50c

08006548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a3d      	ldr	r2, [pc, #244]	@ (800664c <HAL_TIM_Base_Start_IT+0x104>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d02f      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x72>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	2380      	movs	r3, #128	@ 0x80
 8006560:	05db      	lsls	r3, r3, #23
 8006562:	429a      	cmp	r2, r3
 8006564:	d029      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x72>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a39      	ldr	r2, [pc, #228]	@ (8006650 <HAL_TIM_Base_Start_IT+0x108>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d024      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x72>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a37      	ldr	r2, [pc, #220]	@ (8006654 <HAL_TIM_Base_Start_IT+0x10c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d01f      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x72>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a36      	ldr	r2, [pc, #216]	@ (8006658 <HAL_TIM_Base_Start_IT+0x110>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d01a      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x72>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a34      	ldr	r2, [pc, #208]	@ (800665c <HAL_TIM_Base_Start_IT+0x114>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d015      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x72>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a33      	ldr	r2, [pc, #204]	@ (8006660 <HAL_TIM_Base_Start_IT+0x118>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d010      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x72>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a31      	ldr	r2, [pc, #196]	@ (8006664 <HAL_TIM_Base_Start_IT+0x11c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00b      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x72>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a30      	ldr	r2, [pc, #192]	@ (8006668 <HAL_TIM_Base_Start_IT+0x120>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d006      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x72>
 80065ac:	23e8      	movs	r3, #232	@ 0xe8
 80065ae:	005a      	lsls	r2, r3, #1
 80065b0:	4b2e      	ldr	r3, [pc, #184]	@ (800666c <HAL_TIM_Base_Start_IT+0x124>)
 80065b2:	0011      	movs	r1, r2
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7fa fad5 	bl	8000b64 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	223d      	movs	r2, #61	@ 0x3d
 80065be:	5c9b      	ldrb	r3, [r3, r2]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d001      	beq.n	80065ca <HAL_TIM_Base_Start_IT+0x82>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e03b      	b.n	8006642 <HAL_TIM_Base_Start_IT+0xfa>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	223d      	movs	r2, #61	@ 0x3d
 80065ce:	2102      	movs	r1, #2
 80065d0:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2101      	movs	r1, #1
 80065de:	430a      	orrs	r2, r1
 80065e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a19      	ldr	r2, [pc, #100]	@ (800664c <HAL_TIM_Base_Start_IT+0x104>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00f      	beq.n	800660c <HAL_TIM_Base_Start_IT+0xc4>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	2380      	movs	r3, #128	@ 0x80
 80065f2:	05db      	lsls	r3, r3, #23
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d009      	beq.n	800660c <HAL_TIM_Base_Start_IT+0xc4>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a14      	ldr	r2, [pc, #80]	@ (8006650 <HAL_TIM_Base_Start_IT+0x108>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_TIM_Base_Start_IT+0xc4>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a16      	ldr	r2, [pc, #88]	@ (8006660 <HAL_TIM_Base_Start_IT+0x118>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d111      	bne.n	8006630 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2207      	movs	r2, #7
 8006614:	4013      	ands	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b06      	cmp	r3, #6
 800661c:	d010      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0xf8>
    {
      __HAL_TIM_ENABLE(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2101      	movs	r1, #1
 800662a:	430a      	orrs	r2, r1
 800662c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662e:	e007      	b.n	8006640 <HAL_TIM_Base_Start_IT+0xf8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2101      	movs	r1, #1
 800663c:	430a      	orrs	r2, r1
 800663e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	0018      	movs	r0, r3
 8006644:	46bd      	mov	sp, r7
 8006646:	b004      	add	sp, #16
 8006648:	bd80      	pop	{r7, pc}
 800664a:	46c0      	nop			@ (mov r8, r8)
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40000400 	.word	0x40000400
 8006654:	40001000 	.word	0x40001000
 8006658:	40001400 	.word	0x40001400
 800665c:	40002000 	.word	0x40002000
 8006660:	40014000 	.word	0x40014000
 8006664:	40014400 	.word	0x40014400
 8006668:	40014800 	.word	0x40014800
 800666c:	0800c50c 	.word	0x0800c50c

08006670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2202      	movs	r2, #2
 800668c:	4013      	ands	r3, r2
 800668e:	d021      	beq.n	80066d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2202      	movs	r2, #2
 8006694:	4013      	ands	r3, r2
 8006696:	d01d      	beq.n	80066d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2203      	movs	r2, #3
 800669e:	4252      	negs	r2, r2
 80066a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2203      	movs	r2, #3
 80066b0:	4013      	ands	r3, r2
 80066b2:	d004      	beq.n	80066be <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	0018      	movs	r0, r3
 80066b8:	f000 fbec 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 80066bc:	e007      	b.n	80066ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	0018      	movs	r0, r3
 80066c2:	f000 fbdf 	bl	8006e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	0018      	movs	r0, r3
 80066ca:	f000 fbeb 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2204      	movs	r2, #4
 80066d8:	4013      	ands	r3, r2
 80066da:	d022      	beq.n	8006722 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2204      	movs	r2, #4
 80066e0:	4013      	ands	r3, r2
 80066e2:	d01e      	beq.n	8006722 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2205      	movs	r2, #5
 80066ea:	4252      	negs	r2, r2
 80066ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	23c0      	movs	r3, #192	@ 0xc0
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4013      	ands	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	0018      	movs	r0, r3
 8006706:	f000 fbc5 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 800670a:	e007      	b.n	800671c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	0018      	movs	r0, r3
 8006710:	f000 fbb8 	bl	8006e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	0018      	movs	r0, r3
 8006718:	f000 fbc4 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2208      	movs	r2, #8
 8006726:	4013      	ands	r3, r2
 8006728:	d021      	beq.n	800676e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2208      	movs	r2, #8
 800672e:	4013      	ands	r3, r2
 8006730:	d01d      	beq.n	800676e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2209      	movs	r2, #9
 8006738:	4252      	negs	r2, r2
 800673a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2204      	movs	r2, #4
 8006740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	2203      	movs	r2, #3
 800674a:	4013      	ands	r3, r2
 800674c:	d004      	beq.n	8006758 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	0018      	movs	r0, r3
 8006752:	f000 fb9f 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 8006756:	e007      	b.n	8006768 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	0018      	movs	r0, r3
 800675c:	f000 fb92 	bl	8006e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	0018      	movs	r0, r3
 8006764:	f000 fb9e 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2210      	movs	r2, #16
 8006772:	4013      	ands	r3, r2
 8006774:	d022      	beq.n	80067bc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2210      	movs	r2, #16
 800677a:	4013      	ands	r3, r2
 800677c:	d01e      	beq.n	80067bc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2211      	movs	r2, #17
 8006784:	4252      	negs	r2, r2
 8006786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2208      	movs	r2, #8
 800678c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69da      	ldr	r2, [r3, #28]
 8006794:	23c0      	movs	r3, #192	@ 0xc0
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4013      	ands	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	0018      	movs	r0, r3
 80067a0:	f000 fb78 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 80067a4:	e007      	b.n	80067b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	0018      	movs	r0, r3
 80067aa:	f000 fb6b 	bl	8006e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0018      	movs	r0, r3
 80067b2:	f000 fb77 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2201      	movs	r2, #1
 80067c0:	4013      	ands	r3, r2
 80067c2:	d00c      	beq.n	80067de <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	4013      	ands	r3, r2
 80067ca:	d008      	beq.n	80067de <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2202      	movs	r2, #2
 80067d2:	4252      	negs	r2, r2
 80067d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	0018      	movs	r0, r3
 80067da:	f7f9 fea7 	bl	800052c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2280      	movs	r2, #128	@ 0x80
 80067e2:	4013      	ands	r3, r2
 80067e4:	d00c      	beq.n	8006800 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2280      	movs	r2, #128	@ 0x80
 80067ea:	4013      	ands	r3, r2
 80067ec:	d008      	beq.n	8006800 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2281      	movs	r2, #129	@ 0x81
 80067f4:	4252      	negs	r2, r2
 80067f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	0018      	movs	r0, r3
 80067fc:	f000 fd56 	bl	80072ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2240      	movs	r2, #64	@ 0x40
 8006804:	4013      	ands	r3, r2
 8006806:	d00c      	beq.n	8006822 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2240      	movs	r2, #64	@ 0x40
 800680c:	4013      	ands	r3, r2
 800680e:	d008      	beq.n	8006822 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2241      	movs	r2, #65	@ 0x41
 8006816:	4252      	negs	r2, r2
 8006818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 fb49 	bl	8006eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2220      	movs	r2, #32
 8006826:	4013      	ands	r3, r2
 8006828:	d00c      	beq.n	8006844 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	4013      	ands	r3, r2
 8006830:	d008      	beq.n	8006844 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2221      	movs	r2, #33	@ 0x21
 8006838:	4252      	negs	r2, r2
 800683a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	0018      	movs	r0, r3
 8006840:	f000 fd2c 	bl	800729c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b004      	add	sp, #16
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006856:	230f      	movs	r3, #15
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	223c      	movs	r2, #60	@ 0x3c
 8006862:	5c9b      	ldrb	r3, [r3, r2]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIM_ConfigClockSource+0x20>
 8006868:	2302      	movs	r3, #2
 800686a:	e2eb      	b.n	8006e44 <HAL_TIM_ConfigClockSource+0x5f8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	223c      	movs	r2, #60	@ 0x3c
 8006870:	2101      	movs	r1, #1
 8006872:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	223d      	movs	r2, #61	@ 0x3d
 8006878:	2102      	movs	r1, #2
 800687a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	2380      	movs	r3, #128	@ 0x80
 8006882:	015b      	lsls	r3, r3, #5
 8006884:	429a      	cmp	r2, r3
 8006886:	d02b      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x94>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b70      	cmp	r3, #112	@ 0x70
 800688e:	d027      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x94>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	2380      	movs	r3, #128	@ 0x80
 8006896:	019b      	lsls	r3, r3, #6
 8006898:	429a      	cmp	r2, r3
 800689a:	d021      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x94>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b40      	cmp	r3, #64	@ 0x40
 80068a2:	d01d      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x94>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b50      	cmp	r3, #80	@ 0x50
 80068aa:	d019      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x94>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b60      	cmp	r3, #96	@ 0x60
 80068b2:	d015      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x94>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d011      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x94>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b10      	cmp	r3, #16
 80068c2:	d00d      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x94>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d009      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x94>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b30      	cmp	r3, #48	@ 0x30
 80068d2:	d005      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0x94>
 80068d4:	4ab3      	ldr	r2, [pc, #716]	@ (8006ba4 <HAL_TIM_ConfigClockSource+0x358>)
 80068d6:	4bb4      	ldr	r3, [pc, #720]	@ (8006ba8 <HAL_TIM_ConfigClockSource+0x35c>)
 80068d8:	0011      	movs	r1, r2
 80068da:	0018      	movs	r0, r3
 80068dc:	f7fa f942 	bl	8000b64 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2277      	movs	r2, #119	@ 0x77
 80068ec:	4393      	bics	r3, r2
 80068ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4aae      	ldr	r2, [pc, #696]	@ (8006bac <HAL_TIM_ConfigClockSource+0x360>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2280      	movs	r2, #128	@ 0x80
 8006906:	0192      	lsls	r2, r2, #6
 8006908:	4293      	cmp	r3, r2
 800690a:	d100      	bne.n	800690e <HAL_TIM_ConfigClockSource+0xc2>
 800690c:	e0de      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x280>
 800690e:	2280      	movs	r2, #128	@ 0x80
 8006910:	0192      	lsls	r2, r2, #6
 8006912:	4293      	cmp	r3, r2
 8006914:	d900      	bls.n	8006918 <HAL_TIM_ConfigClockSource+0xcc>
 8006916:	e284      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x5d6>
 8006918:	2280      	movs	r2, #128	@ 0x80
 800691a:	0152      	lsls	r2, r2, #5
 800691c:	4293      	cmp	r3, r2
 800691e:	d028      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0x126>
 8006920:	2280      	movs	r2, #128	@ 0x80
 8006922:	0152      	lsls	r2, r2, #5
 8006924:	4293      	cmp	r3, r2
 8006926:	d900      	bls.n	800692a <HAL_TIM_ConfigClockSource+0xde>
 8006928:	e27b      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x5d6>
 800692a:	2b70      	cmp	r3, #112	@ 0x70
 800692c:	d05f      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x1a2>
 800692e:	d900      	bls.n	8006932 <HAL_TIM_ConfigClockSource+0xe6>
 8006930:	e277      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x5d6>
 8006932:	2b60      	cmp	r3, #96	@ 0x60
 8006934:	d100      	bne.n	8006938 <HAL_TIM_ConfigClockSource+0xec>
 8006936:	e1ae      	b.n	8006c96 <HAL_TIM_ConfigClockSource+0x44a>
 8006938:	d900      	bls.n	800693c <HAL_TIM_ConfigClockSource+0xf0>
 800693a:	e272      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x5d6>
 800693c:	2b50      	cmp	r3, #80	@ 0x50
 800693e:	d100      	bne.n	8006942 <HAL_TIM_ConfigClockSource+0xf6>
 8006940:	e158      	b.n	8006bf4 <HAL_TIM_ConfigClockSource+0x3a8>
 8006942:	d900      	bls.n	8006946 <HAL_TIM_ConfigClockSource+0xfa>
 8006944:	e26d      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x5d6>
 8006946:	2b40      	cmp	r3, #64	@ 0x40
 8006948:	d100      	bne.n	800694c <HAL_TIM_ConfigClockSource+0x100>
 800694a:	e1f5      	b.n	8006d38 <HAL_TIM_ConfigClockSource+0x4ec>
 800694c:	d900      	bls.n	8006950 <HAL_TIM_ConfigClockSource+0x104>
 800694e:	e268      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x5d6>
 8006950:	2b30      	cmp	r3, #48	@ 0x30
 8006952:	d100      	bne.n	8006956 <HAL_TIM_ConfigClockSource+0x10a>
 8006954:	e241      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x58e>
 8006956:	d900      	bls.n	800695a <HAL_TIM_ConfigClockSource+0x10e>
 8006958:	e263      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x5d6>
 800695a:	2b20      	cmp	r3, #32
 800695c:	d100      	bne.n	8006960 <HAL_TIM_ConfigClockSource+0x114>
 800695e:	e23c      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x58e>
 8006960:	d900      	bls.n	8006964 <HAL_TIM_ConfigClockSource+0x118>
 8006962:	e25e      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x5d6>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d100      	bne.n	800696a <HAL_TIM_ConfigClockSource+0x11e>
 8006968:	e237      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x58e>
 800696a:	2b10      	cmp	r3, #16
 800696c:	d100      	bne.n	8006970 <HAL_TIM_ConfigClockSource+0x124>
 800696e:	e234      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x58e>
 8006970:	e257      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x5d6>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a8e      	ldr	r2, [pc, #568]	@ (8006bb0 <HAL_TIM_ConfigClockSource+0x364>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d100      	bne.n	800697e <HAL_TIM_ConfigClockSource+0x132>
 800697c:	e256      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x5e0>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	2380      	movs	r3, #128	@ 0x80
 8006984:	05db      	lsls	r3, r3, #23
 8006986:	429a      	cmp	r2, r3
 8006988:	d100      	bne.n	800698c <HAL_TIM_ConfigClockSource+0x140>
 800698a:	e24f      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x5e0>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a88      	ldr	r2, [pc, #544]	@ (8006bb4 <HAL_TIM_ConfigClockSource+0x368>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d100      	bne.n	8006998 <HAL_TIM_ConfigClockSource+0x14c>
 8006996:	e249      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x5e0>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a86      	ldr	r2, [pc, #536]	@ (8006bb8 <HAL_TIM_ConfigClockSource+0x36c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d100      	bne.n	80069a4 <HAL_TIM_ConfigClockSource+0x158>
 80069a2:	e243      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x5e0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a84      	ldr	r2, [pc, #528]	@ (8006bbc <HAL_TIM_ConfigClockSource+0x370>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d100      	bne.n	80069b0 <HAL_TIM_ConfigClockSource+0x164>
 80069ae:	e23d      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x5e0>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a82      	ldr	r2, [pc, #520]	@ (8006bc0 <HAL_TIM_ConfigClockSource+0x374>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d100      	bne.n	80069bc <HAL_TIM_ConfigClockSource+0x170>
 80069ba:	e237      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x5e0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a80      	ldr	r2, [pc, #512]	@ (8006bc4 <HAL_TIM_ConfigClockSource+0x378>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d100      	bne.n	80069c8 <HAL_TIM_ConfigClockSource+0x17c>
 80069c6:	e231      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x5e0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a7e      	ldr	r2, [pc, #504]	@ (8006bc8 <HAL_TIM_ConfigClockSource+0x37c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d100      	bne.n	80069d4 <HAL_TIM_ConfigClockSource+0x188>
 80069d2:	e22b      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x5e0>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a7c      	ldr	r2, [pc, #496]	@ (8006bcc <HAL_TIM_ConfigClockSource+0x380>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d100      	bne.n	80069e0 <HAL_TIM_ConfigClockSource+0x194>
 80069de:	e225      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x5e0>
 80069e0:	4a7b      	ldr	r2, [pc, #492]	@ (8006bd0 <HAL_TIM_ConfigClockSource+0x384>)
 80069e2:	4b71      	ldr	r3, [pc, #452]	@ (8006ba8 <HAL_TIM_ConfigClockSource+0x35c>)
 80069e4:	0011      	movs	r1, r2
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7fa f8bc 	bl	8000b64 <assert_failed>
      break;
 80069ec:	e21e      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x5e0>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a6f      	ldr	r2, [pc, #444]	@ (8006bb0 <HAL_TIM_ConfigClockSource+0x364>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d010      	beq.n	8006a1a <HAL_TIM_ConfigClockSource+0x1ce>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	2380      	movs	r3, #128	@ 0x80
 80069fe:	05db      	lsls	r3, r3, #23
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d00a      	beq.n	8006a1a <HAL_TIM_ConfigClockSource+0x1ce>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a6a      	ldr	r2, [pc, #424]	@ (8006bb4 <HAL_TIM_ConfigClockSource+0x368>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d005      	beq.n	8006a1a <HAL_TIM_ConfigClockSource+0x1ce>
 8006a0e:	4a71      	ldr	r2, [pc, #452]	@ (8006bd4 <HAL_TIM_ConfigClockSource+0x388>)
 8006a10:	4b65      	ldr	r3, [pc, #404]	@ (8006ba8 <HAL_TIM_ConfigClockSource+0x35c>)
 8006a12:	0011      	movs	r1, r2
 8006a14:	0018      	movs	r0, r3
 8006a16:	f7fa f8a5 	bl	8000b64 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d017      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x206>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	2380      	movs	r3, #128	@ 0x80
 8006a28:	015b      	lsls	r3, r3, #5
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d011      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x206>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	2380      	movs	r3, #128	@ 0x80
 8006a34:	019b      	lsls	r3, r3, #6
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d00b      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x206>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	23c0      	movs	r3, #192	@ 0xc0
 8006a40:	019b      	lsls	r3, r3, #6
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d005      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x206>
 8006a46:	4a64      	ldr	r2, [pc, #400]	@ (8006bd8 <HAL_TIM_ConfigClockSource+0x38c>)
 8006a48:	4b57      	ldr	r3, [pc, #348]	@ (8006ba8 <HAL_TIM_ConfigClockSource+0x35c>)
 8006a4a:	0011      	movs	r1, r2
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f7fa f889 	bl	8000b64 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	2380      	movs	r3, #128	@ 0x80
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d015      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x23e>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d011      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x23e>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00d      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x23e>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d009      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x23e>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b0a      	cmp	r3, #10
 8006a7c:	d005      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x23e>
 8006a7e:	4a57      	ldr	r2, [pc, #348]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x390>)
 8006a80:	4b49      	ldr	r3, [pc, #292]	@ (8006ba8 <HAL_TIM_ConfigClockSource+0x35c>)
 8006a82:	0011      	movs	r1, r2
 8006a84:	0018      	movs	r0, r3
 8006a86:	f7fa f86d 	bl	8000b64 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b0f      	cmp	r3, #15
 8006a90:	d905      	bls.n	8006a9e <HAL_TIM_ConfigClockSource+0x252>
 8006a92:	4a53      	ldr	r2, [pc, #332]	@ (8006be0 <HAL_TIM_ConfigClockSource+0x394>)
 8006a94:	4b44      	ldr	r3, [pc, #272]	@ (8006ba8 <HAL_TIM_ConfigClockSource+0x35c>)
 8006a96:	0011      	movs	r1, r2
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7fa f863 	bl	8000b64 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006aae:	f000 fb11 	bl	80070d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2277      	movs	r2, #119	@ 0x77
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	609a      	str	r2, [r3, #8]
      break;
 8006aca:	e1b0      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x5e2>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a37      	ldr	r2, [pc, #220]	@ (8006bb0 <HAL_TIM_ConfigClockSource+0x364>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d010      	beq.n	8006af8 <HAL_TIM_ConfigClockSource+0x2ac>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	2380      	movs	r3, #128	@ 0x80
 8006adc:	05db      	lsls	r3, r3, #23
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d00a      	beq.n	8006af8 <HAL_TIM_ConfigClockSource+0x2ac>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a33      	ldr	r2, [pc, #204]	@ (8006bb4 <HAL_TIM_ConfigClockSource+0x368>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d005      	beq.n	8006af8 <HAL_TIM_ConfigClockSource+0x2ac>
 8006aec:	4a3d      	ldr	r2, [pc, #244]	@ (8006be4 <HAL_TIM_ConfigClockSource+0x398>)
 8006aee:	4b2e      	ldr	r3, [pc, #184]	@ (8006ba8 <HAL_TIM_ConfigClockSource+0x35c>)
 8006af0:	0011      	movs	r1, r2
 8006af2:	0018      	movs	r0, r3
 8006af4:	f7fa f836 	bl	8000b64 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d017      	beq.n	8006b30 <HAL_TIM_ConfigClockSource+0x2e4>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	2380      	movs	r3, #128	@ 0x80
 8006b06:	015b      	lsls	r3, r3, #5
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d011      	beq.n	8006b30 <HAL_TIM_ConfigClockSource+0x2e4>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	2380      	movs	r3, #128	@ 0x80
 8006b12:	019b      	lsls	r3, r3, #6
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d00b      	beq.n	8006b30 <HAL_TIM_ConfigClockSource+0x2e4>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	23c0      	movs	r3, #192	@ 0xc0
 8006b1e:	019b      	lsls	r3, r3, #6
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d005      	beq.n	8006b30 <HAL_TIM_ConfigClockSource+0x2e4>
 8006b24:	4a30      	ldr	r2, [pc, #192]	@ (8006be8 <HAL_TIM_ConfigClockSource+0x39c>)
 8006b26:	4b20      	ldr	r3, [pc, #128]	@ (8006ba8 <HAL_TIM_ConfigClockSource+0x35c>)
 8006b28:	0011      	movs	r1, r2
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	f7fa f81a 	bl	8000b64 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	2380      	movs	r3, #128	@ 0x80
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d015      	beq.n	8006b68 <HAL_TIM_ConfigClockSource+0x31c>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d011      	beq.n	8006b68 <HAL_TIM_ConfigClockSource+0x31c>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00d      	beq.n	8006b68 <HAL_TIM_ConfigClockSource+0x31c>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d009      	beq.n	8006b68 <HAL_TIM_ConfigClockSource+0x31c>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b0a      	cmp	r3, #10
 8006b5a:	d005      	beq.n	8006b68 <HAL_TIM_ConfigClockSource+0x31c>
 8006b5c:	4a23      	ldr	r2, [pc, #140]	@ (8006bec <HAL_TIM_ConfigClockSource+0x3a0>)
 8006b5e:	4b12      	ldr	r3, [pc, #72]	@ (8006ba8 <HAL_TIM_ConfigClockSource+0x35c>)
 8006b60:	0011      	movs	r1, r2
 8006b62:	0018      	movs	r0, r3
 8006b64:	f7f9 fffe 	bl	8000b64 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	2b0f      	cmp	r3, #15
 8006b6e:	d905      	bls.n	8006b7c <HAL_TIM_ConfigClockSource+0x330>
 8006b70:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf0 <HAL_TIM_ConfigClockSource+0x3a4>)
 8006b72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba8 <HAL_TIM_ConfigClockSource+0x35c>)
 8006b74:	0011      	movs	r1, r2
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7f9 fff4 	bl	8000b64 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b8c:	f000 faa2 	bl	80070d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2180      	movs	r1, #128	@ 0x80
 8006b9c:	01c9      	lsls	r1, r1, #7
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	609a      	str	r2, [r3, #8]
      break;
 8006ba2:	e144      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x5e2>
 8006ba4:	000014cc 	.word	0x000014cc
 8006ba8:	0800c50c 	.word	0x0800c50c
 8006bac:	ffff00ff 	.word	0xffff00ff
 8006bb0:	40012c00 	.word	0x40012c00
 8006bb4:	40000400 	.word	0x40000400
 8006bb8:	40001000 	.word	0x40001000
 8006bbc:	40001400 	.word	0x40001400
 8006bc0:	40002000 	.word	0x40002000
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800
 8006bd0:	000014d8 	.word	0x000014d8
 8006bd4:	000014df 	.word	0x000014df
 8006bd8:	000014e2 	.word	0x000014e2
 8006bdc:	000014e3 	.word	0x000014e3
 8006be0:	000014e4 	.word	0x000014e4
 8006be4:	000014f7 	.word	0x000014f7
 8006be8:	000014fa 	.word	0x000014fa
 8006bec:	000014fb 	.word	0x000014fb
 8006bf0:	000014fc 	.word	0x000014fc
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a94      	ldr	r2, [pc, #592]	@ (8006e4c <HAL_TIM_ConfigClockSource+0x600>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d015      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x3de>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	2380      	movs	r3, #128	@ 0x80
 8006c04:	05db      	lsls	r3, r3, #23
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d00f      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x3de>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a90      	ldr	r2, [pc, #576]	@ (8006e50 <HAL_TIM_ConfigClockSource+0x604>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00a      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x3de>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a8e      	ldr	r2, [pc, #568]	@ (8006e54 <HAL_TIM_ConfigClockSource+0x608>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d005      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x3de>
 8006c1e:	4a8e      	ldr	r2, [pc, #568]	@ (8006e58 <HAL_TIM_ConfigClockSource+0x60c>)
 8006c20:	4b8e      	ldr	r3, [pc, #568]	@ (8006e5c <HAL_TIM_ConfigClockSource+0x610>)
 8006c22:	0011      	movs	r1, r2
 8006c24:	0018      	movs	r0, r3
 8006c26:	f7f9 ff9d 	bl	8000b64 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	2380      	movs	r3, #128	@ 0x80
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d015      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x416>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d011      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x416>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00d      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x416>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d009      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x416>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b0a      	cmp	r3, #10
 8006c54:	d005      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x416>
 8006c56:	4a82      	ldr	r2, [pc, #520]	@ (8006e60 <HAL_TIM_ConfigClockSource+0x614>)
 8006c58:	4b80      	ldr	r3, [pc, #512]	@ (8006e5c <HAL_TIM_ConfigClockSource+0x610>)
 8006c5a:	0011      	movs	r1, r2
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7f9 ff81 	bl	8000b64 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b0f      	cmp	r3, #15
 8006c68:	d905      	bls.n	8006c76 <HAL_TIM_ConfigClockSource+0x42a>
 8006c6a:	4a7e      	ldr	r2, [pc, #504]	@ (8006e64 <HAL_TIM_ConfigClockSource+0x618>)
 8006c6c:	4b7b      	ldr	r3, [pc, #492]	@ (8006e5c <HAL_TIM_ConfigClockSource+0x610>)
 8006c6e:	0011      	movs	r1, r2
 8006c70:	0018      	movs	r0, r3
 8006c72:	f7f9 ff77 	bl	8000b64 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c82:	001a      	movs	r2, r3
 8006c84:	f000 f9ac 	bl	8006fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2150      	movs	r1, #80	@ 0x50
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f000 fa06 	bl	80070a0 <TIM_ITRx_SetConfig>
      break;
 8006c94:	e0cb      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x5e2>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a6c      	ldr	r2, [pc, #432]	@ (8006e4c <HAL_TIM_ConfigClockSource+0x600>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d015      	beq.n	8006ccc <HAL_TIM_ConfigClockSource+0x480>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	2380      	movs	r3, #128	@ 0x80
 8006ca6:	05db      	lsls	r3, r3, #23
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d00f      	beq.n	8006ccc <HAL_TIM_ConfigClockSource+0x480>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a67      	ldr	r2, [pc, #412]	@ (8006e50 <HAL_TIM_ConfigClockSource+0x604>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00a      	beq.n	8006ccc <HAL_TIM_ConfigClockSource+0x480>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a66      	ldr	r2, [pc, #408]	@ (8006e54 <HAL_TIM_ConfigClockSource+0x608>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d005      	beq.n	8006ccc <HAL_TIM_ConfigClockSource+0x480>
 8006cc0:	4a69      	ldr	r2, [pc, #420]	@ (8006e68 <HAL_TIM_ConfigClockSource+0x61c>)
 8006cc2:	4b66      	ldr	r3, [pc, #408]	@ (8006e5c <HAL_TIM_ConfigClockSource+0x610>)
 8006cc4:	0011      	movs	r1, r2
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	f7f9 ff4c 	bl	8000b64 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	2380      	movs	r3, #128	@ 0x80
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d015      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0x4b8>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d011      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0x4b8>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00d      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0x4b8>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d009      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0x4b8>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b0a      	cmp	r3, #10
 8006cf6:	d005      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0x4b8>
 8006cf8:	4a5c      	ldr	r2, [pc, #368]	@ (8006e6c <HAL_TIM_ConfigClockSource+0x620>)
 8006cfa:	4b58      	ldr	r3, [pc, #352]	@ (8006e5c <HAL_TIM_ConfigClockSource+0x610>)
 8006cfc:	0011      	movs	r1, r2
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f7f9 ff30 	bl	8000b64 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2b0f      	cmp	r3, #15
 8006d0a:	d905      	bls.n	8006d18 <HAL_TIM_ConfigClockSource+0x4cc>
 8006d0c:	4a58      	ldr	r2, [pc, #352]	@ (8006e70 <HAL_TIM_ConfigClockSource+0x624>)
 8006d0e:	4b53      	ldr	r3, [pc, #332]	@ (8006e5c <HAL_TIM_ConfigClockSource+0x610>)
 8006d10:	0011      	movs	r1, r2
 8006d12:	0018      	movs	r0, r3
 8006d14:	f7f9 ff26 	bl	8000b64 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d24:	001a      	movs	r2, r3
 8006d26:	f000 f989 	bl	800703c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2160      	movs	r1, #96	@ 0x60
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 f9b5 	bl	80070a0 <TIM_ITRx_SetConfig>
      break;
 8006d36:	e07a      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x5e2>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a43      	ldr	r2, [pc, #268]	@ (8006e4c <HAL_TIM_ConfigClockSource+0x600>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d015      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x522>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	2380      	movs	r3, #128	@ 0x80
 8006d48:	05db      	lsls	r3, r3, #23
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d00f      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x522>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a3f      	ldr	r2, [pc, #252]	@ (8006e50 <HAL_TIM_ConfigClockSource+0x604>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00a      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x522>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a3d      	ldr	r2, [pc, #244]	@ (8006e54 <HAL_TIM_ConfigClockSource+0x608>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d005      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x522>
 8006d62:	4a44      	ldr	r2, [pc, #272]	@ (8006e74 <HAL_TIM_ConfigClockSource+0x628>)
 8006d64:	4b3d      	ldr	r3, [pc, #244]	@ (8006e5c <HAL_TIM_ConfigClockSource+0x610>)
 8006d66:	0011      	movs	r1, r2
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f7f9 fefb 	bl	8000b64 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	2380      	movs	r3, #128	@ 0x80
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d015      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x55a>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d011      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x55a>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x55a>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d009      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x55a>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b0a      	cmp	r3, #10
 8006d98:	d005      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x55a>
 8006d9a:	4a37      	ldr	r2, [pc, #220]	@ (8006e78 <HAL_TIM_ConfigClockSource+0x62c>)
 8006d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8006e5c <HAL_TIM_ConfigClockSource+0x610>)
 8006d9e:	0011      	movs	r1, r2
 8006da0:	0018      	movs	r0, r3
 8006da2:	f7f9 fedf 	bl	8000b64 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	2b0f      	cmp	r3, #15
 8006dac:	d905      	bls.n	8006dba <HAL_TIM_ConfigClockSource+0x56e>
 8006dae:	4a33      	ldr	r2, [pc, #204]	@ (8006e7c <HAL_TIM_ConfigClockSource+0x630>)
 8006db0:	4b2a      	ldr	r3, [pc, #168]	@ (8006e5c <HAL_TIM_ConfigClockSource+0x610>)
 8006db2:	0011      	movs	r1, r2
 8006db4:	0018      	movs	r0, r3
 8006db6:	f7f9 fed5 	bl	8000b64 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc6:	001a      	movs	r2, r3
 8006dc8:	f000 f90a 	bl	8006fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2140      	movs	r1, #64	@ 0x40
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f000 f964 	bl	80070a0 <TIM_ITRx_SetConfig>
      break;
 8006dd8:	e029      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x5e2>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a1b      	ldr	r2, [pc, #108]	@ (8006e4c <HAL_TIM_ConfigClockSource+0x600>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d015      	beq.n	8006e10 <HAL_TIM_ConfigClockSource+0x5c4>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	2380      	movs	r3, #128	@ 0x80
 8006dea:	05db      	lsls	r3, r3, #23
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d00f      	beq.n	8006e10 <HAL_TIM_ConfigClockSource+0x5c4>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a16      	ldr	r2, [pc, #88]	@ (8006e50 <HAL_TIM_ConfigClockSource+0x604>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00a      	beq.n	8006e10 <HAL_TIM_ConfigClockSource+0x5c4>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a15      	ldr	r2, [pc, #84]	@ (8006e54 <HAL_TIM_ConfigClockSource+0x608>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d005      	beq.n	8006e10 <HAL_TIM_ConfigClockSource+0x5c4>
 8006e04:	4a1e      	ldr	r2, [pc, #120]	@ (8006e80 <HAL_TIM_ConfigClockSource+0x634>)
 8006e06:	4b15      	ldr	r3, [pc, #84]	@ (8006e5c <HAL_TIM_ConfigClockSource+0x610>)
 8006e08:	0011      	movs	r1, r2
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f7f9 feaa 	bl	8000b64 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	0019      	movs	r1, r3
 8006e1a:	0010      	movs	r0, r2
 8006e1c:	f000 f940 	bl	80070a0 <TIM_ITRx_SetConfig>
      break;
 8006e20:	e005      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x5e2>
    }

    default:
      status = HAL_ERROR;
 8006e22:	230f      	movs	r3, #15
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	2201      	movs	r2, #1
 8006e28:	701a      	strb	r2, [r3, #0]
      break;
 8006e2a:	e000      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x5e2>
      break;
 8006e2c:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	223d      	movs	r2, #61	@ 0x3d
 8006e32:	2101      	movs	r1, #1
 8006e34:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	223c      	movs	r2, #60	@ 0x3c
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	5499      	strb	r1, [r3, r2]

  return status;
 8006e3e:	230f      	movs	r3, #15
 8006e40:	18fb      	adds	r3, r7, r3
 8006e42:	781b      	ldrb	r3, [r3, #0]
}
 8006e44:	0018      	movs	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b004      	add	sp, #16
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	40012c00 	.word	0x40012c00
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40014000 	.word	0x40014000
 8006e58:	0000150b 	.word	0x0000150b
 8006e5c:	0800c50c 	.word	0x0800c50c
 8006e60:	0000150e 	.word	0x0000150e
 8006e64:	0000150f 	.word	0x0000150f
 8006e68:	0000151b 	.word	0x0000151b
 8006e6c:	0000151e 	.word	0x0000151e
 8006e70:	0000151f 	.word	0x0000151f
 8006e74:	0000152b 	.word	0x0000152b
 8006e78:	0000152e 	.word	0x0000152e
 8006e7c:	0000152f 	.word	0x0000152f
 8006e80:	0000153e 	.word	0x0000153e

08006e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e8c:	46c0      	nop			@ (mov r8, r8)
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	b002      	add	sp, #8
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e9c:	46c0      	nop			@ (mov r8, r8)
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eac:	46c0      	nop			@ (mov r8, r8)
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b002      	add	sp, #8
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ebc:	46c0      	nop			@ (mov r8, r8)
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b002      	add	sp, #8
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a3b      	ldr	r2, [pc, #236]	@ (8006fc4 <TIM_Base_SetConfig+0x100>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d008      	beq.n	8006eee <TIM_Base_SetConfig+0x2a>
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	2380      	movs	r3, #128	@ 0x80
 8006ee0:	05db      	lsls	r3, r3, #23
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d003      	beq.n	8006eee <TIM_Base_SetConfig+0x2a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a37      	ldr	r2, [pc, #220]	@ (8006fc8 <TIM_Base_SetConfig+0x104>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d108      	bne.n	8006f00 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2270      	movs	r2, #112	@ 0x70
 8006ef2:	4393      	bics	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a30      	ldr	r2, [pc, #192]	@ (8006fc4 <TIM_Base_SetConfig+0x100>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d018      	beq.n	8006f3a <TIM_Base_SetConfig+0x76>
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	2380      	movs	r3, #128	@ 0x80
 8006f0c:	05db      	lsls	r3, r3, #23
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d013      	beq.n	8006f3a <TIM_Base_SetConfig+0x76>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a2c      	ldr	r2, [pc, #176]	@ (8006fc8 <TIM_Base_SetConfig+0x104>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00f      	beq.n	8006f3a <TIM_Base_SetConfig+0x76>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8006fcc <TIM_Base_SetConfig+0x108>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00b      	beq.n	8006f3a <TIM_Base_SetConfig+0x76>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2a      	ldr	r2, [pc, #168]	@ (8006fd0 <TIM_Base_SetConfig+0x10c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d007      	beq.n	8006f3a <TIM_Base_SetConfig+0x76>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a29      	ldr	r2, [pc, #164]	@ (8006fd4 <TIM_Base_SetConfig+0x110>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d003      	beq.n	8006f3a <TIM_Base_SetConfig+0x76>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a28      	ldr	r2, [pc, #160]	@ (8006fd8 <TIM_Base_SetConfig+0x114>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d108      	bne.n	8006f4c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4a27      	ldr	r2, [pc, #156]	@ (8006fdc <TIM_Base_SetConfig+0x118>)
 8006f3e:	4013      	ands	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2280      	movs	r2, #128	@ 0x80
 8006f50:	4393      	bics	r3, r2
 8006f52:	001a      	movs	r2, r3
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a13      	ldr	r2, [pc, #76]	@ (8006fc4 <TIM_Base_SetConfig+0x100>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00b      	beq.n	8006f92 <TIM_Base_SetConfig+0xce>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a14      	ldr	r2, [pc, #80]	@ (8006fd0 <TIM_Base_SetConfig+0x10c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d007      	beq.n	8006f92 <TIM_Base_SetConfig+0xce>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a13      	ldr	r2, [pc, #76]	@ (8006fd4 <TIM_Base_SetConfig+0x110>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d003      	beq.n	8006f92 <TIM_Base_SetConfig+0xce>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a12      	ldr	r2, [pc, #72]	@ (8006fd8 <TIM_Base_SetConfig+0x114>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d103      	bne.n	8006f9a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d106      	bne.n	8006fba <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	4393      	bics	r3, r2
 8006fb4:	001a      	movs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	611a      	str	r2, [r3, #16]
  }
}
 8006fba:	46c0      	nop			@ (mov r8, r8)
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	b004      	add	sp, #16
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	46c0      	nop			@ (mov r8, r8)
 8006fc4:	40012c00 	.word	0x40012c00
 8006fc8:	40000400 	.word	0x40000400
 8006fcc:	40002000 	.word	0x40002000
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40014400 	.word	0x40014400
 8006fd8:	40014800 	.word	0x40014800
 8006fdc:	fffffcff 	.word	0xfffffcff

08006fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	4393      	bics	r3, r2
 8006ffa:	001a      	movs	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	22f0      	movs	r2, #240	@ 0xf0
 800700a:	4393      	bics	r3, r2
 800700c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	220a      	movs	r2, #10
 800701c:	4393      	bics	r3, r2
 800701e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	621a      	str	r2, [r3, #32]
}
 8007034:	46c0      	nop			@ (mov r8, r8)
 8007036:	46bd      	mov	sp, r7
 8007038:	b006      	add	sp, #24
 800703a:	bd80      	pop	{r7, pc}

0800703c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	2210      	movs	r2, #16
 8007054:	4393      	bics	r3, r2
 8007056:	001a      	movs	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4a0d      	ldr	r2, [pc, #52]	@ (800709c <TIM_TI2_ConfigInputStage+0x60>)
 8007066:	4013      	ands	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	031b      	lsls	r3, r3, #12
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	22a0      	movs	r2, #160	@ 0xa0
 8007078:	4393      	bics	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	46c0      	nop			@ (mov r8, r8)
 8007094:	46bd      	mov	sp, r7
 8007096:	b006      	add	sp, #24
 8007098:	bd80      	pop	{r7, pc}
 800709a:	46c0      	nop			@ (mov r8, r8)
 800709c:	ffff0fff 	.word	0xffff0fff

080070a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2270      	movs	r2, #112	@ 0x70
 80070b4:	4393      	bics	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	2207      	movs	r2, #7
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	609a      	str	r2, [r3, #8]
}
 80070ca:	46c0      	nop			@ (mov r8, r8)
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b004      	add	sp, #16
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4a09      	ldr	r2, [pc, #36]	@ (8007110 <TIM_ETR_SetConfig+0x3c>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	021a      	lsls	r2, r3, #8
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	609a      	str	r2, [r3, #8]
}
 8007108:	46c0      	nop			@ (mov r8, r8)
 800710a:	46bd      	mov	sp, r7
 800710c:	b006      	add	sp, #24
 800710e:	bd80      	pop	{r7, pc}
 8007110:	ffff00ff 	.word	0xffff00ff

08007114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a55      	ldr	r2, [pc, #340]	@ (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d01f      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	2380      	movs	r3, #128	@ 0x80
 800712e:	05db      	lsls	r3, r3, #23
 8007130:	429a      	cmp	r2, r3
 8007132:	d019      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a50      	ldr	r2, [pc, #320]	@ (800727c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d014      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a4f      	ldr	r2, [pc, #316]	@ (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00f      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a4d      	ldr	r2, [pc, #308]	@ (8007284 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00a      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a4c      	ldr	r2, [pc, #304]	@ (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d005      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800715c:	4a4b      	ldr	r2, [pc, #300]	@ (800728c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800715e:	4b4c      	ldr	r3, [pc, #304]	@ (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8007160:	0011      	movs	r1, r2
 8007162:	0018      	movs	r0, r3
 8007164:	f7f9 fcfe 	bl	8000b64 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d021      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b10      	cmp	r3, #16
 8007176:	d01d      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b20      	cmp	r3, #32
 800717e:	d019      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b30      	cmp	r3, #48	@ 0x30
 8007186:	d015      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b40      	cmp	r3, #64	@ 0x40
 800718e:	d011      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b50      	cmp	r3, #80	@ 0x50
 8007196:	d00d      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b60      	cmp	r3, #96	@ 0x60
 800719e:	d009      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b70      	cmp	r3, #112	@ 0x70
 80071a6:	d005      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80071a8:	4a3a      	ldr	r2, [pc, #232]	@ (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80071aa:	4b39      	ldr	r3, [pc, #228]	@ (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80071ac:	0011      	movs	r1, r2
 80071ae:	0018      	movs	r0, r3
 80071b0:	f7f9 fcd8 	bl	8000b64 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b80      	cmp	r3, #128	@ 0x80
 80071ba:	d009      	beq.n	80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80071c4:	4a34      	ldr	r2, [pc, #208]	@ (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80071c6:	4b32      	ldr	r3, [pc, #200]	@ (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80071c8:	0011      	movs	r1, r2
 80071ca:	0018      	movs	r0, r3
 80071cc:	f7f9 fcca 	bl	8000b64 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	223c      	movs	r2, #60	@ 0x3c
 80071d4:	5c9b      	ldrb	r3, [r3, r2]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0xca>
 80071da:	2302      	movs	r3, #2
 80071dc:	e047      	b.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	223c      	movs	r2, #60	@ 0x3c
 80071e2:	2101      	movs	r1, #1
 80071e4:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	223d      	movs	r2, #61	@ 0x3d
 80071ea:	2102      	movs	r1, #2
 80071ec:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2270      	movs	r2, #112	@ 0x70
 8007202:	4393      	bics	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a16      	ldr	r2, [pc, #88]	@ (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00f      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	2380      	movs	r3, #128	@ 0x80
 8007228:	05db      	lsls	r3, r3, #23
 800722a:	429a      	cmp	r2, r3
 800722c:	d009      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a12      	ldr	r2, [pc, #72]	@ (800727c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d004      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a12      	ldr	r2, [pc, #72]	@ (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d10c      	bne.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2280      	movs	r2, #128	@ 0x80
 8007246:	4393      	bics	r3, r2
 8007248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	4313      	orrs	r3, r2
 8007252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	223d      	movs	r2, #61	@ 0x3d
 8007260:	2101      	movs	r1, #1
 8007262:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	223c      	movs	r2, #60	@ 0x3c
 8007268:	2100      	movs	r1, #0
 800726a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	0018      	movs	r0, r3
 8007270:	46bd      	mov	sp, r7
 8007272:	b004      	add	sp, #16
 8007274:	bd80      	pop	{r7, pc}
 8007276:	46c0      	nop			@ (mov r8, r8)
 8007278:	40012c00 	.word	0x40012c00
 800727c:	40000400 	.word	0x40000400
 8007280:	40001000 	.word	0x40001000
 8007284:	40001400 	.word	0x40001400
 8007288:	40014000 	.word	0x40014000
 800728c:	000007aa 	.word	0x000007aa
 8007290:	0800c544 	.word	0x0800c544
 8007294:	000007ab 	.word	0x000007ab
 8007298:	000007ac 	.word	0x000007ac

0800729c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072a4:	46c0      	nop			@ (mov r8, r8)
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b002      	add	sp, #8
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072b4:	46c0      	nop			@ (mov r8, r8)
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b002      	add	sp, #8
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2244      	movs	r2, #68	@ 0x44
 80072c8:	2100      	movs	r1, #0
 80072ca:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80072cc:	4b05      	ldr	r3, [pc, #20]	@ (80072e4 <USB_EnableGlobalInt+0x28>)
 80072ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	b299      	uxth	r1, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2240      	movs	r2, #64	@ 0x40
 80072d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	0018      	movs	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	b004      	add	sp, #16
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	0000bf80 	.word	0x0000bf80

080072e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80072f0:	4b09      	ldr	r3, [pc, #36]	@ (8007318 <USB_DisableGlobalInt+0x30>)
 80072f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2240      	movs	r2, #64	@ 0x40
 80072f8:	5a9b      	ldrh	r3, [r3, r2]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	b292      	uxth	r2, r2
 8007300:	43d2      	mvns	r2, r2
 8007302:	b292      	uxth	r2, r2
 8007304:	4013      	ands	r3, r2
 8007306:	b299      	uxth	r1, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2240      	movs	r2, #64	@ 0x40
 800730c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	0018      	movs	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	b004      	add	sp, #16
 8007316:	bd80      	pop	{r7, pc}
 8007318:	0000bf80 	.word	0x0000bf80

0800731c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	1d3b      	adds	r3, r7, #4
 8007326:	6019      	str	r1, [r3, #0]
 8007328:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2240      	movs	r2, #64	@ 0x40
 800732e:	2101      	movs	r1, #1
 8007330:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2240      	movs	r2, #64	@ 0x40
 8007336:	2100      	movs	r1, #0
 8007338:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2244      	movs	r2, #68	@ 0x44
 800733e:	2100      	movs	r1, #0
 8007340:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2250      	movs	r2, #80	@ 0x50
 8007346:	2100      	movs	r1, #0
 8007348:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	0018      	movs	r0, r3
 800734e:	46bd      	mov	sp, r7
 8007350:	b004      	add	sp, #16
 8007352:	bd80      	pop	{r7, pc}

08007354 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b09c      	sub	sp, #112	@ 0x70
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800735e:	236f      	movs	r3, #111	@ 0x6f
 8007360:	18fb      	adds	r3, r7, r3
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	18d3      	adds	r3, r2, r3
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	b29a      	uxth	r2, r3
 8007374:	236c      	movs	r3, #108	@ 0x6c
 8007376:	18fb      	adds	r3, r7, r3
 8007378:	49a1      	ldr	r1, [pc, #644]	@ (8007600 <USB_ActivateEndpoint+0x2ac>)
 800737a:	400a      	ands	r2, r1
 800737c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	78db      	ldrb	r3, [r3, #3]
 8007382:	2b03      	cmp	r3, #3
 8007384:	d017      	beq.n	80073b6 <USB_ActivateEndpoint+0x62>
 8007386:	dc28      	bgt.n	80073da <USB_ActivateEndpoint+0x86>
 8007388:	2b02      	cmp	r3, #2
 800738a:	d00e      	beq.n	80073aa <USB_ActivateEndpoint+0x56>
 800738c:	dc25      	bgt.n	80073da <USB_ActivateEndpoint+0x86>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <USB_ActivateEndpoint+0x44>
 8007392:	2b01      	cmp	r3, #1
 8007394:	d018      	beq.n	80073c8 <USB_ActivateEndpoint+0x74>
 8007396:	e020      	b.n	80073da <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007398:	226c      	movs	r2, #108	@ 0x6c
 800739a:	18bb      	adds	r3, r7, r2
 800739c:	18ba      	adds	r2, r7, r2
 800739e:	8812      	ldrh	r2, [r2, #0]
 80073a0:	2180      	movs	r1, #128	@ 0x80
 80073a2:	0089      	lsls	r1, r1, #2
 80073a4:	430a      	orrs	r2, r1
 80073a6:	801a      	strh	r2, [r3, #0]
      break;
 80073a8:	e01c      	b.n	80073e4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80073aa:	226c      	movs	r2, #108	@ 0x6c
 80073ac:	18bb      	adds	r3, r7, r2
 80073ae:	18ba      	adds	r2, r7, r2
 80073b0:	8812      	ldrh	r2, [r2, #0]
 80073b2:	801a      	strh	r2, [r3, #0]
      break;
 80073b4:	e016      	b.n	80073e4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80073b6:	226c      	movs	r2, #108	@ 0x6c
 80073b8:	18bb      	adds	r3, r7, r2
 80073ba:	18ba      	adds	r2, r7, r2
 80073bc:	8812      	ldrh	r2, [r2, #0]
 80073be:	21c0      	movs	r1, #192	@ 0xc0
 80073c0:	00c9      	lsls	r1, r1, #3
 80073c2:	430a      	orrs	r2, r1
 80073c4:	801a      	strh	r2, [r3, #0]
      break;
 80073c6:	e00d      	b.n	80073e4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80073c8:	226c      	movs	r2, #108	@ 0x6c
 80073ca:	18bb      	adds	r3, r7, r2
 80073cc:	18ba      	adds	r2, r7, r2
 80073ce:	8812      	ldrh	r2, [r2, #0]
 80073d0:	2180      	movs	r1, #128	@ 0x80
 80073d2:	00c9      	lsls	r1, r1, #3
 80073d4:	430a      	orrs	r2, r1
 80073d6:	801a      	strh	r2, [r3, #0]
      break;
 80073d8:	e004      	b.n	80073e4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80073da:	236f      	movs	r3, #111	@ 0x6f
 80073dc:	18fb      	adds	r3, r7, r3
 80073de:	2201      	movs	r2, #1
 80073e0:	701a      	strb	r2, [r3, #0]
      break;
 80073e2:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	18d3      	adds	r3, r2, r3
 80073ee:	226c      	movs	r2, #108	@ 0x6c
 80073f0:	18ba      	adds	r2, r7, r2
 80073f2:	8812      	ldrh	r2, [r2, #0]
 80073f4:	4983      	ldr	r1, [pc, #524]	@ (8007604 <USB_ActivateEndpoint+0x2b0>)
 80073f6:	430a      	orrs	r2, r1
 80073f8:	b292      	uxth	r2, r2
 80073fa:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	18d3      	adds	r3, r2, r3
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	b29b      	uxth	r3, r3
 800740a:	b21b      	sxth	r3, r3
 800740c:	4a7e      	ldr	r2, [pc, #504]	@ (8007608 <USB_ActivateEndpoint+0x2b4>)
 800740e:	4013      	ands	r3, r2
 8007410:	b21a      	sxth	r2, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	b21b      	sxth	r3, r3
 8007418:	4313      	orrs	r3, r2
 800741a:	b21a      	sxth	r2, r3
 800741c:	2166      	movs	r1, #102	@ 0x66
 800741e:	187b      	adds	r3, r7, r1
 8007420:	801a      	strh	r2, [r3, #0]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	18d3      	adds	r3, r2, r3
 800742c:	187a      	adds	r2, r7, r1
 800742e:	8812      	ldrh	r2, [r2, #0]
 8007430:	4974      	ldr	r1, [pc, #464]	@ (8007604 <USB_ActivateEndpoint+0x2b0>)
 8007432:	430a      	orrs	r2, r1
 8007434:	b292      	uxth	r2, r2
 8007436:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	7b1b      	ldrb	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d000      	beq.n	8007442 <USB_ActivateEndpoint+0xee>
 8007440:	e177      	b.n	8007732 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d100      	bne.n	800744c <USB_ActivateEndpoint+0xf8>
 800744a:	e07a      	b.n	8007542 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	61bb      	str	r3, [r7, #24]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2250      	movs	r2, #80	@ 0x50
 8007454:	5a9b      	ldrh	r3, [r3, r2]
 8007456:	b29b      	uxth	r3, r3
 8007458:	001a      	movs	r2, r3
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	189b      	adds	r3, r3, r2
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	00da      	lsls	r2, r3, #3
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	18d3      	adds	r3, r2, r3
 800746a:	2280      	movs	r2, #128	@ 0x80
 800746c:	00d2      	lsls	r2, r2, #3
 800746e:	4694      	mov	ip, r2
 8007470:	4463      	add	r3, ip
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	88db      	ldrh	r3, [r3, #6]
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	b29b      	uxth	r3, r3
 800747c:	18db      	adds	r3, r3, r3
 800747e:	b29a      	uxth	r2, r3
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	18d2      	adds	r2, r2, r3
 800748e:	2112      	movs	r1, #18
 8007490:	187b      	adds	r3, r7, r1
 8007492:	8812      	ldrh	r2, [r2, #0]
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	187b      	adds	r3, r7, r1
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	2240      	movs	r2, #64	@ 0x40
 800749c:	4013      	ands	r3, r2
 800749e:	d016      	beq.n	80074ce <USB_ActivateEndpoint+0x17a>
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	18d3      	adds	r3, r2, r3
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	2010      	movs	r0, #16
 80074b0:	183b      	adds	r3, r7, r0
 80074b2:	4955      	ldr	r1, [pc, #340]	@ (8007608 <USB_ActivateEndpoint+0x2b4>)
 80074b4:	400a      	ands	r2, r1
 80074b6:	801a      	strh	r2, [r3, #0]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	18d3      	adds	r3, r2, r3
 80074c2:	183a      	adds	r2, r7, r0
 80074c4:	8812      	ldrh	r2, [r2, #0]
 80074c6:	4951      	ldr	r1, [pc, #324]	@ (800760c <USB_ActivateEndpoint+0x2b8>)
 80074c8:	430a      	orrs	r2, r1
 80074ca:	b292      	uxth	r2, r2
 80074cc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	78db      	ldrb	r3, [r3, #3]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d01d      	beq.n	8007512 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	18d3      	adds	r3, r2, r3
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	200c      	movs	r0, #12
 80074e6:	183b      	adds	r3, r7, r0
 80074e8:	4949      	ldr	r1, [pc, #292]	@ (8007610 <USB_ActivateEndpoint+0x2bc>)
 80074ea:	400a      	ands	r2, r1
 80074ec:	801a      	strh	r2, [r3, #0]
 80074ee:	183b      	adds	r3, r7, r0
 80074f0:	183a      	adds	r2, r7, r0
 80074f2:	8812      	ldrh	r2, [r2, #0]
 80074f4:	2120      	movs	r1, #32
 80074f6:	404a      	eors	r2, r1
 80074f8:	801a      	strh	r2, [r3, #0]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	18d3      	adds	r3, r2, r3
 8007504:	183a      	adds	r2, r7, r0
 8007506:	8812      	ldrh	r2, [r2, #0]
 8007508:	493e      	ldr	r1, [pc, #248]	@ (8007604 <USB_ActivateEndpoint+0x2b0>)
 800750a:	430a      	orrs	r2, r1
 800750c:	b292      	uxth	r2, r2
 800750e:	801a      	strh	r2, [r3, #0]
 8007510:	e2b5      	b.n	8007a7e <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	18d3      	adds	r3, r2, r3
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29a      	uxth	r2, r3
 8007520:	200e      	movs	r0, #14
 8007522:	183b      	adds	r3, r7, r0
 8007524:	493a      	ldr	r1, [pc, #232]	@ (8007610 <USB_ActivateEndpoint+0x2bc>)
 8007526:	400a      	ands	r2, r1
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	18d3      	adds	r3, r2, r3
 8007534:	183a      	adds	r2, r7, r0
 8007536:	8812      	ldrh	r2, [r2, #0]
 8007538:	4932      	ldr	r1, [pc, #200]	@ (8007604 <USB_ActivateEndpoint+0x2b0>)
 800753a:	430a      	orrs	r2, r1
 800753c:	b292      	uxth	r2, r2
 800753e:	801a      	strh	r2, [r3, #0]
 8007540:	e29d      	b.n	8007a7e <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	633b      	str	r3, [r7, #48]	@ 0x30
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2250      	movs	r2, #80	@ 0x50
 800754a:	5a9b      	ldrh	r3, [r3, r2]
 800754c:	b29b      	uxth	r3, r3
 800754e:	001a      	movs	r2, r3
 8007550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007552:	189b      	adds	r3, r3, r2
 8007554:	633b      	str	r3, [r7, #48]	@ 0x30
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	00da      	lsls	r2, r3, #3
 800755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755e:	18d3      	adds	r3, r2, r3
 8007560:	4a2c      	ldr	r2, [pc, #176]	@ (8007614 <USB_ActivateEndpoint+0x2c0>)
 8007562:	4694      	mov	ip, r2
 8007564:	4463      	add	r3, ip
 8007566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	88db      	ldrh	r3, [r3, #6]
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	b29b      	uxth	r3, r3
 8007570:	18db      	adds	r3, r3, r3
 8007572:	b29a      	uxth	r2, r3
 8007574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007576:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2250      	movs	r2, #80	@ 0x50
 8007580:	5a9b      	ldrh	r3, [r3, r2]
 8007582:	b29b      	uxth	r3, r3
 8007584:	001a      	movs	r2, r3
 8007586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007588:	189b      	adds	r3, r3, r2
 800758a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	00da      	lsls	r2, r3, #3
 8007592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007594:	18d3      	adds	r3, r2, r3
 8007596:	4a20      	ldr	r2, [pc, #128]	@ (8007618 <USB_ActivateEndpoint+0x2c4>)
 8007598:	4694      	mov	ip, r2
 800759a:	4463      	add	r3, ip
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	059b      	lsls	r3, r3, #22
 80075a6:	0d9b      	lsrs	r3, r3, #22
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	801a      	strh	r2, [r3, #0]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d108      	bne.n	80075c8 <USB_ActivateEndpoint+0x274>
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	4a17      	ldr	r2, [pc, #92]	@ (800761c <USB_ActivateEndpoint+0x2c8>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	e045      	b.n	8007654 <USB_ActivateEndpoint+0x300>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80075ce:	d827      	bhi.n	8007620 <USB_ActivateEndpoint+0x2cc>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2201      	movs	r2, #1
 80075de:	4013      	ands	r3, r2
 80075e0:	d002      	beq.n	80075e8 <USB_ActivateEndpoint+0x294>
 80075e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075e4:	3301      	adds	r3, #1
 80075e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	029b      	lsls	r3, r3, #10
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	4313      	orrs	r3, r2
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	e029      	b.n	8007654 <USB_ActivateEndpoint+0x300>
 8007600:	ffff898f 	.word	0xffff898f
 8007604:	ffff8080 	.word	0xffff8080
 8007608:	ffff8f8f 	.word	0xffff8f8f
 800760c:	ffff80c0 	.word	0xffff80c0
 8007610:	ffff8fbf 	.word	0xffff8fbf
 8007614:	00000404 	.word	0x00000404
 8007618:	00000406 	.word	0x00000406
 800761c:	ffff8000 	.word	0xffff8000
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	095b      	lsrs	r3, r3, #5
 8007626:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	221f      	movs	r2, #31
 800762e:	4013      	ands	r3, r2
 8007630:	d102      	bne.n	8007638 <USB_ActivateEndpoint+0x2e4>
 8007632:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007634:	3b01      	subs	r3, #1
 8007636:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29a      	uxth	r2, r3
 800763e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007640:	b29b      	uxth	r3, r3
 8007642:	029b      	lsls	r3, r3, #10
 8007644:	b29b      	uxth	r3, r3
 8007646:	4313      	orrs	r3, r2
 8007648:	b29b      	uxth	r3, r3
 800764a:	4ab5      	ldr	r2, [pc, #724]	@ (8007920 <USB_ActivateEndpoint+0x5cc>)
 800764c:	4313      	orrs	r3, r2
 800764e:	b29a      	uxth	r2, r3
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	18d2      	adds	r2, r2, r3
 800765e:	2122      	movs	r1, #34	@ 0x22
 8007660:	187b      	adds	r3, r7, r1
 8007662:	8812      	ldrh	r2, [r2, #0]
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	187b      	adds	r3, r7, r1
 8007668:	881a      	ldrh	r2, [r3, #0]
 800766a:	2380      	movs	r3, #128	@ 0x80
 800766c:	01db      	lsls	r3, r3, #7
 800766e:	4013      	ands	r3, r2
 8007670:	d016      	beq.n	80076a0 <USB_ActivateEndpoint+0x34c>
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	18d3      	adds	r3, r2, r3
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29a      	uxth	r2, r3
 8007680:	2020      	movs	r0, #32
 8007682:	183b      	adds	r3, r7, r0
 8007684:	49a7      	ldr	r1, [pc, #668]	@ (8007924 <USB_ActivateEndpoint+0x5d0>)
 8007686:	400a      	ands	r2, r1
 8007688:	801a      	strh	r2, [r3, #0]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	18d3      	adds	r3, r2, r3
 8007694:	183a      	adds	r2, r7, r0
 8007696:	8812      	ldrh	r2, [r2, #0]
 8007698:	49a3      	ldr	r1, [pc, #652]	@ (8007928 <USB_ActivateEndpoint+0x5d4>)
 800769a:	430a      	orrs	r2, r1
 800769c:	b292      	uxth	r2, r2
 800769e:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d125      	bne.n	80076f4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	18d3      	adds	r3, r2, r3
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	201c      	movs	r0, #28
 80076b8:	183b      	adds	r3, r7, r0
 80076ba:	499c      	ldr	r1, [pc, #624]	@ (800792c <USB_ActivateEndpoint+0x5d8>)
 80076bc:	400a      	ands	r2, r1
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	183b      	adds	r3, r7, r0
 80076c2:	183a      	adds	r2, r7, r0
 80076c4:	8812      	ldrh	r2, [r2, #0]
 80076c6:	2180      	movs	r1, #128	@ 0x80
 80076c8:	0149      	lsls	r1, r1, #5
 80076ca:	404a      	eors	r2, r1
 80076cc:	801a      	strh	r2, [r3, #0]
 80076ce:	183b      	adds	r3, r7, r0
 80076d0:	183a      	adds	r2, r7, r0
 80076d2:	8812      	ldrh	r2, [r2, #0]
 80076d4:	2180      	movs	r1, #128	@ 0x80
 80076d6:	0189      	lsls	r1, r1, #6
 80076d8:	404a      	eors	r2, r1
 80076da:	801a      	strh	r2, [r3, #0]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	18d3      	adds	r3, r2, r3
 80076e6:	183a      	adds	r2, r7, r0
 80076e8:	8812      	ldrh	r2, [r2, #0]
 80076ea:	4991      	ldr	r1, [pc, #580]	@ (8007930 <USB_ActivateEndpoint+0x5dc>)
 80076ec:	430a      	orrs	r2, r1
 80076ee:	b292      	uxth	r2, r2
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	e1c4      	b.n	8007a7e <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	18d3      	adds	r3, r2, r3
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29a      	uxth	r2, r3
 8007702:	201e      	movs	r0, #30
 8007704:	183b      	adds	r3, r7, r0
 8007706:	4989      	ldr	r1, [pc, #548]	@ (800792c <USB_ActivateEndpoint+0x5d8>)
 8007708:	400a      	ands	r2, r1
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	183b      	adds	r3, r7, r0
 800770e:	183a      	adds	r2, r7, r0
 8007710:	8812      	ldrh	r2, [r2, #0]
 8007712:	2180      	movs	r1, #128	@ 0x80
 8007714:	0189      	lsls	r1, r1, #6
 8007716:	404a      	eors	r2, r1
 8007718:	801a      	strh	r2, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	18d3      	adds	r3, r2, r3
 8007724:	183a      	adds	r2, r7, r0
 8007726:	8812      	ldrh	r2, [r2, #0]
 8007728:	4981      	ldr	r1, [pc, #516]	@ (8007930 <USB_ActivateEndpoint+0x5dc>)
 800772a:	430a      	orrs	r2, r1
 800772c:	b292      	uxth	r2, r2
 800772e:	801a      	strh	r2, [r3, #0]
 8007730:	e1a5      	b.n	8007a7e <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	78db      	ldrb	r3, [r3, #3]
 8007736:	2b02      	cmp	r3, #2
 8007738:	d117      	bne.n	800776a <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	18d3      	adds	r3, r2, r3
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29a      	uxth	r2, r3
 8007748:	2062      	movs	r0, #98	@ 0x62
 800774a:	183b      	adds	r3, r7, r0
 800774c:	4975      	ldr	r1, [pc, #468]	@ (8007924 <USB_ActivateEndpoint+0x5d0>)
 800774e:	400a      	ands	r2, r1
 8007750:	801a      	strh	r2, [r3, #0]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	18d3      	adds	r3, r2, r3
 800775c:	183a      	adds	r2, r7, r0
 800775e:	8812      	ldrh	r2, [r2, #0]
 8007760:	4974      	ldr	r1, [pc, #464]	@ (8007934 <USB_ActivateEndpoint+0x5e0>)
 8007762:	430a      	orrs	r2, r1
 8007764:	b292      	uxth	r2, r2
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	e016      	b.n	8007798 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	18d3      	adds	r3, r2, r3
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29a      	uxth	r2, r3
 8007778:	2064      	movs	r0, #100	@ 0x64
 800777a:	183b      	adds	r3, r7, r0
 800777c:	496e      	ldr	r1, [pc, #440]	@ (8007938 <USB_ActivateEndpoint+0x5e4>)
 800777e:	400a      	ands	r2, r1
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	18d3      	adds	r3, r2, r3
 800778c:	183a      	adds	r2, r7, r0
 800778e:	8812      	ldrh	r2, [r2, #0]
 8007790:	4967      	ldr	r1, [pc, #412]	@ (8007930 <USB_ActivateEndpoint+0x5dc>)
 8007792:	430a      	orrs	r2, r1
 8007794:	b292      	uxth	r2, r2
 8007796:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2250      	movs	r2, #80	@ 0x50
 80077a0:	5a9b      	ldrh	r3, [r3, r2]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	001a      	movs	r2, r3
 80077a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077a8:	189b      	adds	r3, r3, r2
 80077aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	00da      	lsls	r2, r3, #3
 80077b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077b4:	18d3      	adds	r3, r2, r3
 80077b6:	2280      	movs	r2, #128	@ 0x80
 80077b8:	00d2      	lsls	r2, r2, #3
 80077ba:	4694      	mov	ip, r2
 80077bc:	4463      	add	r3, ip
 80077be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	891b      	ldrh	r3, [r3, #8]
 80077c4:	085b      	lsrs	r3, r3, #1
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	18db      	adds	r3, r3, r3
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2250      	movs	r2, #80	@ 0x50
 80077d8:	5a9b      	ldrh	r3, [r3, r2]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	001a      	movs	r2, r3
 80077de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077e0:	189b      	adds	r3, r3, r2
 80077e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	00da      	lsls	r2, r3, #3
 80077ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077ec:	18d3      	adds	r3, r2, r3
 80077ee:	4a53      	ldr	r2, [pc, #332]	@ (800793c <USB_ActivateEndpoint+0x5e8>)
 80077f0:	4694      	mov	ip, r2
 80077f2:	4463      	add	r3, ip
 80077f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	895b      	ldrh	r3, [r3, #10]
 80077fa:	085b      	lsrs	r3, r3, #1
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	18db      	adds	r3, r3, r3
 8007800:	b29a      	uxth	r2, r3
 8007802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007804:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d000      	beq.n	8007810 <USB_ActivateEndpoint+0x4bc>
 800780e:	e09b      	b.n	8007948 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	18d2      	adds	r2, r2, r3
 800781a:	2140      	movs	r1, #64	@ 0x40
 800781c:	187b      	adds	r3, r7, r1
 800781e:	8812      	ldrh	r2, [r2, #0]
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	187b      	adds	r3, r7, r1
 8007824:	881a      	ldrh	r2, [r3, #0]
 8007826:	2380      	movs	r3, #128	@ 0x80
 8007828:	01db      	lsls	r3, r3, #7
 800782a:	4013      	ands	r3, r2
 800782c:	d016      	beq.n	800785c <USB_ActivateEndpoint+0x508>
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	18d3      	adds	r3, r2, r3
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	b29a      	uxth	r2, r3
 800783c:	203e      	movs	r0, #62	@ 0x3e
 800783e:	183b      	adds	r3, r7, r0
 8007840:	4938      	ldr	r1, [pc, #224]	@ (8007924 <USB_ActivateEndpoint+0x5d0>)
 8007842:	400a      	ands	r2, r1
 8007844:	801a      	strh	r2, [r3, #0]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	18d3      	adds	r3, r2, r3
 8007850:	183a      	adds	r2, r7, r0
 8007852:	8812      	ldrh	r2, [r2, #0]
 8007854:	4934      	ldr	r1, [pc, #208]	@ (8007928 <USB_ActivateEndpoint+0x5d4>)
 8007856:	430a      	orrs	r2, r1
 8007858:	b292      	uxth	r2, r2
 800785a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	18d2      	adds	r2, r2, r3
 8007866:	213c      	movs	r1, #60	@ 0x3c
 8007868:	187b      	adds	r3, r7, r1
 800786a:	8812      	ldrh	r2, [r2, #0]
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	187b      	adds	r3, r7, r1
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	2240      	movs	r2, #64	@ 0x40
 8007874:	4013      	ands	r3, r2
 8007876:	d016      	beq.n	80078a6 <USB_ActivateEndpoint+0x552>
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	18d3      	adds	r3, r2, r3
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29a      	uxth	r2, r3
 8007886:	203a      	movs	r0, #58	@ 0x3a
 8007888:	183b      	adds	r3, r7, r0
 800788a:	4926      	ldr	r1, [pc, #152]	@ (8007924 <USB_ActivateEndpoint+0x5d0>)
 800788c:	400a      	ands	r2, r1
 800788e:	801a      	strh	r2, [r3, #0]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	18d3      	adds	r3, r2, r3
 800789a:	183a      	adds	r2, r7, r0
 800789c:	8812      	ldrh	r2, [r2, #0]
 800789e:	4928      	ldr	r1, [pc, #160]	@ (8007940 <USB_ActivateEndpoint+0x5ec>)
 80078a0:	430a      	orrs	r2, r1
 80078a2:	b292      	uxth	r2, r2
 80078a4:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	18d3      	adds	r3, r2, r3
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	2038      	movs	r0, #56	@ 0x38
 80078b6:	183b      	adds	r3, r7, r0
 80078b8:	491c      	ldr	r1, [pc, #112]	@ (800792c <USB_ActivateEndpoint+0x5d8>)
 80078ba:	400a      	ands	r2, r1
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	183b      	adds	r3, r7, r0
 80078c0:	183a      	adds	r2, r7, r0
 80078c2:	8812      	ldrh	r2, [r2, #0]
 80078c4:	2180      	movs	r1, #128	@ 0x80
 80078c6:	0149      	lsls	r1, r1, #5
 80078c8:	404a      	eors	r2, r1
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	183b      	adds	r3, r7, r0
 80078ce:	183a      	adds	r2, r7, r0
 80078d0:	8812      	ldrh	r2, [r2, #0]
 80078d2:	2180      	movs	r1, #128	@ 0x80
 80078d4:	0189      	lsls	r1, r1, #6
 80078d6:	404a      	eors	r2, r1
 80078d8:	801a      	strh	r2, [r3, #0]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	18d3      	adds	r3, r2, r3
 80078e4:	183a      	adds	r2, r7, r0
 80078e6:	8812      	ldrh	r2, [r2, #0]
 80078e8:	4911      	ldr	r1, [pc, #68]	@ (8007930 <USB_ActivateEndpoint+0x5dc>)
 80078ea:	430a      	orrs	r2, r1
 80078ec:	b292      	uxth	r2, r2
 80078ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	18d3      	adds	r3, r2, r3
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	2036      	movs	r0, #54	@ 0x36
 8007900:	183b      	adds	r3, r7, r0
 8007902:	4910      	ldr	r1, [pc, #64]	@ (8007944 <USB_ActivateEndpoint+0x5f0>)
 8007904:	400a      	ands	r2, r1
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	18d3      	adds	r3, r2, r3
 8007912:	183a      	adds	r2, r7, r0
 8007914:	8812      	ldrh	r2, [r2, #0]
 8007916:	4906      	ldr	r1, [pc, #24]	@ (8007930 <USB_ActivateEndpoint+0x5dc>)
 8007918:	430a      	orrs	r2, r1
 800791a:	b292      	uxth	r2, r2
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	e0ae      	b.n	8007a7e <USB_ActivateEndpoint+0x72a>
 8007920:	ffff8000 	.word	0xffff8000
 8007924:	ffff8f8f 	.word	0xffff8f8f
 8007928:	ffffc080 	.word	0xffffc080
 800792c:	ffffbf8f 	.word	0xffffbf8f
 8007930:	ffff8080 	.word	0xffff8080
 8007934:	ffff8180 	.word	0xffff8180
 8007938:	ffff8e8f 	.word	0xffff8e8f
 800793c:	00000404 	.word	0x00000404
 8007940:	ffff80c0 	.word	0xffff80c0
 8007944:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	18d2      	adds	r2, r2, r3
 8007952:	214e      	movs	r1, #78	@ 0x4e
 8007954:	187b      	adds	r3, r7, r1
 8007956:	8812      	ldrh	r2, [r2, #0]
 8007958:	801a      	strh	r2, [r3, #0]
 800795a:	187b      	adds	r3, r7, r1
 800795c:	881a      	ldrh	r2, [r3, #0]
 800795e:	2380      	movs	r3, #128	@ 0x80
 8007960:	01db      	lsls	r3, r3, #7
 8007962:	4013      	ands	r3, r2
 8007964:	d016      	beq.n	8007994 <USB_ActivateEndpoint+0x640>
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	18d3      	adds	r3, r2, r3
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29a      	uxth	r2, r3
 8007974:	204c      	movs	r0, #76	@ 0x4c
 8007976:	183b      	adds	r3, r7, r0
 8007978:	4944      	ldr	r1, [pc, #272]	@ (8007a8c <USB_ActivateEndpoint+0x738>)
 800797a:	400a      	ands	r2, r1
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	18d3      	adds	r3, r2, r3
 8007988:	183a      	adds	r2, r7, r0
 800798a:	8812      	ldrh	r2, [r2, #0]
 800798c:	4940      	ldr	r1, [pc, #256]	@ (8007a90 <USB_ActivateEndpoint+0x73c>)
 800798e:	430a      	orrs	r2, r1
 8007990:	b292      	uxth	r2, r2
 8007992:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	18d2      	adds	r2, r2, r3
 800799e:	214a      	movs	r1, #74	@ 0x4a
 80079a0:	187b      	adds	r3, r7, r1
 80079a2:	8812      	ldrh	r2, [r2, #0]
 80079a4:	801a      	strh	r2, [r3, #0]
 80079a6:	187b      	adds	r3, r7, r1
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	2240      	movs	r2, #64	@ 0x40
 80079ac:	4013      	ands	r3, r2
 80079ae:	d016      	beq.n	80079de <USB_ActivateEndpoint+0x68a>
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	18d3      	adds	r3, r2, r3
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29a      	uxth	r2, r3
 80079be:	2048      	movs	r0, #72	@ 0x48
 80079c0:	183b      	adds	r3, r7, r0
 80079c2:	4932      	ldr	r1, [pc, #200]	@ (8007a8c <USB_ActivateEndpoint+0x738>)
 80079c4:	400a      	ands	r2, r1
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	18d3      	adds	r3, r2, r3
 80079d2:	183a      	adds	r2, r7, r0
 80079d4:	8812      	ldrh	r2, [r2, #0]
 80079d6:	492f      	ldr	r1, [pc, #188]	@ (8007a94 <USB_ActivateEndpoint+0x740>)
 80079d8:	430a      	orrs	r2, r1
 80079da:	b292      	uxth	r2, r2
 80079dc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	78db      	ldrb	r3, [r3, #3]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d01d      	beq.n	8007a22 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	18d3      	adds	r3, r2, r3
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	2044      	movs	r0, #68	@ 0x44
 80079f6:	183b      	adds	r3, r7, r0
 80079f8:	4927      	ldr	r1, [pc, #156]	@ (8007a98 <USB_ActivateEndpoint+0x744>)
 80079fa:	400a      	ands	r2, r1
 80079fc:	801a      	strh	r2, [r3, #0]
 80079fe:	183b      	adds	r3, r7, r0
 8007a00:	183a      	adds	r2, r7, r0
 8007a02:	8812      	ldrh	r2, [r2, #0]
 8007a04:	2120      	movs	r1, #32
 8007a06:	404a      	eors	r2, r1
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	18d3      	adds	r3, r2, r3
 8007a14:	183a      	adds	r2, r7, r0
 8007a16:	8812      	ldrh	r2, [r2, #0]
 8007a18:	4920      	ldr	r1, [pc, #128]	@ (8007a9c <USB_ActivateEndpoint+0x748>)
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	b292      	uxth	r2, r2
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	e016      	b.n	8007a50 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	18d3      	adds	r3, r2, r3
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	2046      	movs	r0, #70	@ 0x46
 8007a32:	183b      	adds	r3, r7, r0
 8007a34:	4918      	ldr	r1, [pc, #96]	@ (8007a98 <USB_ActivateEndpoint+0x744>)
 8007a36:	400a      	ands	r2, r1
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	18d3      	adds	r3, r2, r3
 8007a44:	183a      	adds	r2, r7, r0
 8007a46:	8812      	ldrh	r2, [r2, #0]
 8007a48:	4914      	ldr	r1, [pc, #80]	@ (8007a9c <USB_ActivateEndpoint+0x748>)
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	b292      	uxth	r2, r2
 8007a4e:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	18d3      	adds	r3, r2, r3
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	2042      	movs	r0, #66	@ 0x42
 8007a60:	183b      	adds	r3, r7, r0
 8007a62:	490f      	ldr	r1, [pc, #60]	@ (8007aa0 <USB_ActivateEndpoint+0x74c>)
 8007a64:	400a      	ands	r2, r1
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	18d3      	adds	r3, r2, r3
 8007a72:	183a      	adds	r2, r7, r0
 8007a74:	8812      	ldrh	r2, [r2, #0]
 8007a76:	4909      	ldr	r1, [pc, #36]	@ (8007a9c <USB_ActivateEndpoint+0x748>)
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	b292      	uxth	r2, r2
 8007a7c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007a7e:	236f      	movs	r3, #111	@ 0x6f
 8007a80:	18fb      	adds	r3, r7, r3
 8007a82:	781b      	ldrb	r3, [r3, #0]
}
 8007a84:	0018      	movs	r0, r3
 8007a86:	46bd      	mov	sp, r7
 8007a88:	b01c      	add	sp, #112	@ 0x70
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	ffff8f8f 	.word	0xffff8f8f
 8007a90:	ffffc080 	.word	0xffffc080
 8007a94:	ffff80c0 	.word	0xffff80c0
 8007a98:	ffff8fbf 	.word	0xffff8fbf
 8007a9c:	ffff8080 	.word	0xffff8080
 8007aa0:	ffffbf8f 	.word	0xffffbf8f

08007aa4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08c      	sub	sp, #48	@ 0x30
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	7b1b      	ldrb	r3, [r3, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d000      	beq.n	8007ab8 <USB_DeactivateEndpoint+0x14>
 8007ab6:	e07e      	b.n	8007bb6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d03c      	beq.n	8007b3a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	18d2      	adds	r2, r2, r3
 8007aca:	210c      	movs	r1, #12
 8007acc:	187b      	adds	r3, r7, r1
 8007ace:	8812      	ldrh	r2, [r2, #0]
 8007ad0:	801a      	strh	r2, [r3, #0]
 8007ad2:	187b      	adds	r3, r7, r1
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	2240      	movs	r2, #64	@ 0x40
 8007ad8:	4013      	ands	r3, r2
 8007ada:	d016      	beq.n	8007b0a <USB_DeactivateEndpoint+0x66>
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	18d3      	adds	r3, r2, r3
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	200a      	movs	r0, #10
 8007aec:	183b      	adds	r3, r7, r0
 8007aee:	49c7      	ldr	r1, [pc, #796]	@ (8007e0c <USB_DeactivateEndpoint+0x368>)
 8007af0:	400a      	ands	r2, r1
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	18d3      	adds	r3, r2, r3
 8007afe:	183a      	adds	r2, r7, r0
 8007b00:	8812      	ldrh	r2, [r2, #0]
 8007b02:	49c3      	ldr	r1, [pc, #780]	@ (8007e10 <USB_DeactivateEndpoint+0x36c>)
 8007b04:	430a      	orrs	r2, r1
 8007b06:	b292      	uxth	r2, r2
 8007b08:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	18d3      	adds	r3, r2, r3
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	2008      	movs	r0, #8
 8007b1a:	183b      	adds	r3, r7, r0
 8007b1c:	49bd      	ldr	r1, [pc, #756]	@ (8007e14 <USB_DeactivateEndpoint+0x370>)
 8007b1e:	400a      	ands	r2, r1
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	18d3      	adds	r3, r2, r3
 8007b2c:	183a      	adds	r2, r7, r0
 8007b2e:	8812      	ldrh	r2, [r2, #0]
 8007b30:	49b9      	ldr	r1, [pc, #740]	@ (8007e18 <USB_DeactivateEndpoint+0x374>)
 8007b32:	430a      	orrs	r2, r1
 8007b34:	b292      	uxth	r2, r2
 8007b36:	801a      	strh	r2, [r3, #0]
 8007b38:	e163      	b.n	8007e02 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	18d2      	adds	r2, r2, r3
 8007b44:	2112      	movs	r1, #18
 8007b46:	187b      	adds	r3, r7, r1
 8007b48:	8812      	ldrh	r2, [r2, #0]
 8007b4a:	801a      	strh	r2, [r3, #0]
 8007b4c:	187b      	adds	r3, r7, r1
 8007b4e:	881a      	ldrh	r2, [r3, #0]
 8007b50:	2380      	movs	r3, #128	@ 0x80
 8007b52:	01db      	lsls	r3, r3, #7
 8007b54:	4013      	ands	r3, r2
 8007b56:	d016      	beq.n	8007b86 <USB_DeactivateEndpoint+0xe2>
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	18d3      	adds	r3, r2, r3
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	2010      	movs	r0, #16
 8007b68:	183b      	adds	r3, r7, r0
 8007b6a:	49a8      	ldr	r1, [pc, #672]	@ (8007e0c <USB_DeactivateEndpoint+0x368>)
 8007b6c:	400a      	ands	r2, r1
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	18d3      	adds	r3, r2, r3
 8007b7a:	183a      	adds	r2, r7, r0
 8007b7c:	8812      	ldrh	r2, [r2, #0]
 8007b7e:	49a7      	ldr	r1, [pc, #668]	@ (8007e1c <USB_DeactivateEndpoint+0x378>)
 8007b80:	430a      	orrs	r2, r1
 8007b82:	b292      	uxth	r2, r2
 8007b84:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	18d3      	adds	r3, r2, r3
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	200e      	movs	r0, #14
 8007b96:	183b      	adds	r3, r7, r0
 8007b98:	49a1      	ldr	r1, [pc, #644]	@ (8007e20 <USB_DeactivateEndpoint+0x37c>)
 8007b9a:	400a      	ands	r2, r1
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	18d3      	adds	r3, r2, r3
 8007ba8:	183a      	adds	r2, r7, r0
 8007baa:	8812      	ldrh	r2, [r2, #0]
 8007bac:	499a      	ldr	r1, [pc, #616]	@ (8007e18 <USB_DeactivateEndpoint+0x374>)
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	b292      	uxth	r2, r2
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	e125      	b.n	8007e02 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d000      	beq.n	8007bc0 <USB_DeactivateEndpoint+0x11c>
 8007bbe:	e090      	b.n	8007ce2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	18d2      	adds	r2, r2, r3
 8007bca:	2120      	movs	r1, #32
 8007bcc:	187b      	adds	r3, r7, r1
 8007bce:	8812      	ldrh	r2, [r2, #0]
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	187b      	adds	r3, r7, r1
 8007bd4:	881a      	ldrh	r2, [r3, #0]
 8007bd6:	2380      	movs	r3, #128	@ 0x80
 8007bd8:	01db      	lsls	r3, r3, #7
 8007bda:	4013      	ands	r3, r2
 8007bdc:	d016      	beq.n	8007c0c <USB_DeactivateEndpoint+0x168>
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	18d3      	adds	r3, r2, r3
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	201e      	movs	r0, #30
 8007bee:	183b      	adds	r3, r7, r0
 8007bf0:	4986      	ldr	r1, [pc, #536]	@ (8007e0c <USB_DeactivateEndpoint+0x368>)
 8007bf2:	400a      	ands	r2, r1
 8007bf4:	801a      	strh	r2, [r3, #0]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	18d3      	adds	r3, r2, r3
 8007c00:	183a      	adds	r2, r7, r0
 8007c02:	8812      	ldrh	r2, [r2, #0]
 8007c04:	4985      	ldr	r1, [pc, #532]	@ (8007e1c <USB_DeactivateEndpoint+0x378>)
 8007c06:	430a      	orrs	r2, r1
 8007c08:	b292      	uxth	r2, r2
 8007c0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	18d2      	adds	r2, r2, r3
 8007c16:	211c      	movs	r1, #28
 8007c18:	187b      	adds	r3, r7, r1
 8007c1a:	8812      	ldrh	r2, [r2, #0]
 8007c1c:	801a      	strh	r2, [r3, #0]
 8007c1e:	187b      	adds	r3, r7, r1
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	2240      	movs	r2, #64	@ 0x40
 8007c24:	4013      	ands	r3, r2
 8007c26:	d016      	beq.n	8007c56 <USB_DeactivateEndpoint+0x1b2>
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	18d3      	adds	r3, r2, r3
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	201a      	movs	r0, #26
 8007c38:	183b      	adds	r3, r7, r0
 8007c3a:	4974      	ldr	r1, [pc, #464]	@ (8007e0c <USB_DeactivateEndpoint+0x368>)
 8007c3c:	400a      	ands	r2, r1
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	18d3      	adds	r3, r2, r3
 8007c4a:	183a      	adds	r2, r7, r0
 8007c4c:	8812      	ldrh	r2, [r2, #0]
 8007c4e:	4970      	ldr	r1, [pc, #448]	@ (8007e10 <USB_DeactivateEndpoint+0x36c>)
 8007c50:	430a      	orrs	r2, r1
 8007c52:	b292      	uxth	r2, r2
 8007c54:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	18d3      	adds	r3, r2, r3
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	2018      	movs	r0, #24
 8007c66:	183b      	adds	r3, r7, r0
 8007c68:	4968      	ldr	r1, [pc, #416]	@ (8007e0c <USB_DeactivateEndpoint+0x368>)
 8007c6a:	400a      	ands	r2, r1
 8007c6c:	801a      	strh	r2, [r3, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	18d3      	adds	r3, r2, r3
 8007c78:	183a      	adds	r2, r7, r0
 8007c7a:	8812      	ldrh	r2, [r2, #0]
 8007c7c:	4964      	ldr	r1, [pc, #400]	@ (8007e10 <USB_DeactivateEndpoint+0x36c>)
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	b292      	uxth	r2, r2
 8007c82:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	18d3      	adds	r3, r2, r3
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	2016      	movs	r0, #22
 8007c94:	183b      	adds	r3, r7, r0
 8007c96:	4962      	ldr	r1, [pc, #392]	@ (8007e20 <USB_DeactivateEndpoint+0x37c>)
 8007c98:	400a      	ands	r2, r1
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	18d3      	adds	r3, r2, r3
 8007ca6:	183a      	adds	r2, r7, r0
 8007ca8:	8812      	ldrh	r2, [r2, #0]
 8007caa:	495b      	ldr	r1, [pc, #364]	@ (8007e18 <USB_DeactivateEndpoint+0x374>)
 8007cac:	430a      	orrs	r2, r1
 8007cae:	b292      	uxth	r2, r2
 8007cb0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	18d3      	adds	r3, r2, r3
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	2014      	movs	r0, #20
 8007cc2:	183b      	adds	r3, r7, r0
 8007cc4:	4953      	ldr	r1, [pc, #332]	@ (8007e14 <USB_DeactivateEndpoint+0x370>)
 8007cc6:	400a      	ands	r2, r1
 8007cc8:	801a      	strh	r2, [r3, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	18d3      	adds	r3, r2, r3
 8007cd4:	183a      	adds	r2, r7, r0
 8007cd6:	8812      	ldrh	r2, [r2, #0]
 8007cd8:	494f      	ldr	r1, [pc, #316]	@ (8007e18 <USB_DeactivateEndpoint+0x374>)
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	b292      	uxth	r2, r2
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	e08f      	b.n	8007e02 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	18d2      	adds	r2, r2, r3
 8007cec:	212e      	movs	r1, #46	@ 0x2e
 8007cee:	187b      	adds	r3, r7, r1
 8007cf0:	8812      	ldrh	r2, [r2, #0]
 8007cf2:	801a      	strh	r2, [r3, #0]
 8007cf4:	187b      	adds	r3, r7, r1
 8007cf6:	881a      	ldrh	r2, [r3, #0]
 8007cf8:	2380      	movs	r3, #128	@ 0x80
 8007cfa:	01db      	lsls	r3, r3, #7
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	d016      	beq.n	8007d2e <USB_DeactivateEndpoint+0x28a>
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	18d3      	adds	r3, r2, r3
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	202c      	movs	r0, #44	@ 0x2c
 8007d10:	183b      	adds	r3, r7, r0
 8007d12:	493e      	ldr	r1, [pc, #248]	@ (8007e0c <USB_DeactivateEndpoint+0x368>)
 8007d14:	400a      	ands	r2, r1
 8007d16:	801a      	strh	r2, [r3, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	18d3      	adds	r3, r2, r3
 8007d22:	183a      	adds	r2, r7, r0
 8007d24:	8812      	ldrh	r2, [r2, #0]
 8007d26:	493d      	ldr	r1, [pc, #244]	@ (8007e1c <USB_DeactivateEndpoint+0x378>)
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	b292      	uxth	r2, r2
 8007d2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	18d2      	adds	r2, r2, r3
 8007d38:	212a      	movs	r1, #42	@ 0x2a
 8007d3a:	187b      	adds	r3, r7, r1
 8007d3c:	8812      	ldrh	r2, [r2, #0]
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	187b      	adds	r3, r7, r1
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	2240      	movs	r2, #64	@ 0x40
 8007d46:	4013      	ands	r3, r2
 8007d48:	d016      	beq.n	8007d78 <USB_DeactivateEndpoint+0x2d4>
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	18d3      	adds	r3, r2, r3
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	2028      	movs	r0, #40	@ 0x28
 8007d5a:	183b      	adds	r3, r7, r0
 8007d5c:	492b      	ldr	r1, [pc, #172]	@ (8007e0c <USB_DeactivateEndpoint+0x368>)
 8007d5e:	400a      	ands	r2, r1
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	18d3      	adds	r3, r2, r3
 8007d6c:	183a      	adds	r2, r7, r0
 8007d6e:	8812      	ldrh	r2, [r2, #0]
 8007d70:	4927      	ldr	r1, [pc, #156]	@ (8007e10 <USB_DeactivateEndpoint+0x36c>)
 8007d72:	430a      	orrs	r2, r1
 8007d74:	b292      	uxth	r2, r2
 8007d76:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	18d3      	adds	r3, r2, r3
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	2026      	movs	r0, #38	@ 0x26
 8007d88:	183b      	adds	r3, r7, r0
 8007d8a:	4920      	ldr	r1, [pc, #128]	@ (8007e0c <USB_DeactivateEndpoint+0x368>)
 8007d8c:	400a      	ands	r2, r1
 8007d8e:	801a      	strh	r2, [r3, #0]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	18d3      	adds	r3, r2, r3
 8007d9a:	183a      	adds	r2, r7, r0
 8007d9c:	8812      	ldrh	r2, [r2, #0]
 8007d9e:	491f      	ldr	r1, [pc, #124]	@ (8007e1c <USB_DeactivateEndpoint+0x378>)
 8007da0:	430a      	orrs	r2, r1
 8007da2:	b292      	uxth	r2, r2
 8007da4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	18d3      	adds	r3, r2, r3
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	2024      	movs	r0, #36	@ 0x24
 8007db6:	183b      	adds	r3, r7, r0
 8007db8:	4916      	ldr	r1, [pc, #88]	@ (8007e14 <USB_DeactivateEndpoint+0x370>)
 8007dba:	400a      	ands	r2, r1
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	18d3      	adds	r3, r2, r3
 8007dc8:	183a      	adds	r2, r7, r0
 8007dca:	8812      	ldrh	r2, [r2, #0]
 8007dcc:	4912      	ldr	r1, [pc, #72]	@ (8007e18 <USB_DeactivateEndpoint+0x374>)
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	b292      	uxth	r2, r2
 8007dd2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	18d3      	adds	r3, r2, r3
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	2022      	movs	r0, #34	@ 0x22
 8007de4:	183b      	adds	r3, r7, r0
 8007de6:	490e      	ldr	r1, [pc, #56]	@ (8007e20 <USB_DeactivateEndpoint+0x37c>)
 8007de8:	400a      	ands	r2, r1
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	18d3      	adds	r3, r2, r3
 8007df6:	183a      	adds	r2, r7, r0
 8007df8:	8812      	ldrh	r2, [r2, #0]
 8007dfa:	4907      	ldr	r1, [pc, #28]	@ (8007e18 <USB_DeactivateEndpoint+0x374>)
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	b292      	uxth	r2, r2
 8007e00:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	0018      	movs	r0, r3
 8007e06:	46bd      	mov	sp, r7
 8007e08:	b00c      	add	sp, #48	@ 0x30
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	ffff8f8f 	.word	0xffff8f8f
 8007e10:	ffff80c0 	.word	0xffff80c0
 8007e14:	ffff8fbf 	.word	0xffff8fbf
 8007e18:	ffff8080 	.word	0xffff8080
 8007e1c:	ffffc080 	.word	0xffffc080
 8007e20:	ffffbf8f 	.word	0xffffbf8f

08007e24 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e24:	b590      	push	{r4, r7, lr}
 8007e26:	b0c3      	sub	sp, #268	@ 0x10c
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	785b      	ldrb	r3, [r3, #1]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d001      	beq.n	8007e3a <USB_EPStartXfer+0x16>
 8007e36:	f000 fd2d 	bl	8008894 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d905      	bls.n	8007e52 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	1d7a      	adds	r2, r7, #5
 8007e4c:	32ff      	adds	r2, #255	@ 0xff
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	e004      	b.n	8007e5c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	1d7a      	adds	r2, r7, #5
 8007e58:	32ff      	adds	r2, #255	@ 0xff
 8007e5a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	7b1b      	ldrb	r3, [r3, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d125      	bne.n	8007eb0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	6959      	ldr	r1, [r3, #20]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	88da      	ldrh	r2, [r3, #6]
 8007e6c:	1d7b      	adds	r3, r7, #5
 8007e6e:	33ff      	adds	r3, #255	@ 0xff
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 fa3f 	bl	80092f8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	613b      	str	r3, [r7, #16]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2250      	movs	r2, #80	@ 0x50
 8007e82:	5a9b      	ldrh	r3, [r3, r2]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	001a      	movs	r2, r3
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	189b      	adds	r3, r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	00da      	lsls	r2, r3, #3
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	18d3      	adds	r3, r2, r3
 8007e98:	4ad7      	ldr	r2, [pc, #860]	@ (80081f8 <USB_EPStartXfer+0x3d4>)
 8007e9a:	4694      	mov	ip, r2
 8007e9c:	4463      	add	r3, ip
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	1d7b      	adds	r3, r7, #5
 8007ea2:	33ff      	adds	r3, #255	@ 0xff
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	801a      	strh	r2, [r3, #0]
 8007eac:	f000 fccd 	bl	800884a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	78db      	ldrb	r3, [r3, #3]
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d000      	beq.n	8007eba <USB_EPStartXfer+0x96>
 8007eb8:	e362      	b.n	8008580 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	6a1a      	ldr	r2, [r3, #32]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d800      	bhi.n	8007ec8 <USB_EPStartXfer+0xa4>
 8007ec6:	e309      	b.n	80084dc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	18d3      	adds	r3, r2, r3
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	2056      	movs	r0, #86	@ 0x56
 8007ed8:	183b      	adds	r3, r7, r0
 8007eda:	49c8      	ldr	r1, [pc, #800]	@ (80081fc <USB_EPStartXfer+0x3d8>)
 8007edc:	400a      	ands	r2, r1
 8007ede:	801a      	strh	r2, [r3, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	18d3      	adds	r3, r2, r3
 8007eea:	183a      	adds	r2, r7, r0
 8007eec:	8812      	ldrh	r2, [r2, #0]
 8007eee:	49c4      	ldr	r1, [pc, #784]	@ (8008200 <USB_EPStartXfer+0x3dc>)
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	b292      	uxth	r2, r2
 8007ef4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	6a1a      	ldr	r2, [r3, #32]
 8007efa:	1d7b      	adds	r3, r7, #5
 8007efc:	33ff      	adds	r3, #255	@ 0xff
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	1ad2      	subs	r2, r2, r3
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	18d3      	adds	r3, r2, r3
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	001a      	movs	r2, r3
 8007f16:	2340      	movs	r3, #64	@ 0x40
 8007f18:	4013      	ands	r3, r2
 8007f1a:	d100      	bne.n	8007f1e <USB_EPStartXfer+0xfa>
 8007f1c:	e176      	b.n	800820c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d000      	beq.n	8007f2c <USB_EPStartXfer+0x108>
 8007f2a:	e074      	b.n	8008016 <USB_EPStartXfer+0x1f2>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2250      	movs	r2, #80	@ 0x50
 8007f34:	5a9b      	ldrh	r3, [r3, r2]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	001a      	movs	r2, r3
 8007f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3c:	189b      	adds	r3, r3, r2
 8007f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	00da      	lsls	r2, r3, #3
 8007f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f48:	18d3      	adds	r3, r2, r3
 8007f4a:	4aae      	ldr	r2, [pc, #696]	@ (8008204 <USB_EPStartXfer+0x3e0>)
 8007f4c:	4694      	mov	ip, r2
 8007f4e:	4463      	add	r3, ip
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	059b      	lsls	r3, r3, #22
 8007f5a:	0d9b      	lsrs	r3, r3, #22
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	801a      	strh	r2, [r3, #0]
 8007f62:	1d7b      	adds	r3, r7, #5
 8007f64:	33ff      	adds	r3, #255	@ 0xff
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d108      	bne.n	8007f7e <USB_EPStartXfer+0x15a>
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	4aa5      	ldr	r2, [pc, #660]	@ (8008208 <USB_EPStartXfer+0x3e4>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	801a      	strh	r2, [r3, #0]
 8007f7c:	e066      	b.n	800804c <USB_EPStartXfer+0x228>
 8007f7e:	1d7b      	adds	r3, r7, #5
 8007f80:	33ff      	adds	r3, #255	@ 0xff
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f86:	d821      	bhi.n	8007fcc <USB_EPStartXfer+0x1a8>
 8007f88:	1d7b      	adds	r3, r7, #5
 8007f8a:	33ff      	adds	r3, #255	@ 0xff
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	1c7a      	adds	r2, r7, #1
 8007f92:	32ff      	adds	r2, #255	@ 0xff
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	1d7b      	adds	r3, r7, #5
 8007f98:	33ff      	adds	r3, #255	@ 0xff
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	d006      	beq.n	8007fb0 <USB_EPStartXfer+0x18c>
 8007fa2:	1c7b      	adds	r3, r7, #1
 8007fa4:	33ff      	adds	r3, #255	@ 0xff
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	1c7a      	adds	r2, r7, #1
 8007fac:	32ff      	adds	r2, #255	@ 0xff
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	1c7b      	adds	r3, r7, #1
 8007fb8:	33ff      	adds	r3, #255	@ 0xff
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	029b      	lsls	r3, r3, #10
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	801a      	strh	r2, [r3, #0]
 8007fca:	e03f      	b.n	800804c <USB_EPStartXfer+0x228>
 8007fcc:	1d7b      	adds	r3, r7, #5
 8007fce:	33ff      	adds	r3, #255	@ 0xff
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	1c7a      	adds	r2, r7, #1
 8007fd6:	32ff      	adds	r2, #255	@ 0xff
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	1d7b      	adds	r3, r7, #5
 8007fdc:	33ff      	adds	r3, #255	@ 0xff
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	221f      	movs	r2, #31
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	d106      	bne.n	8007ff4 <USB_EPStartXfer+0x1d0>
 8007fe6:	1c7b      	adds	r3, r7, #1
 8007fe8:	33ff      	adds	r3, #255	@ 0xff
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	1c7a      	adds	r2, r7, #1
 8007ff0:	32ff      	adds	r2, #255	@ 0xff
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	1c7b      	adds	r3, r7, #1
 8007ffc:	33ff      	adds	r3, #255	@ 0xff
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	029b      	lsls	r3, r3, #10
 8008004:	b29b      	uxth	r3, r3
 8008006:	4313      	orrs	r3, r2
 8008008:	b29b      	uxth	r3, r3
 800800a:	4a7f      	ldr	r2, [pc, #508]	@ (8008208 <USB_EPStartXfer+0x3e4>)
 800800c:	4313      	orrs	r3, r2
 800800e:	b29a      	uxth	r2, r3
 8008010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008012:	801a      	strh	r2, [r3, #0]
 8008014:	e01a      	b.n	800804c <USB_EPStartXfer+0x228>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	785b      	ldrb	r3, [r3, #1]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d116      	bne.n	800804c <USB_EPStartXfer+0x228>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2250      	movs	r2, #80	@ 0x50
 8008022:	5a9b      	ldrh	r3, [r3, r2]
 8008024:	b29b      	uxth	r3, r3
 8008026:	001a      	movs	r2, r3
 8008028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802a:	189b      	adds	r3, r3, r2
 800802c:	633b      	str	r3, [r7, #48]	@ 0x30
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	00da      	lsls	r2, r3, #3
 8008034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008036:	18d3      	adds	r3, r2, r3
 8008038:	4a72      	ldr	r2, [pc, #456]	@ (8008204 <USB_EPStartXfer+0x3e0>)
 800803a:	4694      	mov	ip, r2
 800803c:	4463      	add	r3, ip
 800803e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008040:	1d7b      	adds	r3, r7, #5
 8008042:	33ff      	adds	r3, #255	@ 0xff
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	b29a      	uxth	r2, r3
 8008048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800804c:	2076      	movs	r0, #118	@ 0x76
 800804e:	183b      	adds	r3, r7, r0
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	8952      	ldrh	r2, [r2, #10]
 8008054:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6959      	ldr	r1, [r3, #20]
 800805a:	1d7b      	adds	r3, r7, #5
 800805c:	33ff      	adds	r3, #255	@ 0xff
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	b29c      	uxth	r4, r3
 8008062:	183b      	adds	r3, r7, r0
 8008064:	881a      	ldrh	r2, [r3, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	0023      	movs	r3, r4
 800806a:	f001 f945 	bl	80092f8 <USB_WritePMA>
            ep->xfer_buff += len;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	695a      	ldr	r2, [r3, #20]
 8008072:	1d7b      	adds	r3, r7, #5
 8008074:	33ff      	adds	r3, #255	@ 0xff
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	18d2      	adds	r2, r2, r3
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6a1a      	ldr	r2, [r3, #32]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	429a      	cmp	r2, r3
 8008088:	d908      	bls.n	800809c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	6a1a      	ldr	r2, [r3, #32]
 800808e:	1d7b      	adds	r3, r7, #5
 8008090:	33ff      	adds	r3, #255	@ 0xff
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	1ad2      	subs	r2, r2, r3
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	621a      	str	r2, [r3, #32]
 800809a:	e007      	b.n	80080ac <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	1d7a      	adds	r2, r7, #5
 80080a2:	32ff      	adds	r2, #255	@ 0xff
 80080a4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2200      	movs	r2, #0
 80080aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d000      	beq.n	80080b6 <USB_EPStartXfer+0x292>
 80080b4:	e070      	b.n	8008198 <USB_EPStartXfer+0x374>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	61bb      	str	r3, [r7, #24]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2250      	movs	r2, #80	@ 0x50
 80080be:	5a9b      	ldrh	r3, [r3, r2]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	001a      	movs	r2, r3
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	189b      	adds	r3, r3, r2
 80080c8:	61bb      	str	r3, [r7, #24]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	00da      	lsls	r2, r3, #3
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	18d3      	adds	r3, r2, r3
 80080d4:	4a48      	ldr	r2, [pc, #288]	@ (80081f8 <USB_EPStartXfer+0x3d4>)
 80080d6:	4694      	mov	ip, r2
 80080d8:	4463      	add	r3, ip
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	059b      	lsls	r3, r3, #22
 80080e4:	0d9b      	lsrs	r3, r3, #22
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	1d7b      	adds	r3, r7, #5
 80080ee:	33ff      	adds	r3, #255	@ 0xff
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d108      	bne.n	8008108 <USB_EPStartXfer+0x2e4>
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	4a42      	ldr	r2, [pc, #264]	@ (8008208 <USB_EPStartXfer+0x3e4>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	b29a      	uxth	r2, r3
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	801a      	strh	r2, [r3, #0]
 8008106:	e064      	b.n	80081d2 <USB_EPStartXfer+0x3ae>
 8008108:	1d7b      	adds	r3, r7, #5
 800810a:	33ff      	adds	r3, #255	@ 0xff
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008110:	d81f      	bhi.n	8008152 <USB_EPStartXfer+0x32e>
 8008112:	1d7b      	adds	r3, r7, #5
 8008114:	33ff      	adds	r3, #255	@ 0xff
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	085b      	lsrs	r3, r3, #1
 800811a:	21fc      	movs	r1, #252	@ 0xfc
 800811c:	187a      	adds	r2, r7, r1
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	1d7b      	adds	r3, r7, #5
 8008122:	33ff      	adds	r3, #255	@ 0xff
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2201      	movs	r2, #1
 8008128:	4013      	ands	r3, r2
 800812a:	d004      	beq.n	8008136 <USB_EPStartXfer+0x312>
 800812c:	187b      	adds	r3, r7, r1
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3301      	adds	r3, #1
 8008132:	187a      	adds	r2, r7, r1
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	b29a      	uxth	r2, r3
 800813c:	23fc      	movs	r3, #252	@ 0xfc
 800813e:	18fb      	adds	r3, r7, r3
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	029b      	lsls	r3, r3, #10
 8008146:	b29b      	uxth	r3, r3
 8008148:	4313      	orrs	r3, r2
 800814a:	b29a      	uxth	r2, r3
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	801a      	strh	r2, [r3, #0]
 8008150:	e03f      	b.n	80081d2 <USB_EPStartXfer+0x3ae>
 8008152:	1d7b      	adds	r3, r7, #5
 8008154:	33ff      	adds	r3, #255	@ 0xff
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	21fc      	movs	r1, #252	@ 0xfc
 800815c:	187a      	adds	r2, r7, r1
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	1d7b      	adds	r3, r7, #5
 8008162:	33ff      	adds	r3, #255	@ 0xff
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	221f      	movs	r2, #31
 8008168:	4013      	ands	r3, r2
 800816a:	d104      	bne.n	8008176 <USB_EPStartXfer+0x352>
 800816c:	187b      	adds	r3, r7, r1
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3b01      	subs	r3, #1
 8008172:	187a      	adds	r2, r7, r1
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29a      	uxth	r2, r3
 800817c:	23fc      	movs	r3, #252	@ 0xfc
 800817e:	18fb      	adds	r3, r7, r3
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	029b      	lsls	r3, r3, #10
 8008186:	b29b      	uxth	r3, r3
 8008188:	4313      	orrs	r3, r2
 800818a:	b29b      	uxth	r3, r3
 800818c:	4a1e      	ldr	r2, [pc, #120]	@ (8008208 <USB_EPStartXfer+0x3e4>)
 800818e:	4313      	orrs	r3, r2
 8008190:	b29a      	uxth	r2, r3
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	e01c      	b.n	80081d2 <USB_EPStartXfer+0x3ae>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	785b      	ldrb	r3, [r3, #1]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d118      	bne.n	80081d2 <USB_EPStartXfer+0x3ae>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	623b      	str	r3, [r7, #32]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2250      	movs	r2, #80	@ 0x50
 80081a8:	5a9b      	ldrh	r3, [r3, r2]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	001a      	movs	r2, r3
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	189b      	adds	r3, r3, r2
 80081b2:	623b      	str	r3, [r7, #32]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	00da      	lsls	r2, r3, #3
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	18d3      	adds	r3, r2, r3
 80081be:	4a0e      	ldr	r2, [pc, #56]	@ (80081f8 <USB_EPStartXfer+0x3d4>)
 80081c0:	4694      	mov	ip, r2
 80081c2:	4463      	add	r3, ip
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	1d7b      	adds	r3, r7, #5
 80081c8:	33ff      	adds	r3, #255	@ 0xff
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80081d2:	2076      	movs	r0, #118	@ 0x76
 80081d4:	183b      	adds	r3, r7, r0
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	8912      	ldrh	r2, [r2, #8]
 80081da:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	6959      	ldr	r1, [r3, #20]
 80081e0:	1d7b      	adds	r3, r7, #5
 80081e2:	33ff      	adds	r3, #255	@ 0xff
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	b29c      	uxth	r4, r3
 80081e8:	183b      	adds	r3, r7, r0
 80081ea:	881a      	ldrh	r2, [r3, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	0023      	movs	r3, r4
 80081f0:	f001 f882 	bl	80092f8 <USB_WritePMA>
 80081f4:	e329      	b.n	800884a <USB_EPStartXfer+0xa26>
 80081f6:	46c0      	nop			@ (mov r8, r8)
 80081f8:	00000402 	.word	0x00000402
 80081fc:	ffff8f8f 	.word	0xffff8f8f
 8008200:	ffff8180 	.word	0xffff8180
 8008204:	00000406 	.word	0x00000406
 8008208:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d000      	beq.n	8008216 <USB_EPStartXfer+0x3f2>
 8008214:	e070      	b.n	80082f8 <USB_EPStartXfer+0x4d4>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	64bb      	str	r3, [r7, #72]	@ 0x48
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2250      	movs	r2, #80	@ 0x50
 800821e:	5a9b      	ldrh	r3, [r3, r2]
 8008220:	b29b      	uxth	r3, r3
 8008222:	001a      	movs	r2, r3
 8008224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008226:	189b      	adds	r3, r3, r2
 8008228:	64bb      	str	r3, [r7, #72]	@ 0x48
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	00da      	lsls	r2, r3, #3
 8008230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008232:	18d3      	adds	r3, r2, r3
 8008234:	4acd      	ldr	r2, [pc, #820]	@ (800856c <USB_EPStartXfer+0x748>)
 8008236:	4694      	mov	ip, r2
 8008238:	4463      	add	r3, ip
 800823a:	647b      	str	r3, [r7, #68]	@ 0x44
 800823c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	059b      	lsls	r3, r3, #22
 8008244:	0d9b      	lsrs	r3, r3, #22
 8008246:	b29a      	uxth	r2, r3
 8008248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	1d7b      	adds	r3, r7, #5
 800824e:	33ff      	adds	r3, #255	@ 0xff
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d108      	bne.n	8008268 <USB_EPStartXfer+0x444>
 8008256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	4ac4      	ldr	r2, [pc, #784]	@ (8008570 <USB_EPStartXfer+0x74c>)
 800825e:	4313      	orrs	r3, r2
 8008260:	b29a      	uxth	r2, r3
 8008262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008264:	801a      	strh	r2, [r3, #0]
 8008266:	e064      	b.n	8008332 <USB_EPStartXfer+0x50e>
 8008268:	1d7b      	adds	r3, r7, #5
 800826a:	33ff      	adds	r3, #255	@ 0xff
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008270:	d81f      	bhi.n	80082b2 <USB_EPStartXfer+0x48e>
 8008272:	1d7b      	adds	r3, r7, #5
 8008274:	33ff      	adds	r3, #255	@ 0xff
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	085b      	lsrs	r3, r3, #1
 800827a:	21f8      	movs	r1, #248	@ 0xf8
 800827c:	187a      	adds	r2, r7, r1
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	1d7b      	adds	r3, r7, #5
 8008282:	33ff      	adds	r3, #255	@ 0xff
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2201      	movs	r2, #1
 8008288:	4013      	ands	r3, r2
 800828a:	d004      	beq.n	8008296 <USB_EPStartXfer+0x472>
 800828c:	187b      	adds	r3, r7, r1
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3301      	adds	r3, #1
 8008292:	187a      	adds	r2, r7, r1
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29a      	uxth	r2, r3
 800829c:	23f8      	movs	r3, #248	@ 0xf8
 800829e:	18fb      	adds	r3, r7, r3
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	029b      	lsls	r3, r3, #10
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	4313      	orrs	r3, r2
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	e03f      	b.n	8008332 <USB_EPStartXfer+0x50e>
 80082b2:	1d7b      	adds	r3, r7, #5
 80082b4:	33ff      	adds	r3, #255	@ 0xff
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	21f8      	movs	r1, #248	@ 0xf8
 80082bc:	187a      	adds	r2, r7, r1
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	1d7b      	adds	r3, r7, #5
 80082c2:	33ff      	adds	r3, #255	@ 0xff
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	221f      	movs	r2, #31
 80082c8:	4013      	ands	r3, r2
 80082ca:	d104      	bne.n	80082d6 <USB_EPStartXfer+0x4b2>
 80082cc:	187b      	adds	r3, r7, r1
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	187a      	adds	r2, r7, r1
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	b29a      	uxth	r2, r3
 80082dc:	23f8      	movs	r3, #248	@ 0xf8
 80082de:	18fb      	adds	r3, r7, r3
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	029b      	lsls	r3, r3, #10
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	4313      	orrs	r3, r2
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	4aa0      	ldr	r2, [pc, #640]	@ (8008570 <USB_EPStartXfer+0x74c>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082f4:	801a      	strh	r2, [r3, #0]
 80082f6:	e01c      	b.n	8008332 <USB_EPStartXfer+0x50e>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	785b      	ldrb	r3, [r3, #1]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d118      	bne.n	8008332 <USB_EPStartXfer+0x50e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	653b      	str	r3, [r7, #80]	@ 0x50
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2250      	movs	r2, #80	@ 0x50
 8008308:	5a9b      	ldrh	r3, [r3, r2]
 800830a:	b29b      	uxth	r3, r3
 800830c:	001a      	movs	r2, r3
 800830e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008310:	189b      	adds	r3, r3, r2
 8008312:	653b      	str	r3, [r7, #80]	@ 0x50
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	00da      	lsls	r2, r3, #3
 800831a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800831c:	18d3      	adds	r3, r2, r3
 800831e:	4a93      	ldr	r2, [pc, #588]	@ (800856c <USB_EPStartXfer+0x748>)
 8008320:	4694      	mov	ip, r2
 8008322:	4463      	add	r3, ip
 8008324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008326:	1d7b      	adds	r3, r7, #5
 8008328:	33ff      	adds	r3, #255	@ 0xff
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	b29a      	uxth	r2, r3
 800832e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008330:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008332:	2076      	movs	r0, #118	@ 0x76
 8008334:	183b      	adds	r3, r7, r0
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	8912      	ldrh	r2, [r2, #8]
 800833a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	6959      	ldr	r1, [r3, #20]
 8008340:	1d7b      	adds	r3, r7, #5
 8008342:	33ff      	adds	r3, #255	@ 0xff
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	b29c      	uxth	r4, r3
 8008348:	183b      	adds	r3, r7, r0
 800834a:	881a      	ldrh	r2, [r3, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	0023      	movs	r3, r4
 8008350:	f000 ffd2 	bl	80092f8 <USB_WritePMA>
            ep->xfer_buff += len;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	695a      	ldr	r2, [r3, #20]
 8008358:	1d7b      	adds	r3, r7, #5
 800835a:	33ff      	adds	r3, #255	@ 0xff
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	18d2      	adds	r2, r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	6a1a      	ldr	r2, [r3, #32]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	429a      	cmp	r2, r3
 800836e:	d908      	bls.n	8008382 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6a1a      	ldr	r2, [r3, #32]
 8008374:	1d7b      	adds	r3, r7, #5
 8008376:	33ff      	adds	r3, #255	@ 0xff
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	1ad2      	subs	r2, r2, r3
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	621a      	str	r2, [r3, #32]
 8008380:	e007      	b.n	8008392 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	1d7a      	adds	r2, r7, #5
 8008388:	32ff      	adds	r2, #255	@ 0xff
 800838a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2200      	movs	r2, #0
 8008390:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	643b      	str	r3, [r7, #64]	@ 0x40
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d000      	beq.n	80083a0 <USB_EPStartXfer+0x57c>
 800839e:	e070      	b.n	8008482 <USB_EPStartXfer+0x65e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2250      	movs	r2, #80	@ 0x50
 80083a8:	5a9b      	ldrh	r3, [r3, r2]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	001a      	movs	r2, r3
 80083ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b0:	189b      	adds	r3, r3, r2
 80083b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	00da      	lsls	r2, r3, #3
 80083ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083bc:	18d3      	adds	r3, r2, r3
 80083be:	4a6d      	ldr	r2, [pc, #436]	@ (8008574 <USB_EPStartXfer+0x750>)
 80083c0:	4694      	mov	ip, r2
 80083c2:	4463      	add	r3, ip
 80083c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	059b      	lsls	r3, r3, #22
 80083ce:	0d9b      	lsrs	r3, r3, #22
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d4:	801a      	strh	r2, [r3, #0]
 80083d6:	1d7b      	adds	r3, r7, #5
 80083d8:	33ff      	adds	r3, #255	@ 0xff
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d108      	bne.n	80083f2 <USB_EPStartXfer+0x5ce>
 80083e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	4a62      	ldr	r2, [pc, #392]	@ (8008570 <USB_EPStartXfer+0x74c>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	e062      	b.n	80084b8 <USB_EPStartXfer+0x694>
 80083f2:	1d7b      	adds	r3, r7, #5
 80083f4:	33ff      	adds	r3, #255	@ 0xff
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80083fa:	d81f      	bhi.n	800843c <USB_EPStartXfer+0x618>
 80083fc:	1d7b      	adds	r3, r7, #5
 80083fe:	33ff      	adds	r3, #255	@ 0xff
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	085b      	lsrs	r3, r3, #1
 8008404:	21f4      	movs	r1, #244	@ 0xf4
 8008406:	187a      	adds	r2, r7, r1
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	1d7b      	adds	r3, r7, #5
 800840c:	33ff      	adds	r3, #255	@ 0xff
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2201      	movs	r2, #1
 8008412:	4013      	ands	r3, r2
 8008414:	d004      	beq.n	8008420 <USB_EPStartXfer+0x5fc>
 8008416:	187b      	adds	r3, r7, r1
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3301      	adds	r3, #1
 800841c:	187a      	adds	r2, r7, r1
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	b29a      	uxth	r2, r3
 8008426:	23f4      	movs	r3, #244	@ 0xf4
 8008428:	18fb      	adds	r3, r7, r3
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	029b      	lsls	r3, r3, #10
 8008430:	b29b      	uxth	r3, r3
 8008432:	4313      	orrs	r3, r2
 8008434:	b29a      	uxth	r2, r3
 8008436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	e03d      	b.n	80084b8 <USB_EPStartXfer+0x694>
 800843c:	1d7b      	adds	r3, r7, #5
 800843e:	33ff      	adds	r3, #255	@ 0xff
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	095b      	lsrs	r3, r3, #5
 8008444:	21f4      	movs	r1, #244	@ 0xf4
 8008446:	187a      	adds	r2, r7, r1
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	1d7b      	adds	r3, r7, #5
 800844c:	33ff      	adds	r3, #255	@ 0xff
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	221f      	movs	r2, #31
 8008452:	4013      	ands	r3, r2
 8008454:	d104      	bne.n	8008460 <USB_EPStartXfer+0x63c>
 8008456:	187b      	adds	r3, r7, r1
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3b01      	subs	r3, #1
 800845c:	187a      	adds	r2, r7, r1
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29a      	uxth	r2, r3
 8008466:	23f4      	movs	r3, #244	@ 0xf4
 8008468:	18fb      	adds	r3, r7, r3
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	b29b      	uxth	r3, r3
 800846e:	029b      	lsls	r3, r3, #10
 8008470:	b29b      	uxth	r3, r3
 8008472:	4313      	orrs	r3, r2
 8008474:	b29b      	uxth	r3, r3
 8008476:	4a3e      	ldr	r2, [pc, #248]	@ (8008570 <USB_EPStartXfer+0x74c>)
 8008478:	4313      	orrs	r3, r2
 800847a:	b29a      	uxth	r2, r3
 800847c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847e:	801a      	strh	r2, [r3, #0]
 8008480:	e01a      	b.n	80084b8 <USB_EPStartXfer+0x694>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d116      	bne.n	80084b8 <USB_EPStartXfer+0x694>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2250      	movs	r2, #80	@ 0x50
 800848e:	5a9b      	ldrh	r3, [r3, r2]
 8008490:	b29b      	uxth	r3, r3
 8008492:	001a      	movs	r2, r3
 8008494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008496:	189b      	adds	r3, r3, r2
 8008498:	643b      	str	r3, [r7, #64]	@ 0x40
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	00da      	lsls	r2, r3, #3
 80084a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084a2:	18d3      	adds	r3, r2, r3
 80084a4:	4a33      	ldr	r2, [pc, #204]	@ (8008574 <USB_EPStartXfer+0x750>)
 80084a6:	4694      	mov	ip, r2
 80084a8:	4463      	add	r3, ip
 80084aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084ac:	1d7b      	adds	r3, r7, #5
 80084ae:	33ff      	adds	r3, #255	@ 0xff
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80084b8:	2076      	movs	r0, #118	@ 0x76
 80084ba:	183b      	adds	r3, r7, r0
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	8952      	ldrh	r2, [r2, #10]
 80084c0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	6959      	ldr	r1, [r3, #20]
 80084c6:	1d7b      	adds	r3, r7, #5
 80084c8:	33ff      	adds	r3, #255	@ 0xff
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	b29c      	uxth	r4, r3
 80084ce:	183b      	adds	r3, r7, r0
 80084d0:	881a      	ldrh	r2, [r3, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	0023      	movs	r3, r4
 80084d6:	f000 ff0f 	bl	80092f8 <USB_WritePMA>
 80084da:	e1b6      	b.n	800884a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	1d7a      	adds	r2, r7, #5
 80084e2:	32ff      	adds	r2, #255	@ 0xff
 80084e4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	18d3      	adds	r3, r2, r3
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	2062      	movs	r0, #98	@ 0x62
 80084f6:	183b      	adds	r3, r7, r0
 80084f8:	491f      	ldr	r1, [pc, #124]	@ (8008578 <USB_EPStartXfer+0x754>)
 80084fa:	400a      	ands	r2, r1
 80084fc:	801a      	strh	r2, [r3, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	18d3      	adds	r3, r2, r3
 8008508:	183a      	adds	r2, r7, r0
 800850a:	8812      	ldrh	r2, [r2, #0]
 800850c:	491b      	ldr	r1, [pc, #108]	@ (800857c <USB_EPStartXfer+0x758>)
 800850e:	430a      	orrs	r2, r1
 8008510:	b292      	uxth	r2, r2
 8008512:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2250      	movs	r2, #80	@ 0x50
 800851c:	5a9b      	ldrh	r3, [r3, r2]
 800851e:	b29b      	uxth	r3, r3
 8008520:	001a      	movs	r2, r3
 8008522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008524:	189b      	adds	r3, r3, r2
 8008526:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	00da      	lsls	r2, r3, #3
 800852e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008530:	18d3      	adds	r3, r2, r3
 8008532:	4a0e      	ldr	r2, [pc, #56]	@ (800856c <USB_EPStartXfer+0x748>)
 8008534:	4694      	mov	ip, r2
 8008536:	4463      	add	r3, ip
 8008538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800853a:	1d7b      	adds	r3, r7, #5
 800853c:	33ff      	adds	r3, #255	@ 0xff
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	b29a      	uxth	r2, r3
 8008542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008544:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008546:	2076      	movs	r0, #118	@ 0x76
 8008548:	183b      	adds	r3, r7, r0
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	8912      	ldrh	r2, [r2, #8]
 800854e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	6959      	ldr	r1, [r3, #20]
 8008554:	1d7b      	adds	r3, r7, #5
 8008556:	33ff      	adds	r3, #255	@ 0xff
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	b29c      	uxth	r4, r3
 800855c:	183b      	adds	r3, r7, r0
 800855e:	881a      	ldrh	r2, [r3, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	0023      	movs	r3, r4
 8008564:	f000 fec8 	bl	80092f8 <USB_WritePMA>
 8008568:	e16f      	b.n	800884a <USB_EPStartXfer+0xa26>
 800856a:	46c0      	nop			@ (mov r8, r8)
 800856c:	00000402 	.word	0x00000402
 8008570:	ffff8000 	.word	0xffff8000
 8008574:	00000406 	.word	0x00000406
 8008578:	ffff8e8f 	.word	0xffff8e8f
 800857c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	6a1a      	ldr	r2, [r3, #32]
 8008584:	1d7b      	adds	r3, r7, #5
 8008586:	33ff      	adds	r3, #255	@ 0xff
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	1ad2      	subs	r2, r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	18d3      	adds	r3, r2, r3
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	001a      	movs	r2, r3
 80085a0:	2340      	movs	r3, #64	@ 0x40
 80085a2:	4013      	ands	r3, r2
 80085a4:	d100      	bne.n	80085a8 <USB_EPStartXfer+0x784>
 80085a6:	e0a4      	b.n	80086f2 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d000      	beq.n	80085b6 <USB_EPStartXfer+0x792>
 80085b4:	e070      	b.n	8008698 <USB_EPStartXfer+0x874>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2250      	movs	r2, #80	@ 0x50
 80085be:	5a9b      	ldrh	r3, [r3, r2]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	001a      	movs	r2, r3
 80085c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085c6:	189b      	adds	r3, r3, r2
 80085c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	00da      	lsls	r2, r3, #3
 80085d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085d2:	18d3      	adds	r3, r2, r3
 80085d4:	4ada      	ldr	r2, [pc, #872]	@ (8008940 <USB_EPStartXfer+0xb1c>)
 80085d6:	4694      	mov	ip, r2
 80085d8:	4463      	add	r3, ip
 80085da:	667b      	str	r3, [r7, #100]	@ 0x64
 80085dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	059b      	lsls	r3, r3, #22
 80085e4:	0d9b      	lsrs	r3, r3, #22
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085ea:	801a      	strh	r2, [r3, #0]
 80085ec:	1d7b      	adds	r3, r7, #5
 80085ee:	33ff      	adds	r3, #255	@ 0xff
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d108      	bne.n	8008608 <USB_EPStartXfer+0x7e4>
 80085f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4ad1      	ldr	r2, [pc, #836]	@ (8008944 <USB_EPStartXfer+0xb20>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	b29a      	uxth	r2, r3
 8008602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008604:	801a      	strh	r2, [r3, #0]
 8008606:	e062      	b.n	80086ce <USB_EPStartXfer+0x8aa>
 8008608:	1d7b      	adds	r3, r7, #5
 800860a:	33ff      	adds	r3, #255	@ 0xff
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008610:	d81f      	bhi.n	8008652 <USB_EPStartXfer+0x82e>
 8008612:	1d7b      	adds	r3, r7, #5
 8008614:	33ff      	adds	r3, #255	@ 0xff
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	21f0      	movs	r1, #240	@ 0xf0
 800861c:	187a      	adds	r2, r7, r1
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	1d7b      	adds	r3, r7, #5
 8008622:	33ff      	adds	r3, #255	@ 0xff
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2201      	movs	r2, #1
 8008628:	4013      	ands	r3, r2
 800862a:	d004      	beq.n	8008636 <USB_EPStartXfer+0x812>
 800862c:	187b      	adds	r3, r7, r1
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	187a      	adds	r2, r7, r1
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29a      	uxth	r2, r3
 800863c:	23f0      	movs	r3, #240	@ 0xf0
 800863e:	18fb      	adds	r3, r7, r3
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	029b      	lsls	r3, r3, #10
 8008646:	b29b      	uxth	r3, r3
 8008648:	4313      	orrs	r3, r2
 800864a:	b29a      	uxth	r2, r3
 800864c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800864e:	801a      	strh	r2, [r3, #0]
 8008650:	e03d      	b.n	80086ce <USB_EPStartXfer+0x8aa>
 8008652:	1d7b      	adds	r3, r7, #5
 8008654:	33ff      	adds	r3, #255	@ 0xff
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	095b      	lsrs	r3, r3, #5
 800865a:	21f0      	movs	r1, #240	@ 0xf0
 800865c:	187a      	adds	r2, r7, r1
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	1d7b      	adds	r3, r7, #5
 8008662:	33ff      	adds	r3, #255	@ 0xff
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	221f      	movs	r2, #31
 8008668:	4013      	ands	r3, r2
 800866a:	d104      	bne.n	8008676 <USB_EPStartXfer+0x852>
 800866c:	187b      	adds	r3, r7, r1
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3b01      	subs	r3, #1
 8008672:	187a      	adds	r2, r7, r1
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	b29a      	uxth	r2, r3
 800867c:	23f0      	movs	r3, #240	@ 0xf0
 800867e:	18fb      	adds	r3, r7, r3
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	029b      	lsls	r3, r3, #10
 8008686:	b29b      	uxth	r3, r3
 8008688:	4313      	orrs	r3, r2
 800868a:	b29b      	uxth	r3, r3
 800868c:	4aad      	ldr	r2, [pc, #692]	@ (8008944 <USB_EPStartXfer+0xb20>)
 800868e:	4313      	orrs	r3, r2
 8008690:	b29a      	uxth	r2, r3
 8008692:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008694:	801a      	strh	r2, [r3, #0]
 8008696:	e01a      	b.n	80086ce <USB_EPStartXfer+0x8aa>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d116      	bne.n	80086ce <USB_EPStartXfer+0x8aa>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2250      	movs	r2, #80	@ 0x50
 80086a4:	5a9b      	ldrh	r3, [r3, r2]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	001a      	movs	r2, r3
 80086aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086ac:	189b      	adds	r3, r3, r2
 80086ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	00da      	lsls	r2, r3, #3
 80086b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086b8:	18d3      	adds	r3, r2, r3
 80086ba:	4aa1      	ldr	r2, [pc, #644]	@ (8008940 <USB_EPStartXfer+0xb1c>)
 80086bc:	4694      	mov	ip, r2
 80086be:	4463      	add	r3, ip
 80086c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80086c2:	1d7b      	adds	r3, r7, #5
 80086c4:	33ff      	adds	r3, #255	@ 0xff
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80086ce:	2076      	movs	r0, #118	@ 0x76
 80086d0:	183b      	adds	r3, r7, r0
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	8952      	ldrh	r2, [r2, #10]
 80086d6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	6959      	ldr	r1, [r3, #20]
 80086dc:	1d7b      	adds	r3, r7, #5
 80086de:	33ff      	adds	r3, #255	@ 0xff
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	b29c      	uxth	r4, r3
 80086e4:	183b      	adds	r3, r7, r0
 80086e6:	881a      	ldrh	r2, [r3, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	0023      	movs	r3, r4
 80086ec:	f000 fe04 	bl	80092f8 <USB_WritePMA>
 80086f0:	e0ab      	b.n	800884a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	785b      	ldrb	r3, [r3, #1]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d000      	beq.n	80086fc <USB_EPStartXfer+0x8d8>
 80086fa:	e070      	b.n	80087de <USB_EPStartXfer+0x9ba>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2250      	movs	r2, #80	@ 0x50
 8008704:	5a9b      	ldrh	r3, [r3, r2]
 8008706:	b29b      	uxth	r3, r3
 8008708:	001a      	movs	r2, r3
 800870a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800870c:	189b      	adds	r3, r3, r2
 800870e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	00da      	lsls	r2, r3, #3
 8008716:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	4a8b      	ldr	r2, [pc, #556]	@ (8008948 <USB_EPStartXfer+0xb24>)
 800871c:	4694      	mov	ip, r2
 800871e:	4463      	add	r3, ip
 8008720:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	059b      	lsls	r3, r3, #22
 800872a:	0d9b      	lsrs	r3, r3, #22
 800872c:	b29a      	uxth	r2, r3
 800872e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008730:	801a      	strh	r2, [r3, #0]
 8008732:	1d7b      	adds	r3, r7, #5
 8008734:	33ff      	adds	r3, #255	@ 0xff
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d108      	bne.n	800874e <USB_EPStartXfer+0x92a>
 800873c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	b29b      	uxth	r3, r3
 8008742:	4a80      	ldr	r2, [pc, #512]	@ (8008944 <USB_EPStartXfer+0xb20>)
 8008744:	4313      	orrs	r3, r2
 8008746:	b29a      	uxth	r2, r3
 8008748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800874a:	801a      	strh	r2, [r3, #0]
 800874c:	e06c      	b.n	8008828 <USB_EPStartXfer+0xa04>
 800874e:	1d7b      	adds	r3, r7, #5
 8008750:	33ff      	adds	r3, #255	@ 0xff
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b3e      	cmp	r3, #62	@ 0x3e
 8008756:	d81f      	bhi.n	8008798 <USB_EPStartXfer+0x974>
 8008758:	1d7b      	adds	r3, r7, #5
 800875a:	33ff      	adds	r3, #255	@ 0xff
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	085b      	lsrs	r3, r3, #1
 8008760:	21ec      	movs	r1, #236	@ 0xec
 8008762:	187a      	adds	r2, r7, r1
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	1d7b      	adds	r3, r7, #5
 8008768:	33ff      	adds	r3, #255	@ 0xff
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2201      	movs	r2, #1
 800876e:	4013      	ands	r3, r2
 8008770:	d004      	beq.n	800877c <USB_EPStartXfer+0x958>
 8008772:	187b      	adds	r3, r7, r1
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	187a      	adds	r2, r7, r1
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29a      	uxth	r2, r3
 8008782:	23ec      	movs	r3, #236	@ 0xec
 8008784:	18fb      	adds	r3, r7, r3
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	029b      	lsls	r3, r3, #10
 800878c:	b29b      	uxth	r3, r3
 800878e:	4313      	orrs	r3, r2
 8008790:	b29a      	uxth	r2, r3
 8008792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008794:	801a      	strh	r2, [r3, #0]
 8008796:	e047      	b.n	8008828 <USB_EPStartXfer+0xa04>
 8008798:	1d7b      	adds	r3, r7, #5
 800879a:	33ff      	adds	r3, #255	@ 0xff
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	21ec      	movs	r1, #236	@ 0xec
 80087a2:	187a      	adds	r2, r7, r1
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	1d7b      	adds	r3, r7, #5
 80087a8:	33ff      	adds	r3, #255	@ 0xff
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	221f      	movs	r2, #31
 80087ae:	4013      	ands	r3, r2
 80087b0:	d104      	bne.n	80087bc <USB_EPStartXfer+0x998>
 80087b2:	187b      	adds	r3, r7, r1
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	187a      	adds	r2, r7, r1
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	23ec      	movs	r3, #236	@ 0xec
 80087c4:	18fb      	adds	r3, r7, r3
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	029b      	lsls	r3, r3, #10
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	4313      	orrs	r3, r2
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	4a5c      	ldr	r2, [pc, #368]	@ (8008944 <USB_EPStartXfer+0xb20>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087da:	801a      	strh	r2, [r3, #0]
 80087dc:	e024      	b.n	8008828 <USB_EPStartXfer+0xa04>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d120      	bne.n	8008828 <USB_EPStartXfer+0xa04>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2184      	movs	r1, #132	@ 0x84
 80087ea:	187a      	adds	r2, r7, r1
 80087ec:	6013      	str	r3, [r2, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2250      	movs	r2, #80	@ 0x50
 80087f2:	5a9b      	ldrh	r3, [r3, r2]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	001a      	movs	r2, r3
 80087f8:	187b      	adds	r3, r7, r1
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	189b      	adds	r3, r3, r2
 80087fe:	187a      	adds	r2, r7, r1
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	00da      	lsls	r2, r3, #3
 8008808:	187b      	adds	r3, r7, r1
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	18d3      	adds	r3, r2, r3
 800880e:	4a4e      	ldr	r2, [pc, #312]	@ (8008948 <USB_EPStartXfer+0xb24>)
 8008810:	4694      	mov	ip, r2
 8008812:	4463      	add	r3, ip
 8008814:	2180      	movs	r1, #128	@ 0x80
 8008816:	187a      	adds	r2, r7, r1
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	1d7b      	adds	r3, r7, #5
 800881c:	33ff      	adds	r3, #255	@ 0xff
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	b29a      	uxth	r2, r3
 8008822:	187b      	adds	r3, r7, r1
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008828:	2076      	movs	r0, #118	@ 0x76
 800882a:	183b      	adds	r3, r7, r0
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	8912      	ldrh	r2, [r2, #8]
 8008830:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	6959      	ldr	r1, [r3, #20]
 8008836:	1d7b      	adds	r3, r7, #5
 8008838:	33ff      	adds	r3, #255	@ 0xff
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	b29c      	uxth	r4, r3
 800883e:	183b      	adds	r3, r7, r0
 8008840:	881a      	ldrh	r2, [r3, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	0023      	movs	r3, r4
 8008846:	f000 fd57 	bl	80092f8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	18d3      	adds	r3, r2, r3
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	b29a      	uxth	r2, r3
 8008858:	200a      	movs	r0, #10
 800885a:	183b      	adds	r3, r7, r0
 800885c:	493b      	ldr	r1, [pc, #236]	@ (800894c <USB_EPStartXfer+0xb28>)
 800885e:	400a      	ands	r2, r1
 8008860:	801a      	strh	r2, [r3, #0]
 8008862:	183b      	adds	r3, r7, r0
 8008864:	183a      	adds	r2, r7, r0
 8008866:	8812      	ldrh	r2, [r2, #0]
 8008868:	2110      	movs	r1, #16
 800886a:	404a      	eors	r2, r1
 800886c:	801a      	strh	r2, [r3, #0]
 800886e:	183b      	adds	r3, r7, r0
 8008870:	183a      	adds	r2, r7, r0
 8008872:	8812      	ldrh	r2, [r2, #0]
 8008874:	2120      	movs	r1, #32
 8008876:	404a      	eors	r2, r1
 8008878:	801a      	strh	r2, [r3, #0]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	18d3      	adds	r3, r2, r3
 8008884:	183a      	adds	r2, r7, r0
 8008886:	8812      	ldrh	r2, [r2, #0]
 8008888:	4931      	ldr	r1, [pc, #196]	@ (8008950 <USB_EPStartXfer+0xb2c>)
 800888a:	430a      	orrs	r2, r1
 800888c:	b292      	uxth	r2, r2
 800888e:	801a      	strh	r2, [r3, #0]
 8008890:	f000 fbe9 	bl	8009066 <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	7b1b      	ldrb	r3, [r3, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d000      	beq.n	800889e <USB_EPStartXfer+0xa7a>
 800889c:	e0a8      	b.n	80089f0 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d90d      	bls.n	80088c6 <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	1d7a      	adds	r2, r7, #5
 80088b0:	32ff      	adds	r2, #255	@ 0xff
 80088b2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	699a      	ldr	r2, [r3, #24]
 80088b8:	1d7b      	adds	r3, r7, #5
 80088ba:	33ff      	adds	r3, #255	@ 0xff
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	619a      	str	r2, [r3, #24]
 80088c4:	e007      	b.n	80088d6 <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	1d7a      	adds	r2, r7, #5
 80088cc:	32ff      	adds	r2, #255	@ 0xff
 80088ce:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2190      	movs	r1, #144	@ 0x90
 80088da:	187a      	adds	r2, r7, r1
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2250      	movs	r2, #80	@ 0x50
 80088e2:	5a9b      	ldrh	r3, [r3, r2]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	001a      	movs	r2, r3
 80088e8:	187b      	adds	r3, r7, r1
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	189b      	adds	r3, r3, r2
 80088ee:	187a      	adds	r2, r7, r1
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	00da      	lsls	r2, r3, #3
 80088f8:	187b      	adds	r3, r7, r1
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	18d3      	adds	r3, r2, r3
 80088fe:	4a10      	ldr	r2, [pc, #64]	@ (8008940 <USB_EPStartXfer+0xb1c>)
 8008900:	4694      	mov	ip, r2
 8008902:	4463      	add	r3, ip
 8008904:	218c      	movs	r1, #140	@ 0x8c
 8008906:	187a      	adds	r2, r7, r1
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	187b      	adds	r3, r7, r1
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	b29b      	uxth	r3, r3
 8008912:	059b      	lsls	r3, r3, #22
 8008914:	0d9b      	lsrs	r3, r3, #22
 8008916:	b29a      	uxth	r2, r3
 8008918:	187b      	adds	r3, r7, r1
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	801a      	strh	r2, [r3, #0]
 800891e:	1d7b      	adds	r3, r7, #5
 8008920:	33ff      	adds	r3, #255	@ 0xff
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d115      	bne.n	8008954 <USB_EPStartXfer+0xb30>
 8008928:	187b      	adds	r3, r7, r1
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b29b      	uxth	r3, r3
 8008930:	4a04      	ldr	r2, [pc, #16]	@ (8008944 <USB_EPStartXfer+0xb20>)
 8008932:	4313      	orrs	r3, r2
 8008934:	b29a      	uxth	r2, r3
 8008936:	187b      	adds	r3, r7, r1
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	801a      	strh	r2, [r3, #0]
 800893c:	e36e      	b.n	800901c <USB_EPStartXfer+0x11f8>
 800893e:	46c0      	nop			@ (mov r8, r8)
 8008940:	00000406 	.word	0x00000406
 8008944:	ffff8000 	.word	0xffff8000
 8008948:	00000402 	.word	0x00000402
 800894c:	ffff8fbf 	.word	0xffff8fbf
 8008950:	ffff8080 	.word	0xffff8080
 8008954:	1d7b      	adds	r3, r7, #5
 8008956:	33ff      	adds	r3, #255	@ 0xff
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b3e      	cmp	r3, #62	@ 0x3e
 800895c:	d822      	bhi.n	80089a4 <USB_EPStartXfer+0xb80>
 800895e:	1d7b      	adds	r3, r7, #5
 8008960:	33ff      	adds	r3, #255	@ 0xff
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	085b      	lsrs	r3, r3, #1
 8008966:	21e8      	movs	r1, #232	@ 0xe8
 8008968:	187a      	adds	r2, r7, r1
 800896a:	6013      	str	r3, [r2, #0]
 800896c:	1d7b      	adds	r3, r7, #5
 800896e:	33ff      	adds	r3, #255	@ 0xff
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2201      	movs	r2, #1
 8008974:	4013      	ands	r3, r2
 8008976:	d004      	beq.n	8008982 <USB_EPStartXfer+0xb5e>
 8008978:	187b      	adds	r3, r7, r1
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3301      	adds	r3, #1
 800897e:	187a      	adds	r2, r7, r1
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	218c      	movs	r1, #140	@ 0x8c
 8008984:	187b      	adds	r3, r7, r1
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	b29a      	uxth	r2, r3
 800898c:	23e8      	movs	r3, #232	@ 0xe8
 800898e:	18fb      	adds	r3, r7, r3
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	029b      	lsls	r3, r3, #10
 8008996:	b29b      	uxth	r3, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	b29a      	uxth	r2, r3
 800899c:	187b      	adds	r3, r7, r1
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	801a      	strh	r2, [r3, #0]
 80089a2:	e33b      	b.n	800901c <USB_EPStartXfer+0x11f8>
 80089a4:	1d7b      	adds	r3, r7, #5
 80089a6:	33ff      	adds	r3, #255	@ 0xff
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	095b      	lsrs	r3, r3, #5
 80089ac:	21e8      	movs	r1, #232	@ 0xe8
 80089ae:	187a      	adds	r2, r7, r1
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	1d7b      	adds	r3, r7, #5
 80089b4:	33ff      	adds	r3, #255	@ 0xff
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	221f      	movs	r2, #31
 80089ba:	4013      	ands	r3, r2
 80089bc:	d104      	bne.n	80089c8 <USB_EPStartXfer+0xba4>
 80089be:	187b      	adds	r3, r7, r1
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	187a      	adds	r2, r7, r1
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	218c      	movs	r1, #140	@ 0x8c
 80089ca:	187b      	adds	r3, r7, r1
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	23e8      	movs	r3, #232	@ 0xe8
 80089d4:	18fb      	adds	r3, r7, r3
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	029b      	lsls	r3, r3, #10
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4313      	orrs	r3, r2
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	4ad7      	ldr	r2, [pc, #860]	@ (8008d40 <USB_EPStartXfer+0xf1c>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	187b      	adds	r3, r7, r1
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	801a      	strh	r2, [r3, #0]
 80089ee:	e315      	b.n	800901c <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	78db      	ldrb	r3, [r3, #3]
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d000      	beq.n	80089fa <USB_EPStartXfer+0xbd6>
 80089f8:	e189      	b.n	8008d0e <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	785b      	ldrb	r3, [r3, #1]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d000      	beq.n	8008a04 <USB_EPStartXfer+0xbe0>
 8008a02:	e07b      	b.n	8008afc <USB_EPStartXfer+0xcd8>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	21ac      	movs	r1, #172	@ 0xac
 8008a08:	187a      	adds	r2, r7, r1
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2250      	movs	r2, #80	@ 0x50
 8008a10:	5a9b      	ldrh	r3, [r3, r2]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	001a      	movs	r2, r3
 8008a16:	187b      	adds	r3, r7, r1
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	189b      	adds	r3, r3, r2
 8008a1c:	187a      	adds	r2, r7, r1
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	00da      	lsls	r2, r3, #3
 8008a26:	187b      	adds	r3, r7, r1
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	18d3      	adds	r3, r2, r3
 8008a2c:	4ac5      	ldr	r2, [pc, #788]	@ (8008d44 <USB_EPStartXfer+0xf20>)
 8008a2e:	4694      	mov	ip, r2
 8008a30:	4463      	add	r3, ip
 8008a32:	21a8      	movs	r1, #168	@ 0xa8
 8008a34:	187a      	adds	r2, r7, r1
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	187b      	adds	r3, r7, r1
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	059b      	lsls	r3, r3, #22
 8008a42:	0d9b      	lsrs	r3, r3, #22
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	187b      	adds	r3, r7, r1
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	801a      	strh	r2, [r3, #0]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10a      	bne.n	8008a6a <USB_EPStartXfer+0xc46>
 8008a54:	187b      	adds	r3, r7, r1
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	4ab8      	ldr	r2, [pc, #736]	@ (8008d40 <USB_EPStartXfer+0xf1c>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	187b      	adds	r3, r7, r1
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	801a      	strh	r2, [r3, #0]
 8008a68:	e06c      	b.n	8008b44 <USB_EPStartXfer+0xd20>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a70:	d820      	bhi.n	8008ab4 <USB_EPStartXfer+0xc90>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	085b      	lsrs	r3, r3, #1
 8008a78:	21e4      	movs	r1, #228	@ 0xe4
 8008a7a:	187a      	adds	r2, r7, r1
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	2201      	movs	r2, #1
 8008a84:	4013      	ands	r3, r2
 8008a86:	d004      	beq.n	8008a92 <USB_EPStartXfer+0xc6e>
 8008a88:	187b      	adds	r3, r7, r1
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	187a      	adds	r2, r7, r1
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	21a8      	movs	r1, #168	@ 0xa8
 8008a94:	187b      	adds	r3, r7, r1
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	23e4      	movs	r3, #228	@ 0xe4
 8008a9e:	18fb      	adds	r3, r7, r3
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	029b      	lsls	r3, r3, #10
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	187b      	adds	r3, r7, r1
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	801a      	strh	r2, [r3, #0]
 8008ab2:	e047      	b.n	8008b44 <USB_EPStartXfer+0xd20>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	095b      	lsrs	r3, r3, #5
 8008aba:	21e4      	movs	r1, #228	@ 0xe4
 8008abc:	187a      	adds	r2, r7, r1
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	221f      	movs	r2, #31
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	d104      	bne.n	8008ad4 <USB_EPStartXfer+0xcb0>
 8008aca:	187b      	adds	r3, r7, r1
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	187a      	adds	r2, r7, r1
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	21a8      	movs	r1, #168	@ 0xa8
 8008ad6:	187b      	adds	r3, r7, r1
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	23e4      	movs	r3, #228	@ 0xe4
 8008ae0:	18fb      	adds	r3, r7, r3
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	029b      	lsls	r3, r3, #10
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	4313      	orrs	r3, r2
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	4a94      	ldr	r2, [pc, #592]	@ (8008d40 <USB_EPStartXfer+0xf1c>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	187b      	adds	r3, r7, r1
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	801a      	strh	r2, [r3, #0]
 8008afa:	e023      	b.n	8008b44 <USB_EPStartXfer+0xd20>
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	785b      	ldrb	r3, [r3, #1]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d11f      	bne.n	8008b44 <USB_EPStartXfer+0xd20>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	21b4      	movs	r1, #180	@ 0xb4
 8008b08:	187a      	adds	r2, r7, r1
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2250      	movs	r2, #80	@ 0x50
 8008b10:	5a9b      	ldrh	r3, [r3, r2]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	001a      	movs	r2, r3
 8008b16:	187b      	adds	r3, r7, r1
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	189b      	adds	r3, r3, r2
 8008b1c:	187a      	adds	r2, r7, r1
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	00da      	lsls	r2, r3, #3
 8008b26:	187b      	adds	r3, r7, r1
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	18d3      	adds	r3, r2, r3
 8008b2c:	4a85      	ldr	r2, [pc, #532]	@ (8008d44 <USB_EPStartXfer+0xf20>)
 8008b2e:	4694      	mov	ip, r2
 8008b30:	4463      	add	r3, ip
 8008b32:	21b0      	movs	r1, #176	@ 0xb0
 8008b34:	187a      	adds	r2, r7, r1
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	187b      	adds	r3, r7, r1
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	801a      	strh	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	22a4      	movs	r2, #164	@ 0xa4
 8008b48:	18ba      	adds	r2, r7, r2
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	785b      	ldrb	r3, [r3, #1]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d000      	beq.n	8008b56 <USB_EPStartXfer+0xd32>
 8008b54:	e07b      	b.n	8008c4e <USB_EPStartXfer+0xe2a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	219c      	movs	r1, #156	@ 0x9c
 8008b5a:	187a      	adds	r2, r7, r1
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2250      	movs	r2, #80	@ 0x50
 8008b62:	5a9b      	ldrh	r3, [r3, r2]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	001a      	movs	r2, r3
 8008b68:	187b      	adds	r3, r7, r1
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	189b      	adds	r3, r3, r2
 8008b6e:	187a      	adds	r2, r7, r1
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	00da      	lsls	r2, r3, #3
 8008b78:	187b      	adds	r3, r7, r1
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	18d3      	adds	r3, r2, r3
 8008b7e:	4a72      	ldr	r2, [pc, #456]	@ (8008d48 <USB_EPStartXfer+0xf24>)
 8008b80:	4694      	mov	ip, r2
 8008b82:	4463      	add	r3, ip
 8008b84:	2198      	movs	r1, #152	@ 0x98
 8008b86:	187a      	adds	r2, r7, r1
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	187b      	adds	r3, r7, r1
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	059b      	lsls	r3, r3, #22
 8008b94:	0d9b      	lsrs	r3, r3, #22
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	187b      	adds	r3, r7, r1
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10a      	bne.n	8008bbc <USB_EPStartXfer+0xd98>
 8008ba6:	187b      	adds	r3, r7, r1
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	4a64      	ldr	r2, [pc, #400]	@ (8008d40 <USB_EPStartXfer+0xf1c>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	187b      	adds	r3, r7, r1
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	801a      	strh	r2, [r3, #0]
 8008bba:	e069      	b.n	8008c90 <USB_EPStartXfer+0xe6c>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008bc2:	d820      	bhi.n	8008c06 <USB_EPStartXfer+0xde2>
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	085b      	lsrs	r3, r3, #1
 8008bca:	21e0      	movs	r1, #224	@ 0xe0
 8008bcc:	187a      	adds	r2, r7, r1
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <USB_EPStartXfer+0xdc0>
 8008bda:	187b      	adds	r3, r7, r1
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3301      	adds	r3, #1
 8008be0:	187a      	adds	r2, r7, r1
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	2198      	movs	r1, #152	@ 0x98
 8008be6:	187b      	adds	r3, r7, r1
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	23e0      	movs	r3, #224	@ 0xe0
 8008bf0:	18fb      	adds	r3, r7, r3
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	029b      	lsls	r3, r3, #10
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	187b      	adds	r3, r7, r1
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	801a      	strh	r2, [r3, #0]
 8008c04:	e044      	b.n	8008c90 <USB_EPStartXfer+0xe6c>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	21e0      	movs	r1, #224	@ 0xe0
 8008c0e:	187a      	adds	r2, r7, r1
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	221f      	movs	r2, #31
 8008c18:	4013      	ands	r3, r2
 8008c1a:	d104      	bne.n	8008c26 <USB_EPStartXfer+0xe02>
 8008c1c:	187b      	adds	r3, r7, r1
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	187a      	adds	r2, r7, r1
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	2198      	movs	r1, #152	@ 0x98
 8008c28:	187b      	adds	r3, r7, r1
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	23e0      	movs	r3, #224	@ 0xe0
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	029b      	lsls	r3, r3, #10
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	4a3f      	ldr	r2, [pc, #252]	@ (8008d40 <USB_EPStartXfer+0xf1c>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	187b      	adds	r3, r7, r1
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	e020      	b.n	8008c90 <USB_EPStartXfer+0xe6c>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d11c      	bne.n	8008c90 <USB_EPStartXfer+0xe6c>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2250      	movs	r2, #80	@ 0x50
 8008c5a:	5a9b      	ldrh	r3, [r3, r2]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	001a      	movs	r2, r3
 8008c60:	21a4      	movs	r1, #164	@ 0xa4
 8008c62:	187b      	adds	r3, r7, r1
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	189b      	adds	r3, r3, r2
 8008c68:	187a      	adds	r2, r7, r1
 8008c6a:	6013      	str	r3, [r2, #0]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	00da      	lsls	r2, r3, #3
 8008c72:	187b      	adds	r3, r7, r1
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	18d3      	adds	r3, r2, r3
 8008c78:	4a33      	ldr	r2, [pc, #204]	@ (8008d48 <USB_EPStartXfer+0xf24>)
 8008c7a:	4694      	mov	ip, r2
 8008c7c:	4463      	add	r3, ip
 8008c7e:	21a0      	movs	r1, #160	@ 0xa0
 8008c80:	187a      	adds	r2, r7, r1
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	187b      	adds	r3, r7, r1
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d100      	bne.n	8008c9a <USB_EPStartXfer+0xe76>
 8008c98:	e1c0      	b.n	800901c <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	18d2      	adds	r2, r2, r3
 8008ca4:	2196      	movs	r1, #150	@ 0x96
 8008ca6:	187b      	adds	r3, r7, r1
 8008ca8:	8812      	ldrh	r2, [r2, #0]
 8008caa:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008cac:	187b      	adds	r3, r7, r1
 8008cae:	881a      	ldrh	r2, [r3, #0]
 8008cb0:	2380      	movs	r3, #128	@ 0x80
 8008cb2:	01db      	lsls	r3, r3, #7
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	d004      	beq.n	8008cc2 <USB_EPStartXfer+0xe9e>
 8008cb8:	187b      	adds	r3, r7, r1
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	2240      	movs	r2, #64	@ 0x40
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	d10d      	bne.n	8008cde <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008cc2:	2196      	movs	r1, #150	@ 0x96
 8008cc4:	187b      	adds	r3, r7, r1
 8008cc6:	881a      	ldrh	r2, [r3, #0]
 8008cc8:	2380      	movs	r3, #128	@ 0x80
 8008cca:	01db      	lsls	r3, r3, #7
 8008ccc:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008cce:	d000      	beq.n	8008cd2 <USB_EPStartXfer+0xeae>
 8008cd0:	e1a4      	b.n	800901c <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008cd2:	187b      	adds	r3, r7, r1
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	2240      	movs	r2, #64	@ 0x40
 8008cd8:	4013      	ands	r3, r2
 8008cda:	d000      	beq.n	8008cde <USB_EPStartXfer+0xeba>
 8008cdc:	e19e      	b.n	800901c <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	18d3      	adds	r3, r2, r3
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	2094      	movs	r0, #148	@ 0x94
 8008cee:	183b      	adds	r3, r7, r0
 8008cf0:	4916      	ldr	r1, [pc, #88]	@ (8008d4c <USB_EPStartXfer+0xf28>)
 8008cf2:	400a      	ands	r2, r1
 8008cf4:	801a      	strh	r2, [r3, #0]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	18d3      	adds	r3, r2, r3
 8008d00:	183a      	adds	r2, r7, r0
 8008d02:	8812      	ldrh	r2, [r2, #0]
 8008d04:	4912      	ldr	r1, [pc, #72]	@ (8008d50 <USB_EPStartXfer+0xf2c>)
 8008d06:	430a      	orrs	r2, r1
 8008d08:	b292      	uxth	r2, r2
 8008d0a:	801a      	strh	r2, [r3, #0]
 8008d0c:	e186      	b.n	800901c <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	78db      	ldrb	r3, [r3, #3]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d000      	beq.n	8008d18 <USB_EPStartXfer+0xef4>
 8008d16:	e17f      	b.n	8009018 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	699a      	ldr	r2, [r3, #24]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d917      	bls.n	8008d54 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	1d7a      	adds	r2, r7, #5
 8008d2a:	32ff      	adds	r2, #255	@ 0xff
 8008d2c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	699a      	ldr	r2, [r3, #24]
 8008d32:	1d7b      	adds	r3, r7, #5
 8008d34:	33ff      	adds	r3, #255	@ 0xff
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	1ad2      	subs	r2, r2, r3
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	619a      	str	r2, [r3, #24]
 8008d3e:	e011      	b.n	8008d64 <USB_EPStartXfer+0xf40>
 8008d40:	ffff8000 	.word	0xffff8000
 8008d44:	00000402 	.word	0x00000402
 8008d48:	00000406 	.word	0x00000406
 8008d4c:	ffff8f8f 	.word	0xffff8f8f
 8008d50:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	1d7a      	adds	r2, r7, #5
 8008d5a:	32ff      	adds	r2, #255	@ 0xff
 8008d5c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2200      	movs	r2, #0
 8008d62:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	785b      	ldrb	r3, [r3, #1]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d000      	beq.n	8008d6e <USB_EPStartXfer+0xf4a>
 8008d6c:	e081      	b.n	8008e72 <USB_EPStartXfer+0x104e>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	21cc      	movs	r1, #204	@ 0xcc
 8008d72:	187a      	adds	r2, r7, r1
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2250      	movs	r2, #80	@ 0x50
 8008d7a:	5a9b      	ldrh	r3, [r3, r2]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	001a      	movs	r2, r3
 8008d80:	187b      	adds	r3, r7, r1
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	189b      	adds	r3, r3, r2
 8008d86:	187a      	adds	r2, r7, r1
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	00da      	lsls	r2, r3, #3
 8008d90:	187b      	adds	r3, r7, r1
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	18d3      	adds	r3, r2, r3
 8008d96:	4ab6      	ldr	r2, [pc, #728]	@ (8009070 <USB_EPStartXfer+0x124c>)
 8008d98:	4694      	mov	ip, r2
 8008d9a:	4463      	add	r3, ip
 8008d9c:	21c8      	movs	r1, #200	@ 0xc8
 8008d9e:	187a      	adds	r2, r7, r1
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	187b      	adds	r3, r7, r1
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	059b      	lsls	r3, r3, #22
 8008dac:	0d9b      	lsrs	r3, r3, #22
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	187b      	adds	r3, r7, r1
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	801a      	strh	r2, [r3, #0]
 8008db6:	1d7b      	adds	r3, r7, #5
 8008db8:	33ff      	adds	r3, #255	@ 0xff
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <USB_EPStartXfer+0xfb2>
 8008dc0:	187b      	adds	r3, r7, r1
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	4aaa      	ldr	r2, [pc, #680]	@ (8009074 <USB_EPStartXfer+0x1250>)
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	187b      	adds	r3, r7, r1
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	801a      	strh	r2, [r3, #0]
 8008dd4:	e072      	b.n	8008ebc <USB_EPStartXfer+0x1098>
 8008dd6:	1d7b      	adds	r3, r7, #5
 8008dd8:	33ff      	adds	r3, #255	@ 0xff
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008dde:	d822      	bhi.n	8008e26 <USB_EPStartXfer+0x1002>
 8008de0:	1d7b      	adds	r3, r7, #5
 8008de2:	33ff      	adds	r3, #255	@ 0xff
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	21dc      	movs	r1, #220	@ 0xdc
 8008dea:	187a      	adds	r2, r7, r1
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	1d7b      	adds	r3, r7, #5
 8008df0:	33ff      	adds	r3, #255	@ 0xff
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2201      	movs	r2, #1
 8008df6:	4013      	ands	r3, r2
 8008df8:	d004      	beq.n	8008e04 <USB_EPStartXfer+0xfe0>
 8008dfa:	187b      	adds	r3, r7, r1
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	187a      	adds	r2, r7, r1
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	21c8      	movs	r1, #200	@ 0xc8
 8008e06:	187b      	adds	r3, r7, r1
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	23dc      	movs	r3, #220	@ 0xdc
 8008e10:	18fb      	adds	r3, r7, r3
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	029b      	lsls	r3, r3, #10
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	187b      	adds	r3, r7, r1
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	801a      	strh	r2, [r3, #0]
 8008e24:	e04a      	b.n	8008ebc <USB_EPStartXfer+0x1098>
 8008e26:	1d7b      	adds	r3, r7, #5
 8008e28:	33ff      	adds	r3, #255	@ 0xff
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	095b      	lsrs	r3, r3, #5
 8008e2e:	21dc      	movs	r1, #220	@ 0xdc
 8008e30:	187a      	adds	r2, r7, r1
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	1d7b      	adds	r3, r7, #5
 8008e36:	33ff      	adds	r3, #255	@ 0xff
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	221f      	movs	r2, #31
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	d104      	bne.n	8008e4a <USB_EPStartXfer+0x1026>
 8008e40:	187b      	adds	r3, r7, r1
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	187a      	adds	r2, r7, r1
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	21c8      	movs	r1, #200	@ 0xc8
 8008e4c:	187b      	adds	r3, r7, r1
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	23dc      	movs	r3, #220	@ 0xdc
 8008e56:	18fb      	adds	r3, r7, r3
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	029b      	lsls	r3, r3, #10
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	4313      	orrs	r3, r2
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	4a83      	ldr	r2, [pc, #524]	@ (8009074 <USB_EPStartXfer+0x1250>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	187b      	adds	r3, r7, r1
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	801a      	strh	r2, [r3, #0]
 8008e70:	e024      	b.n	8008ebc <USB_EPStartXfer+0x1098>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	785b      	ldrb	r3, [r3, #1]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d120      	bne.n	8008ebc <USB_EPStartXfer+0x1098>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	21d4      	movs	r1, #212	@ 0xd4
 8008e7e:	187a      	adds	r2, r7, r1
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2250      	movs	r2, #80	@ 0x50
 8008e86:	5a9b      	ldrh	r3, [r3, r2]
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	001a      	movs	r2, r3
 8008e8c:	187b      	adds	r3, r7, r1
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	189b      	adds	r3, r3, r2
 8008e92:	187a      	adds	r2, r7, r1
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	00da      	lsls	r2, r3, #3
 8008e9c:	187b      	adds	r3, r7, r1
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	18d3      	adds	r3, r2, r3
 8008ea2:	4a73      	ldr	r2, [pc, #460]	@ (8009070 <USB_EPStartXfer+0x124c>)
 8008ea4:	4694      	mov	ip, r2
 8008ea6:	4463      	add	r3, ip
 8008ea8:	21d0      	movs	r1, #208	@ 0xd0
 8008eaa:	187a      	adds	r2, r7, r1
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	1d7b      	adds	r3, r7, #5
 8008eb0:	33ff      	adds	r3, #255	@ 0xff
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	187b      	adds	r3, r7, r1
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	801a      	strh	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	22c4      	movs	r2, #196	@ 0xc4
 8008ec0:	18ba      	adds	r2, r7, r2
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	785b      	ldrb	r3, [r3, #1]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d000      	beq.n	8008ece <USB_EPStartXfer+0x10aa>
 8008ecc:	e081      	b.n	8008fd2 <USB_EPStartXfer+0x11ae>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	21bc      	movs	r1, #188	@ 0xbc
 8008ed2:	187a      	adds	r2, r7, r1
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2250      	movs	r2, #80	@ 0x50
 8008eda:	5a9b      	ldrh	r3, [r3, r2]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	001a      	movs	r2, r3
 8008ee0:	187b      	adds	r3, r7, r1
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	189b      	adds	r3, r3, r2
 8008ee6:	187a      	adds	r2, r7, r1
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	00da      	lsls	r2, r3, #3
 8008ef0:	187b      	adds	r3, r7, r1
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	18d3      	adds	r3, r2, r3
 8008ef6:	4a60      	ldr	r2, [pc, #384]	@ (8009078 <USB_EPStartXfer+0x1254>)
 8008ef8:	4694      	mov	ip, r2
 8008efa:	4463      	add	r3, ip
 8008efc:	21b8      	movs	r1, #184	@ 0xb8
 8008efe:	187a      	adds	r2, r7, r1
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	187b      	adds	r3, r7, r1
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	059b      	lsls	r3, r3, #22
 8008f0c:	0d9b      	lsrs	r3, r3, #22
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	187b      	adds	r3, r7, r1
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	801a      	strh	r2, [r3, #0]
 8008f16:	1d7b      	adds	r3, r7, #5
 8008f18:	33ff      	adds	r3, #255	@ 0xff
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <USB_EPStartXfer+0x1112>
 8008f20:	187b      	adds	r3, r7, r1
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	4a52      	ldr	r2, [pc, #328]	@ (8009074 <USB_EPStartXfer+0x1250>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	187b      	adds	r3, r7, r1
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	801a      	strh	r2, [r3, #0]
 8008f34:	e072      	b.n	800901c <USB_EPStartXfer+0x11f8>
 8008f36:	1d7b      	adds	r3, r7, #5
 8008f38:	33ff      	adds	r3, #255	@ 0xff
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f3e:	d822      	bhi.n	8008f86 <USB_EPStartXfer+0x1162>
 8008f40:	1d7b      	adds	r3, r7, #5
 8008f42:	33ff      	adds	r3, #255	@ 0xff
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	085b      	lsrs	r3, r3, #1
 8008f48:	21d8      	movs	r1, #216	@ 0xd8
 8008f4a:	187a      	adds	r2, r7, r1
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	1d7b      	adds	r3, r7, #5
 8008f50:	33ff      	adds	r3, #255	@ 0xff
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2201      	movs	r2, #1
 8008f56:	4013      	ands	r3, r2
 8008f58:	d004      	beq.n	8008f64 <USB_EPStartXfer+0x1140>
 8008f5a:	187b      	adds	r3, r7, r1
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	187a      	adds	r2, r7, r1
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	21b8      	movs	r1, #184	@ 0xb8
 8008f66:	187b      	adds	r3, r7, r1
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	23d8      	movs	r3, #216	@ 0xd8
 8008f70:	18fb      	adds	r3, r7, r3
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	029b      	lsls	r3, r3, #10
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	187b      	adds	r3, r7, r1
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	801a      	strh	r2, [r3, #0]
 8008f84:	e04a      	b.n	800901c <USB_EPStartXfer+0x11f8>
 8008f86:	1d7b      	adds	r3, r7, #5
 8008f88:	33ff      	adds	r3, #255	@ 0xff
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	095b      	lsrs	r3, r3, #5
 8008f8e:	21d8      	movs	r1, #216	@ 0xd8
 8008f90:	187a      	adds	r2, r7, r1
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	1d7b      	adds	r3, r7, #5
 8008f96:	33ff      	adds	r3, #255	@ 0xff
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	221f      	movs	r2, #31
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	d104      	bne.n	8008faa <USB_EPStartXfer+0x1186>
 8008fa0:	187b      	adds	r3, r7, r1
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	187a      	adds	r2, r7, r1
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	21b8      	movs	r1, #184	@ 0xb8
 8008fac:	187b      	adds	r3, r7, r1
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	23d8      	movs	r3, #216	@ 0xd8
 8008fb6:	18fb      	adds	r3, r7, r3
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	029b      	lsls	r3, r3, #10
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8009074 <USB_EPStartXfer+0x1250>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	187b      	adds	r3, r7, r1
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	801a      	strh	r2, [r3, #0]
 8008fd0:	e024      	b.n	800901c <USB_EPStartXfer+0x11f8>
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d120      	bne.n	800901c <USB_EPStartXfer+0x11f8>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2250      	movs	r2, #80	@ 0x50
 8008fde:	5a9b      	ldrh	r3, [r3, r2]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	001a      	movs	r2, r3
 8008fe4:	21c4      	movs	r1, #196	@ 0xc4
 8008fe6:	187b      	adds	r3, r7, r1
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	189b      	adds	r3, r3, r2
 8008fec:	187a      	adds	r2, r7, r1
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	00da      	lsls	r2, r3, #3
 8008ff6:	187b      	adds	r3, r7, r1
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	18d3      	adds	r3, r2, r3
 8008ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8009078 <USB_EPStartXfer+0x1254>)
 8008ffe:	4694      	mov	ip, r2
 8009000:	4463      	add	r3, ip
 8009002:	21c0      	movs	r1, #192	@ 0xc0
 8009004:	187a      	adds	r2, r7, r1
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	1d7b      	adds	r3, r7, #5
 800900a:	33ff      	adds	r3, #255	@ 0xff
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	b29a      	uxth	r2, r3
 8009010:	187b      	adds	r3, r7, r1
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	801a      	strh	r2, [r3, #0]
 8009016:	e001      	b.n	800901c <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e025      	b.n	8009068 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	18d3      	adds	r3, r2, r3
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	b29a      	uxth	r2, r3
 800902a:	208a      	movs	r0, #138	@ 0x8a
 800902c:	183b      	adds	r3, r7, r0
 800902e:	4913      	ldr	r1, [pc, #76]	@ (800907c <USB_EPStartXfer+0x1258>)
 8009030:	400a      	ands	r2, r1
 8009032:	801a      	strh	r2, [r3, #0]
 8009034:	183b      	adds	r3, r7, r0
 8009036:	183a      	adds	r2, r7, r0
 8009038:	8812      	ldrh	r2, [r2, #0]
 800903a:	2180      	movs	r1, #128	@ 0x80
 800903c:	0149      	lsls	r1, r1, #5
 800903e:	404a      	eors	r2, r1
 8009040:	801a      	strh	r2, [r3, #0]
 8009042:	183b      	adds	r3, r7, r0
 8009044:	183a      	adds	r2, r7, r0
 8009046:	8812      	ldrh	r2, [r2, #0]
 8009048:	2180      	movs	r1, #128	@ 0x80
 800904a:	0189      	lsls	r1, r1, #6
 800904c:	404a      	eors	r2, r1
 800904e:	801a      	strh	r2, [r3, #0]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	18d3      	adds	r3, r2, r3
 800905a:	183a      	adds	r2, r7, r0
 800905c:	8812      	ldrh	r2, [r2, #0]
 800905e:	4908      	ldr	r1, [pc, #32]	@ (8009080 <USB_EPStartXfer+0x125c>)
 8009060:	430a      	orrs	r2, r1
 8009062:	b292      	uxth	r2, r2
 8009064:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	0018      	movs	r0, r3
 800906a:	46bd      	mov	sp, r7
 800906c:	b043      	add	sp, #268	@ 0x10c
 800906e:	bd90      	pop	{r4, r7, pc}
 8009070:	00000402 	.word	0x00000402
 8009074:	ffff8000 	.word	0xffff8000
 8009078:	00000406 	.word	0x00000406
 800907c:	ffffbf8f 	.word	0xffffbf8f
 8009080:	ffff8080 	.word	0xffff8080

08009084 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	785b      	ldrb	r3, [r3, #1]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d01d      	beq.n	80090d2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	18d3      	adds	r3, r2, r3
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	200c      	movs	r0, #12
 80090a6:	183b      	adds	r3, r7, r0
 80090a8:	491b      	ldr	r1, [pc, #108]	@ (8009118 <USB_EPSetStall+0x94>)
 80090aa:	400a      	ands	r2, r1
 80090ac:	801a      	strh	r2, [r3, #0]
 80090ae:	183b      	adds	r3, r7, r0
 80090b0:	183a      	adds	r2, r7, r0
 80090b2:	8812      	ldrh	r2, [r2, #0]
 80090b4:	2110      	movs	r1, #16
 80090b6:	404a      	eors	r2, r1
 80090b8:	801a      	strh	r2, [r3, #0]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	18d3      	adds	r3, r2, r3
 80090c4:	183a      	adds	r2, r7, r0
 80090c6:	8812      	ldrh	r2, [r2, #0]
 80090c8:	4914      	ldr	r1, [pc, #80]	@ (800911c <USB_EPSetStall+0x98>)
 80090ca:	430a      	orrs	r2, r1
 80090cc:	b292      	uxth	r2, r2
 80090ce:	801a      	strh	r2, [r3, #0]
 80090d0:	e01d      	b.n	800910e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	18d3      	adds	r3, r2, r3
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	b29a      	uxth	r2, r3
 80090e0:	200e      	movs	r0, #14
 80090e2:	183b      	adds	r3, r7, r0
 80090e4:	490e      	ldr	r1, [pc, #56]	@ (8009120 <USB_EPSetStall+0x9c>)
 80090e6:	400a      	ands	r2, r1
 80090e8:	801a      	strh	r2, [r3, #0]
 80090ea:	183b      	adds	r3, r7, r0
 80090ec:	183a      	adds	r2, r7, r0
 80090ee:	8812      	ldrh	r2, [r2, #0]
 80090f0:	2180      	movs	r1, #128	@ 0x80
 80090f2:	0149      	lsls	r1, r1, #5
 80090f4:	404a      	eors	r2, r1
 80090f6:	801a      	strh	r2, [r3, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	18d3      	adds	r3, r2, r3
 8009102:	183a      	adds	r2, r7, r0
 8009104:	8812      	ldrh	r2, [r2, #0]
 8009106:	4905      	ldr	r1, [pc, #20]	@ (800911c <USB_EPSetStall+0x98>)
 8009108:	430a      	orrs	r2, r1
 800910a:	b292      	uxth	r2, r2
 800910c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	0018      	movs	r0, r3
 8009112:	46bd      	mov	sp, r7
 8009114:	b004      	add	sp, #16
 8009116:	bd80      	pop	{r7, pc}
 8009118:	ffff8fbf 	.word	0xffff8fbf
 800911c:	ffff8080 	.word	0xffff8080
 8009120:	ffffbf8f 	.word	0xffffbf8f

08009124 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	7b1b      	ldrb	r3, [r3, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d000      	beq.n	8009138 <USB_EPClearStall+0x14>
 8009136:	e095      	b.n	8009264 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	785b      	ldrb	r3, [r3, #1]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d046      	beq.n	80091ce <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	18d2      	adds	r2, r2, r3
 800914a:	2110      	movs	r1, #16
 800914c:	187b      	adds	r3, r7, r1
 800914e:	8812      	ldrh	r2, [r2, #0]
 8009150:	801a      	strh	r2, [r3, #0]
 8009152:	187b      	adds	r3, r7, r1
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	2240      	movs	r2, #64	@ 0x40
 8009158:	4013      	ands	r3, r2
 800915a:	d016      	beq.n	800918a <USB_EPClearStall+0x66>
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	18d3      	adds	r3, r2, r3
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	b29a      	uxth	r2, r3
 800916a:	200e      	movs	r0, #14
 800916c:	183b      	adds	r3, r7, r0
 800916e:	4940      	ldr	r1, [pc, #256]	@ (8009270 <USB_EPClearStall+0x14c>)
 8009170:	400a      	ands	r2, r1
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	18d3      	adds	r3, r2, r3
 800917e:	183a      	adds	r2, r7, r0
 8009180:	8812      	ldrh	r2, [r2, #0]
 8009182:	493c      	ldr	r1, [pc, #240]	@ (8009274 <USB_EPClearStall+0x150>)
 8009184:	430a      	orrs	r2, r1
 8009186:	b292      	uxth	r2, r2
 8009188:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	78db      	ldrb	r3, [r3, #3]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d068      	beq.n	8009264 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	18d3      	adds	r3, r2, r3
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	b29a      	uxth	r2, r3
 80091a0:	200c      	movs	r0, #12
 80091a2:	183b      	adds	r3, r7, r0
 80091a4:	4934      	ldr	r1, [pc, #208]	@ (8009278 <USB_EPClearStall+0x154>)
 80091a6:	400a      	ands	r2, r1
 80091a8:	801a      	strh	r2, [r3, #0]
 80091aa:	183b      	adds	r3, r7, r0
 80091ac:	183a      	adds	r2, r7, r0
 80091ae:	8812      	ldrh	r2, [r2, #0]
 80091b0:	2120      	movs	r1, #32
 80091b2:	404a      	eors	r2, r1
 80091b4:	801a      	strh	r2, [r3, #0]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	18d3      	adds	r3, r2, r3
 80091c0:	183a      	adds	r2, r7, r0
 80091c2:	8812      	ldrh	r2, [r2, #0]
 80091c4:	492d      	ldr	r1, [pc, #180]	@ (800927c <USB_EPClearStall+0x158>)
 80091c6:	430a      	orrs	r2, r1
 80091c8:	b292      	uxth	r2, r2
 80091ca:	801a      	strh	r2, [r3, #0]
 80091cc:	e04a      	b.n	8009264 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	18d2      	adds	r2, r2, r3
 80091d8:	2116      	movs	r1, #22
 80091da:	187b      	adds	r3, r7, r1
 80091dc:	8812      	ldrh	r2, [r2, #0]
 80091de:	801a      	strh	r2, [r3, #0]
 80091e0:	187b      	adds	r3, r7, r1
 80091e2:	881a      	ldrh	r2, [r3, #0]
 80091e4:	2380      	movs	r3, #128	@ 0x80
 80091e6:	01db      	lsls	r3, r3, #7
 80091e8:	4013      	ands	r3, r2
 80091ea:	d016      	beq.n	800921a <USB_EPClearStall+0xf6>
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	18d3      	adds	r3, r2, r3
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	2014      	movs	r0, #20
 80091fc:	183b      	adds	r3, r7, r0
 80091fe:	491c      	ldr	r1, [pc, #112]	@ (8009270 <USB_EPClearStall+0x14c>)
 8009200:	400a      	ands	r2, r1
 8009202:	801a      	strh	r2, [r3, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	18d3      	adds	r3, r2, r3
 800920e:	183a      	adds	r2, r7, r0
 8009210:	8812      	ldrh	r2, [r2, #0]
 8009212:	491b      	ldr	r1, [pc, #108]	@ (8009280 <USB_EPClearStall+0x15c>)
 8009214:	430a      	orrs	r2, r1
 8009216:	b292      	uxth	r2, r2
 8009218:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	18d3      	adds	r3, r2, r3
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	b29a      	uxth	r2, r3
 8009228:	2012      	movs	r0, #18
 800922a:	183b      	adds	r3, r7, r0
 800922c:	4915      	ldr	r1, [pc, #84]	@ (8009284 <USB_EPClearStall+0x160>)
 800922e:	400a      	ands	r2, r1
 8009230:	801a      	strh	r2, [r3, #0]
 8009232:	183b      	adds	r3, r7, r0
 8009234:	183a      	adds	r2, r7, r0
 8009236:	8812      	ldrh	r2, [r2, #0]
 8009238:	2180      	movs	r1, #128	@ 0x80
 800923a:	0149      	lsls	r1, r1, #5
 800923c:	404a      	eors	r2, r1
 800923e:	801a      	strh	r2, [r3, #0]
 8009240:	183b      	adds	r3, r7, r0
 8009242:	183a      	adds	r2, r7, r0
 8009244:	8812      	ldrh	r2, [r2, #0]
 8009246:	2180      	movs	r1, #128	@ 0x80
 8009248:	0189      	lsls	r1, r1, #6
 800924a:	404a      	eors	r2, r1
 800924c:	801a      	strh	r2, [r3, #0]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	18d3      	adds	r3, r2, r3
 8009258:	183a      	adds	r2, r7, r0
 800925a:	8812      	ldrh	r2, [r2, #0]
 800925c:	4907      	ldr	r1, [pc, #28]	@ (800927c <USB_EPClearStall+0x158>)
 800925e:	430a      	orrs	r2, r1
 8009260:	b292      	uxth	r2, r2
 8009262:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	0018      	movs	r0, r3
 8009268:	46bd      	mov	sp, r7
 800926a:	b006      	add	sp, #24
 800926c:	bd80      	pop	{r7, pc}
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	ffff8f8f 	.word	0xffff8f8f
 8009274:	ffff80c0 	.word	0xffff80c0
 8009278:	ffff8fbf 	.word	0xffff8fbf
 800927c:	ffff8080 	.word	0xffff8080
 8009280:	ffffc080 	.word	0xffffc080
 8009284:	ffffbf8f 	.word	0xffffbf8f

08009288 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	000a      	movs	r2, r1
 8009292:	1cfb      	adds	r3, r7, #3
 8009294:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8009296:	1cfb      	adds	r3, r7, #3
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d103      	bne.n	80092a6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	224c      	movs	r2, #76	@ 0x4c
 80092a2:	2180      	movs	r1, #128	@ 0x80
 80092a4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	0018      	movs	r0, r3
 80092aa:	46bd      	mov	sp, r7
 80092ac:	b002      	add	sp, #8
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2258      	movs	r2, #88	@ 0x58
 80092bc:	5a9b      	ldrh	r3, [r3, r2]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	4a05      	ldr	r2, [pc, #20]	@ (80092d8 <USB_DevConnect+0x28>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	b299      	uxth	r1, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2258      	movs	r2, #88	@ 0x58
 80092ca:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	0018      	movs	r0, r3
 80092d0:	46bd      	mov	sp, r7
 80092d2:	b002      	add	sp, #8
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	46c0      	nop			@ (mov r8, r8)
 80092d8:	ffff8000 	.word	0xffff8000

080092dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2244      	movs	r2, #68	@ 0x44
 80092e8:	5a9b      	ldrh	r3, [r3, r2]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80092ee:	68fb      	ldr	r3, [r7, #12]
}
 80092f0:	0018      	movs	r0, r3
 80092f2:	46bd      	mov	sp, r7
 80092f4:	b004      	add	sp, #16
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08a      	sub	sp, #40	@ 0x28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	0019      	movs	r1, r3
 8009304:	1dbb      	adds	r3, r7, #6
 8009306:	801a      	strh	r2, [r3, #0]
 8009308:	1d3b      	adds	r3, r7, #4
 800930a:	1c0a      	adds	r2, r1, #0
 800930c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800930e:	1d3b      	adds	r3, r7, #4
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	3301      	adds	r3, #1
 8009314:	085b      	lsrs	r3, r3, #1
 8009316:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009320:	1dbb      	adds	r3, r7, #6
 8009322:	881a      	ldrh	r2, [r3, #0]
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	18d3      	adds	r3, r2, r3
 8009328:	2280      	movs	r2, #128	@ 0x80
 800932a:	00d2      	lsls	r2, r2, #3
 800932c:	4694      	mov	ip, r2
 800932e:	4463      	add	r3, ip
 8009330:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	627b      	str	r3, [r7, #36]	@ 0x24
 8009336:	e020      	b.n	800937a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	781a      	ldrb	r2, [r3, #0]
 800933c:	2112      	movs	r1, #18
 800933e:	187b      	adds	r3, r7, r1
 8009340:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	3301      	adds	r3, #1
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	021b      	lsls	r3, r3, #8
 800934a:	b21a      	sxth	r2, r3
 800934c:	187b      	adds	r3, r7, r1
 800934e:	2000      	movs	r0, #0
 8009350:	5e1b      	ldrsh	r3, [r3, r0]
 8009352:	4313      	orrs	r3, r2
 8009354:	b21a      	sxth	r2, r3
 8009356:	187b      	adds	r3, r7, r1
 8009358:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	187a      	adds	r2, r7, r1
 800935e:	8812      	ldrh	r2, [r2, #0]
 8009360:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	3302      	adds	r3, #2
 8009366:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	3301      	adds	r3, #1
 800936c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	3301      	adds	r3, #1
 8009372:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009376:	3b01      	subs	r3, #1
 8009378:	627b      	str	r3, [r7, #36]	@ 0x24
 800937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1db      	bne.n	8009338 <USB_WritePMA+0x40>
  }
}
 8009380:	46c0      	nop			@ (mov r8, r8)
 8009382:	46c0      	nop			@ (mov r8, r8)
 8009384:	46bd      	mov	sp, r7
 8009386:	b00a      	add	sp, #40	@ 0x28
 8009388:	bd80      	pop	{r7, pc}

0800938a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b08a      	sub	sp, #40	@ 0x28
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	0019      	movs	r1, r3
 8009396:	1dbb      	adds	r3, r7, #6
 8009398:	801a      	strh	r2, [r3, #0]
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	1c0a      	adds	r2, r1, #0
 800939e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80093a0:	1d3b      	adds	r3, r7, #4
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	085b      	lsrs	r3, r3, #1
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80093b2:	1dbb      	adds	r3, r7, #6
 80093b4:	881a      	ldrh	r2, [r3, #0]
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	18d3      	adds	r3, r2, r3
 80093ba:	2280      	movs	r2, #128	@ 0x80
 80093bc:	00d2      	lsls	r2, r2, #3
 80093be:	4694      	mov	ip, r2
 80093c0:	4463      	add	r3, ip
 80093c2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80093c8:	e018      	b.n	80093fc <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	3302      	adds	r3, #2
 80093d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	3301      	adds	r3, #1
 80093e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	0a1b      	lsrs	r3, r3, #8
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	3301      	adds	r3, #1
 80093f4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80093f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f8:	3b01      	subs	r3, #1
 80093fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e3      	bne.n	80093ca <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009402:	1d3b      	adds	r3, r7, #4
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	2201      	movs	r2, #1
 8009408:	4013      	ands	r3, r2
 800940a:	b29b      	uxth	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d007      	beq.n	8009420 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	b29b      	uxth	r3, r3
 8009416:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	b2da      	uxtb	r2, r3
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	701a      	strb	r2, [r3, #0]
  }
}
 8009420:	46c0      	nop			@ (mov r8, r8)
 8009422:	46bd      	mov	sp, r7
 8009424:	b00a      	add	sp, #40	@ 0x28
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	000a      	movs	r2, r1
 8009432:	1cfb      	adds	r3, r7, #3
 8009434:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009436:	230f      	movs	r3, #15
 8009438:	18fb      	adds	r3, r7, r3
 800943a:	2200      	movs	r2, #0
 800943c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	7c1b      	ldrb	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d116      	bne.n	8009474 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009446:	2380      	movs	r3, #128	@ 0x80
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	2202      	movs	r2, #2
 800944e:	2181      	movs	r1, #129	@ 0x81
 8009450:	f002 f88b 	bl	800b56a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800945a:	2380      	movs	r3, #128	@ 0x80
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	2202      	movs	r2, #2
 8009462:	2101      	movs	r1, #1
 8009464:	f002 f881 	bl	800b56a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	23b6      	movs	r3, #182	@ 0xb6
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	2101      	movs	r1, #1
 8009470:	50d1      	str	r1, [r2, r3]
 8009472:	e013      	b.n	800949c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	2340      	movs	r3, #64	@ 0x40
 8009478:	2202      	movs	r2, #2
 800947a:	2181      	movs	r1, #129	@ 0x81
 800947c:	f002 f875 	bl	800b56a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	2340      	movs	r3, #64	@ 0x40
 800948a:	2202      	movs	r2, #2
 800948c:	2101      	movs	r1, #1
 800948e:	f002 f86c 	bl	800b56a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	23b6      	movs	r3, #182	@ 0xb6
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	2101      	movs	r1, #1
 800949a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	2308      	movs	r3, #8
 80094a0:	2203      	movs	r2, #3
 80094a2:	2182      	movs	r1, #130	@ 0x82
 80094a4:	f002 f861 	bl	800b56a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094ae:	2387      	movs	r3, #135	@ 0x87
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	0018      	movs	r0, r3
 80094b4:	f002 f9f0 	bl	800b898 <USBD_static_malloc>
 80094b8:	0001      	movs	r1, r0
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	23ae      	movs	r3, #174	@ 0xae
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	23ae      	movs	r3, #174	@ 0xae
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	58d3      	ldr	r3, [r2, r3]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d104      	bne.n	80094d8 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80094ce:	230f      	movs	r3, #15
 80094d0:	18fb      	adds	r3, r7, r3
 80094d2:	2201      	movs	r2, #1
 80094d4:	701a      	strb	r2, [r3, #0]
 80094d6:	e02c      	b.n	8009532 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	23ae      	movs	r3, #174	@ 0xae
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	58d3      	ldr	r3, [r2, r3]
 80094e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	23af      	movs	r3, #175	@ 0xaf
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	58d3      	ldr	r3, [r2, r3]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	2385      	movs	r3, #133	@ 0x85
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	2100      	movs	r1, #0
 80094f6:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	2386      	movs	r3, #134	@ 0x86
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	2100      	movs	r1, #0
 8009500:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	7c1b      	ldrb	r3, [r3, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10a      	bne.n	8009520 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	2381      	movs	r3, #129	@ 0x81
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	58d2      	ldr	r2, [r2, r3]
 8009512:	2380      	movs	r3, #128	@ 0x80
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	2101      	movs	r1, #1
 800951a:	f002 f970 	bl	800b7fe <USBD_LL_PrepareReceive>
 800951e:	e008      	b.n	8009532 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	2381      	movs	r3, #129	@ 0x81
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	58d2      	ldr	r2, [r2, r3]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	2340      	movs	r3, #64	@ 0x40
 800952c:	2101      	movs	r1, #1
 800952e:	f002 f966 	bl	800b7fe <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009532:	230f      	movs	r3, #15
 8009534:	18fb      	adds	r3, r7, r3
 8009536:	781b      	ldrb	r3, [r3, #0]
}
 8009538:	0018      	movs	r0, r3
 800953a:	46bd      	mov	sp, r7
 800953c:	b004      	add	sp, #16
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	000a      	movs	r2, r1
 800954a:	1cfb      	adds	r3, r7, #3
 800954c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800954e:	230f      	movs	r3, #15
 8009550:	18fb      	adds	r3, r7, r3
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2181      	movs	r1, #129	@ 0x81
 800955a:	0018      	movs	r0, r3
 800955c:	f002 f83c 	bl	800b5d8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2101      	movs	r1, #1
 800956a:	0018      	movs	r0, r3
 800956c:	f002 f834 	bl	800b5d8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	23b6      	movs	r3, #182	@ 0xb6
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	2100      	movs	r1, #0
 8009578:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2182      	movs	r1, #130	@ 0x82
 800957e:	0018      	movs	r0, r3
 8009580:	f002 f82a 	bl	800b5d8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	23ae      	movs	r3, #174	@ 0xae
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	58d3      	ldr	r3, [r2, r3]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d011      	beq.n	80095ba <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	23af      	movs	r3, #175	@ 0xaf
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	58d3      	ldr	r3, [r2, r3]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	23ae      	movs	r3, #174	@ 0xae
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	58d3      	ldr	r3, [r2, r3]
 80095aa:	0018      	movs	r0, r3
 80095ac:	f002 f980 	bl	800b8b0 <USBD_static_free>
    pdev->pClassData = NULL;
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	23ae      	movs	r3, #174	@ 0xae
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	2100      	movs	r1, #0
 80095b8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80095ba:	230f      	movs	r3, #15
 80095bc:	18fb      	adds	r3, r7, r3
 80095be:	781b      	ldrb	r3, [r3, #0]
}
 80095c0:	0018      	movs	r0, r3
 80095c2:	46bd      	mov	sp, r7
 80095c4:	b004      	add	sp, #16
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	23ae      	movs	r3, #174	@ 0xae
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	58d3      	ldr	r3, [r2, r3]
 80095da:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80095dc:	230f      	movs	r3, #15
 80095de:	18fb      	adds	r3, r7, r3
 80095e0:	2200      	movs	r2, #0
 80095e2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80095e4:	230c      	movs	r3, #12
 80095e6:	18fb      	adds	r3, r7, r3
 80095e8:	2200      	movs	r2, #0
 80095ea:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80095ec:	2317      	movs	r3, #23
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	001a      	movs	r2, r3
 80095fa:	2360      	movs	r3, #96	@ 0x60
 80095fc:	4013      	ands	r3, r2
 80095fe:	d03d      	beq.n	800967c <USBD_CDC_Setup+0xb4>
 8009600:	2b20      	cmp	r3, #32
 8009602:	d000      	beq.n	8009606 <USBD_CDC_Setup+0x3e>
 8009604:	e094      	b.n	8009730 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	88db      	ldrh	r3, [r3, #6]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d02b      	beq.n	8009666 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	b25b      	sxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	da12      	bge.n	800963e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	23af      	movs	r3, #175	@ 0xaf
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	58d3      	ldr	r3, [r2, r3]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009626:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	88d2      	ldrh	r2, [r2, #6]
 800962c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800962e:	6939      	ldr	r1, [r7, #16]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	88da      	ldrh	r2, [r3, #6]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	0018      	movs	r0, r3
 8009638:	f001 fbaf 	bl	800ad9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800963c:	e083      	b.n	8009746 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	7859      	ldrb	r1, [r3, #1]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	2380      	movs	r3, #128	@ 0x80
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	88db      	ldrh	r3, [r3, #6]
 800964e:	b2d9      	uxtb	r1, r3
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	4a40      	ldr	r2, [pc, #256]	@ (8009754 <USBD_CDC_Setup+0x18c>)
 8009654:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009656:	6939      	ldr	r1, [r7, #16]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	88da      	ldrh	r2, [r3, #6]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	0018      	movs	r0, r3
 8009660:	f001 fbce 	bl	800ae00 <USBD_CtlPrepareRx>
      break;
 8009664:	e06f      	b.n	8009746 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	23af      	movs	r3, #175	@ 0xaf
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	58d3      	ldr	r3, [r2, r3]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	7850      	ldrb	r0, [r2, #1]
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	2200      	movs	r2, #0
 8009678:	4798      	blx	r3
      break;
 800967a:	e064      	b.n	8009746 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b0b      	cmp	r3, #11
 8009682:	d037      	beq.n	80096f4 <USBD_CDC_Setup+0x12c>
 8009684:	dc47      	bgt.n	8009716 <USBD_CDC_Setup+0x14e>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <USBD_CDC_Setup+0xc8>
 800968a:	2b0a      	cmp	r3, #10
 800968c:	d019      	beq.n	80096c2 <USBD_CDC_Setup+0xfa>
 800968e:	e042      	b.n	8009716 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	23a7      	movs	r3, #167	@ 0xa7
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	5cd3      	ldrb	r3, [r2, r3]
 8009698:	2b03      	cmp	r3, #3
 800969a:	d107      	bne.n	80096ac <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800969c:	230c      	movs	r3, #12
 800969e:	18f9      	adds	r1, r7, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2202      	movs	r2, #2
 80096a4:	0018      	movs	r0, r3
 80096a6:	f001 fb78 	bl	800ad9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096aa:	e040      	b.n	800972e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	0011      	movs	r1, r2
 80096b2:	0018      	movs	r0, r3
 80096b4:	f001 faf3 	bl	800ac9e <USBD_CtlError>
            ret = USBD_FAIL;
 80096b8:	2317      	movs	r3, #23
 80096ba:	18fb      	adds	r3, r7, r3
 80096bc:	2202      	movs	r2, #2
 80096be:	701a      	strb	r2, [r3, #0]
          break;
 80096c0:	e035      	b.n	800972e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	23a7      	movs	r3, #167	@ 0xa7
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	5cd3      	ldrb	r3, [r2, r3]
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d107      	bne.n	80096de <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80096ce:	230f      	movs	r3, #15
 80096d0:	18f9      	adds	r1, r7, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	0018      	movs	r0, r3
 80096d8:	f001 fb5f 	bl	800ad9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096dc:	e027      	b.n	800972e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	0011      	movs	r1, r2
 80096e4:	0018      	movs	r0, r3
 80096e6:	f001 fada 	bl	800ac9e <USBD_CtlError>
            ret = USBD_FAIL;
 80096ea:	2317      	movs	r3, #23
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	2202      	movs	r2, #2
 80096f0:	701a      	strb	r2, [r3, #0]
          break;
 80096f2:	e01c      	b.n	800972e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	23a7      	movs	r3, #167	@ 0xa7
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	5cd3      	ldrb	r3, [r2, r3]
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d015      	beq.n	800972c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	0011      	movs	r1, r2
 8009706:	0018      	movs	r0, r3
 8009708:	f001 fac9 	bl	800ac9e <USBD_CtlError>
            ret = USBD_FAIL;
 800970c:	2317      	movs	r3, #23
 800970e:	18fb      	adds	r3, r7, r3
 8009710:	2202      	movs	r2, #2
 8009712:	701a      	strb	r2, [r3, #0]
          }
          break;
 8009714:	e00a      	b.n	800972c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	0011      	movs	r1, r2
 800971c:	0018      	movs	r0, r3
 800971e:	f001 fabe 	bl	800ac9e <USBD_CtlError>
          ret = USBD_FAIL;
 8009722:	2317      	movs	r3, #23
 8009724:	18fb      	adds	r3, r7, r3
 8009726:	2202      	movs	r2, #2
 8009728:	701a      	strb	r2, [r3, #0]
          break;
 800972a:	e000      	b.n	800972e <USBD_CDC_Setup+0x166>
          break;
 800972c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800972e:	e00a      	b.n	8009746 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	0011      	movs	r1, r2
 8009736:	0018      	movs	r0, r3
 8009738:	f001 fab1 	bl	800ac9e <USBD_CtlError>
      ret = USBD_FAIL;
 800973c:	2317      	movs	r3, #23
 800973e:	18fb      	adds	r3, r7, r3
 8009740:	2202      	movs	r2, #2
 8009742:	701a      	strb	r2, [r3, #0]
      break;
 8009744:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009746:	2317      	movs	r3, #23
 8009748:	18fb      	adds	r3, r7, r3
 800974a:	781b      	ldrb	r3, [r3, #0]
}
 800974c:	0018      	movs	r0, r3
 800974e:	46bd      	mov	sp, r7
 8009750:	b006      	add	sp, #24
 8009752:	bd80      	pop	{r7, pc}
 8009754:	00000201 	.word	0x00000201

08009758 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	000a      	movs	r2, r1
 8009762:	1cfb      	adds	r3, r7, #3
 8009764:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	23ae      	movs	r3, #174	@ 0xae
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	58d3      	ldr	r3, [r2, r3]
 800976e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	23b0      	movs	r3, #176	@ 0xb0
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	58d3      	ldr	r3, [r2, r3]
 8009778:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	23ae      	movs	r3, #174	@ 0xae
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	58d3      	ldr	r3, [r2, r3]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d03e      	beq.n	8009804 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009786:	1cfb      	adds	r3, r7, #3
 8009788:	781a      	ldrb	r2, [r3, #0]
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	0013      	movs	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	189b      	adds	r3, r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	18cb      	adds	r3, r1, r3
 8009796:	331c      	adds	r3, #28
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d02b      	beq.n	80097f6 <USBD_CDC_DataIn+0x9e>
 800979e:	1cfb      	adds	r3, r7, #3
 80097a0:	781a      	ldrb	r2, [r3, #0]
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	0013      	movs	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	189b      	adds	r3, r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	18cb      	adds	r3, r1, r3
 80097ae:	331c      	adds	r3, #28
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	1cfb      	adds	r3, r7, #3
 80097b4:	781a      	ldrb	r2, [r3, #0]
 80097b6:	68b9      	ldr	r1, [r7, #8]
 80097b8:	0013      	movs	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	189b      	adds	r3, r3, r2
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	18cb      	adds	r3, r1, r3
 80097c2:	3320      	adds	r3, #32
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	0019      	movs	r1, r3
 80097c8:	f7f6 fd36 	bl	8000238 <__aeabi_uidivmod>
 80097cc:	1e0b      	subs	r3, r1, #0
 80097ce:	d112      	bne.n	80097f6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80097d0:	1cfb      	adds	r3, r7, #3
 80097d2:	781a      	ldrb	r2, [r3, #0]
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	0013      	movs	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	189b      	adds	r3, r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	18cb      	adds	r3, r1, r3
 80097e0:	331c      	adds	r3, #28
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80097e6:	1cfb      	adds	r3, r7, #3
 80097e8:	7819      	ldrb	r1, [r3, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	2300      	movs	r3, #0
 80097ee:	2200      	movs	r2, #0
 80097f0:	f001 ffce 	bl	800b790 <USBD_LL_Transmit>
 80097f4:	e004      	b.n	8009800 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	2385      	movs	r3, #133	@ 0x85
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	2100      	movs	r1, #0
 80097fe:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	e000      	b.n	8009806 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8009804:	2302      	movs	r3, #2
  }
}
 8009806:	0018      	movs	r0, r3
 8009808:	46bd      	mov	sp, r7
 800980a:	b004      	add	sp, #16
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	000a      	movs	r2, r1
 8009818:	1cfb      	adds	r3, r7, #3
 800981a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	23ae      	movs	r3, #174	@ 0xae
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	58d3      	ldr	r3, [r2, r3]
 8009824:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009826:	1cfb      	adds	r3, r7, #3
 8009828:	781a      	ldrb	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	0011      	movs	r1, r2
 800982e:	0018      	movs	r0, r3
 8009830:	f002 f81c 	bl	800b86c <USBD_LL_GetRxDataSize>
 8009834:	0001      	movs	r1, r0
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	2383      	movs	r3, #131	@ 0x83
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	23ae      	movs	r3, #174	@ 0xae
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	58d3      	ldr	r3, [r2, r3]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d011      	beq.n	800986e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	23af      	movs	r3, #175	@ 0xaf
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	58d3      	ldr	r3, [r2, r3]
 8009852:	68da      	ldr	r2, [r3, #12]
 8009854:	68f9      	ldr	r1, [r7, #12]
 8009856:	2381      	movs	r3, #129	@ 0x81
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	58c8      	ldr	r0, [r1, r3]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2183      	movs	r1, #131	@ 0x83
 8009860:	0089      	lsls	r1, r1, #2
 8009862:	468c      	mov	ip, r1
 8009864:	4463      	add	r3, ip
 8009866:	0019      	movs	r1, r3
 8009868:	4790      	blx	r2

    return USBD_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	e000      	b.n	8009870 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800986e:	2302      	movs	r3, #2
  }
}
 8009870:	0018      	movs	r0, r3
 8009872:	46bd      	mov	sp, r7
 8009874:	b004      	add	sp, #16
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009878:	b590      	push	{r4, r7, lr}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	23ae      	movs	r3, #174	@ 0xae
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	58d3      	ldr	r3, [r2, r3]
 8009888:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	23af      	movs	r3, #175	@ 0xaf
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	58d3      	ldr	r3, [r2, r3]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d018      	beq.n	80098c8 <USBD_CDC_EP0_RxReady+0x50>
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	2380      	movs	r3, #128	@ 0x80
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	5cd3      	ldrb	r3, [r2, r3]
 800989e:	2bff      	cmp	r3, #255	@ 0xff
 80098a0:	d012      	beq.n	80098c8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	23af      	movs	r3, #175	@ 0xaf
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	58d3      	ldr	r3, [r2, r3]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	68f9      	ldr	r1, [r7, #12]
 80098ae:	2280      	movs	r2, #128	@ 0x80
 80098b0:	0092      	lsls	r2, r2, #2
 80098b2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80098b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	4c06      	ldr	r4, [pc, #24]	@ (80098d4 <USBD_CDC_EP0_RxReady+0x5c>)
 80098ba:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80098bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	2380      	movs	r3, #128	@ 0x80
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	21ff      	movs	r1, #255	@ 0xff
 80098c6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	0018      	movs	r0, r3
 80098cc:	46bd      	mov	sp, r7
 80098ce:	b005      	add	sp, #20
 80098d0:	bd90      	pop	{r4, r7, pc}
 80098d2:	46c0      	nop			@ (mov r8, r8)
 80098d4:	00000201 	.word	0x00000201

080098d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2243      	movs	r2, #67	@ 0x43
 80098e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80098e6:	4b02      	ldr	r3, [pc, #8]	@ (80098f0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80098e8:	0018      	movs	r0, r3
 80098ea:	46bd      	mov	sp, r7
 80098ec:	b002      	add	sp, #8
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	200000ac 	.word	0x200000ac

080098f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2243      	movs	r2, #67	@ 0x43
 8009900:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009902:	4b02      	ldr	r3, [pc, #8]	@ (800990c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8009904:	0018      	movs	r0, r3
 8009906:	46bd      	mov	sp, r7
 8009908:	b002      	add	sp, #8
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20000068 	.word	0x20000068

08009910 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2243      	movs	r2, #67	@ 0x43
 800991c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800991e:	4b02      	ldr	r3, [pc, #8]	@ (8009928 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8009920:	0018      	movs	r0, r3
 8009922:	46bd      	mov	sp, r7
 8009924:	b002      	add	sp, #8
 8009926:	bd80      	pop	{r7, pc}
 8009928:	200000f0 	.word	0x200000f0

0800992c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	220a      	movs	r2, #10
 8009938:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800993a:	4b02      	ldr	r3, [pc, #8]	@ (8009944 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800993c:	0018      	movs	r0, r3
 800993e:	46bd      	mov	sp, r7
 8009940:	b002      	add	sp, #8
 8009942:	bd80      	pop	{r7, pc}
 8009944:	20000024 	.word	0x20000024

08009948 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009952:	200f      	movs	r0, #15
 8009954:	183b      	adds	r3, r7, r0
 8009956:	2202      	movs	r2, #2
 8009958:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d007      	beq.n	8009970 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	23af      	movs	r3, #175	@ 0xaf
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800996a:	183b      	adds	r3, r7, r0
 800996c:	2200      	movs	r2, #0
 800996e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009970:	230f      	movs	r3, #15
 8009972:	18fb      	adds	r3, r7, r3
 8009974:	781b      	ldrb	r3, [r3, #0]
}
 8009976:	0018      	movs	r0, r3
 8009978:	46bd      	mov	sp, r7
 800997a:	b004      	add	sp, #16
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b086      	sub	sp, #24
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	1dbb      	adds	r3, r7, #6
 800998a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	23ae      	movs	r3, #174	@ 0xae
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	58d3      	ldr	r3, [r2, r3]
 8009994:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	2382      	movs	r3, #130	@ 0x82
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	68b9      	ldr	r1, [r7, #8]
 800999e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80099a0:	1dbb      	adds	r3, r7, #6
 80099a2:	8819      	ldrh	r1, [r3, #0]
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	2384      	movs	r3, #132	@ 0x84
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	0018      	movs	r0, r3
 80099b0:	46bd      	mov	sp, r7
 80099b2:	b006      	add	sp, #24
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	23ae      	movs	r3, #174	@ 0xae
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	58d3      	ldr	r3, [r2, r3]
 80099c8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	2381      	movs	r3, #129	@ 0x81
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	0018      	movs	r0, r3
 80099d8:	46bd      	mov	sp, r7
 80099da:	b004      	add	sp, #16
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	23ae      	movs	r3, #174	@ 0xae
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	58d3      	ldr	r3, [r2, r3]
 80099ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	23ae      	movs	r3, #174	@ 0xae
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	58d3      	ldr	r3, [r2, r3]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d022      	beq.n	8009a42 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	2385      	movs	r3, #133	@ 0x85
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	58d3      	ldr	r3, [r2, r3]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d11a      	bne.n	8009a3e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	2385      	movs	r3, #133	@ 0x85
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	2101      	movs	r1, #1
 8009a10:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	2384      	movs	r3, #132	@ 0x84
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	58d2      	ldr	r2, [r2, r3]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	2382      	movs	r3, #130	@ 0x82
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	2384      	movs	r3, #132	@ 0x84
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	000a      	movs	r2, r1
 8009a34:	2181      	movs	r1, #129	@ 0x81
 8009a36:	f001 feab 	bl	800b790 <USBD_LL_Transmit>

      return USBD_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e002      	b.n	8009a44 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e000      	b.n	8009a44 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8009a42:	2302      	movs	r3, #2
  }
}
 8009a44:	0018      	movs	r0, r3
 8009a46:	46bd      	mov	sp, r7
 8009a48:	b004      	add	sp, #16
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	23ae      	movs	r3, #174	@ 0xae
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	58d3      	ldr	r3, [r2, r3]
 8009a5c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	23ae      	movs	r3, #174	@ 0xae
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	58d3      	ldr	r3, [r2, r3]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d019      	beq.n	8009a9e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	7c1b      	ldrb	r3, [r3, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	2381      	movs	r3, #129	@ 0x81
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	58d2      	ldr	r2, [r2, r3]
 8009a7a:	2380      	movs	r3, #128	@ 0x80
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	2101      	movs	r1, #1
 8009a82:	f001 febc 	bl	800b7fe <USBD_LL_PrepareReceive>
 8009a86:	e008      	b.n	8009a9a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	2381      	movs	r3, #129	@ 0x81
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	58d2      	ldr	r2, [r2, r3]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	2340      	movs	r3, #64	@ 0x40
 8009a94:	2101      	movs	r1, #1
 8009a96:	f001 feb2 	bl	800b7fe <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e000      	b.n	8009aa0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8009a9e:	2302      	movs	r3, #2
  }
}
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	b004      	add	sp, #16
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	1dfb      	adds	r3, r7, #7
 8009ab4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009abc:	2302      	movs	r3, #2
 8009abe:	e020      	b.n	8009b02 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	23ad      	movs	r3, #173	@ 0xad
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	58d3      	ldr	r3, [r2, r3]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d004      	beq.n	8009ad6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	23ad      	movs	r3, #173	@ 0xad
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	23ac      	movs	r3, #172	@ 0xac
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	68b9      	ldr	r1, [r7, #8]
 8009ae4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	23a7      	movs	r3, #167	@ 0xa7
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	2101      	movs	r1, #1
 8009aee:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	1dfa      	adds	r2, r7, #7
 8009af4:	7812      	ldrb	r2, [r2, #0]
 8009af6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	0018      	movs	r0, r3
 8009afc:	f001 fcac 	bl	800b458 <USBD_LL_Init>

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	0018      	movs	r0, r3
 8009b04:	46bd      	mov	sp, r7
 8009b06:	b004      	add	sp, #16
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009b14:	200f      	movs	r0, #15
 8009b16:	183b      	adds	r3, r7, r0
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d008      	beq.n	8009b34 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	23ad      	movs	r3, #173	@ 0xad
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009b2c:	183b      	adds	r3, r7, r0
 8009b2e:	2200      	movs	r2, #0
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	e003      	b.n	8009b3c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009b34:	230f      	movs	r3, #15
 8009b36:	18fb      	adds	r3, r7, r3
 8009b38:	2202      	movs	r2, #2
 8009b3a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009b3c:	230f      	movs	r3, #15
 8009b3e:	18fb      	adds	r3, r7, r3
 8009b40:	781b      	ldrb	r3, [r3, #0]
}
 8009b42:	0018      	movs	r0, r3
 8009b44:	46bd      	mov	sp, r7
 8009b46:	b004      	add	sp, #16
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	0018      	movs	r0, r3
 8009b56:	f001 fce3 	bl	800b520 <USBD_LL_Start>

  return USBD_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	b002      	add	sp, #8
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	0018      	movs	r0, r3
 8009b70:	46bd      	mov	sp, r7
 8009b72:	b002      	add	sp, #8
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009b76:	b590      	push	{r4, r7, lr}
 8009b78:	b085      	sub	sp, #20
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	000a      	movs	r2, r1
 8009b80:	1cfb      	adds	r3, r7, #3
 8009b82:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009b84:	240f      	movs	r4, #15
 8009b86:	193b      	adds	r3, r7, r4
 8009b88:	2202      	movs	r2, #2
 8009b8a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	23ad      	movs	r3, #173	@ 0xad
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	58d3      	ldr	r3, [r2, r3]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00e      	beq.n	8009bb6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	23ad      	movs	r3, #173	@ 0xad
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	58d3      	ldr	r3, [r2, r3]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	1cfa      	adds	r2, r7, #3
 8009ba4:	7811      	ldrb	r1, [r2, #0]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	0010      	movs	r0, r2
 8009baa:	4798      	blx	r3
 8009bac:	1e03      	subs	r3, r0, #0
 8009bae:	d102      	bne.n	8009bb6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8009bb0:	193b      	adds	r3, r7, r4
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8009bb6:	230f      	movs	r3, #15
 8009bb8:	18fb      	adds	r3, r7, r3
 8009bba:	781b      	ldrb	r3, [r3, #0]
}
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	b005      	add	sp, #20
 8009bc2:	bd90      	pop	{r4, r7, pc}

08009bc4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	000a      	movs	r2, r1
 8009bce:	1cfb      	adds	r3, r7, #3
 8009bd0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	23ad      	movs	r3, #173	@ 0xad
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	58d3      	ldr	r3, [r2, r3]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	1cfa      	adds	r2, r7, #3
 8009bde:	7811      	ldrb	r1, [r2, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	0010      	movs	r0, r2
 8009be4:	4798      	blx	r3

  return USBD_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	0018      	movs	r0, r3
 8009bea:	46bd      	mov	sp, r7
 8009bec:	b002      	add	sp, #8
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	22aa      	movs	r2, #170	@ 0xaa
 8009bfe:	0092      	lsls	r2, r2, #2
 8009c00:	4694      	mov	ip, r2
 8009c02:	4463      	add	r3, ip
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	0011      	movs	r1, r2
 8009c08:	0018      	movs	r0, r3
 8009c0a:	f001 f810 	bl	800ac2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	23a5      	movs	r3, #165	@ 0xa5
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	2101      	movs	r1, #1
 8009c16:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a23      	ldr	r2, [pc, #140]	@ (8009ca8 <USBD_LL_SetupStage+0xb8>)
 8009c1c:	5a9b      	ldrh	r3, [r3, r2]
 8009c1e:	0019      	movs	r1, r3
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	23a6      	movs	r3, #166	@ 0xa6
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	23aa      	movs	r3, #170	@ 0xaa
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	5cd3      	ldrb	r3, [r2, r3]
 8009c30:	001a      	movs	r2, r3
 8009c32:	231f      	movs	r3, #31
 8009c34:	4013      	ands	r3, r2
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d019      	beq.n	8009c6e <USBD_LL_SetupStage+0x7e>
 8009c3a:	d822      	bhi.n	8009c82 <USBD_LL_SetupStage+0x92>
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d002      	beq.n	8009c46 <USBD_LL_SetupStage+0x56>
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d00a      	beq.n	8009c5a <USBD_LL_SetupStage+0x6a>
 8009c44:	e01d      	b.n	8009c82 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	22aa      	movs	r2, #170	@ 0xaa
 8009c4a:	0092      	lsls	r2, r2, #2
 8009c4c:	189a      	adds	r2, r3, r2
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	0011      	movs	r1, r2
 8009c52:	0018      	movs	r0, r3
 8009c54:	f000 fa10 	bl	800a078 <USBD_StdDevReq>
      break;
 8009c58:	e020      	b.n	8009c9c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	22aa      	movs	r2, #170	@ 0xaa
 8009c5e:	0092      	lsls	r2, r2, #2
 8009c60:	189a      	adds	r2, r3, r2
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	0011      	movs	r1, r2
 8009c66:	0018      	movs	r0, r3
 8009c68:	f000 fa78 	bl	800a15c <USBD_StdItfReq>
      break;
 8009c6c:	e016      	b.n	8009c9c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	22aa      	movs	r2, #170	@ 0xaa
 8009c72:	0092      	lsls	r2, r2, #2
 8009c74:	189a      	adds	r2, r3, r2
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	0011      	movs	r1, r2
 8009c7a:	0018      	movs	r0, r3
 8009c7c:	f000 fac5 	bl	800a20a <USBD_StdEPReq>
      break;
 8009c80:	e00c      	b.n	8009c9c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	23aa      	movs	r3, #170	@ 0xaa
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	5cd3      	ldrb	r3, [r2, r3]
 8009c8a:	227f      	movs	r2, #127	@ 0x7f
 8009c8c:	4393      	bics	r3, r2
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	0011      	movs	r1, r2
 8009c94:	0018      	movs	r0, r3
 8009c96:	f001 fcca 	bl	800b62e <USBD_LL_StallEP>
      break;
 8009c9a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	b002      	add	sp, #8
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	46c0      	nop			@ (mov r8, r8)
 8009ca8:	000002ae 	.word	0x000002ae

08009cac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	607a      	str	r2, [r7, #4]
 8009cb6:	200b      	movs	r0, #11
 8009cb8:	183b      	adds	r3, r7, r0
 8009cba:	1c0a      	adds	r2, r1, #0
 8009cbc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009cbe:	183b      	adds	r3, r7, r0
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d154      	bne.n	8009d70 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3355      	adds	r3, #85	@ 0x55
 8009cca:	33ff      	adds	r3, #255	@ 0xff
 8009ccc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	23a5      	movs	r3, #165	@ 0xa5
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	58d3      	ldr	r3, [r2, r3]
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d139      	bne.n	8009d4e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d919      	bls.n	8009d1a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	68da      	ldr	r2, [r3, #12]
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	1ad2      	subs	r2, r2, r3
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	68da      	ldr	r2, [r3, #12]
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d203      	bcs.n	8009d08 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	e002      	b.n	8009d0e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	001a      	movs	r2, r3
 8009d14:	f001 f898 	bl	800ae48 <USBD_CtlContinueRx>
 8009d18:	e045      	b.n	8009da6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	23ad      	movs	r3, #173	@ 0xad
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	58d3      	ldr	r3, [r2, r3]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00d      	beq.n	8009d44 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	23a7      	movs	r3, #167	@ 0xa7
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d107      	bne.n	8009d44 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	23ad      	movs	r3, #173	@ 0xad
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	58d3      	ldr	r3, [r2, r3]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	0010      	movs	r0, r2
 8009d42:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	0018      	movs	r0, r3
 8009d48:	f001 f891 	bl	800ae6e <USBD_CtlSendStatus>
 8009d4c:	e02b      	b.n	8009da6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	23a5      	movs	r3, #165	@ 0xa5
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	58d3      	ldr	r3, [r2, r3]
 8009d56:	2b05      	cmp	r3, #5
 8009d58:	d125      	bne.n	8009da6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	23a5      	movs	r3, #165	@ 0xa5
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	2100      	movs	r1, #0
 8009d62:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2100      	movs	r1, #0
 8009d68:	0018      	movs	r0, r3
 8009d6a:	f001 fc60 	bl	800b62e <USBD_LL_StallEP>
 8009d6e:	e01a      	b.n	8009da6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	23ad      	movs	r3, #173	@ 0xad
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	58d3      	ldr	r3, [r2, r3]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d011      	beq.n	8009da2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	23a7      	movs	r3, #167	@ 0xa7
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d10b      	bne.n	8009da2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	23ad      	movs	r3, #173	@ 0xad
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	58d3      	ldr	r3, [r2, r3]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	220b      	movs	r2, #11
 8009d96:	18ba      	adds	r2, r7, r2
 8009d98:	7811      	ldrb	r1, [r2, #0]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	0010      	movs	r0, r2
 8009d9e:	4798      	blx	r3
 8009da0:	e001      	b.n	8009da6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009da2:	2302      	movs	r3, #2
 8009da4:	e000      	b.n	8009da8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	0018      	movs	r0, r3
 8009daa:	46bd      	mov	sp, r7
 8009dac:	b006      	add	sp, #24
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	607a      	str	r2, [r7, #4]
 8009dba:	200b      	movs	r0, #11
 8009dbc:	183b      	adds	r3, r7, r0
 8009dbe:	1c0a      	adds	r2, r1, #0
 8009dc0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009dc2:	183b      	adds	r3, r7, r0
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d000      	beq.n	8009dcc <USBD_LL_DataInStage+0x1c>
 8009dca:	e08e      	b.n	8009eea <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	3314      	adds	r3, #20
 8009dd0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	23a5      	movs	r3, #165	@ 0xa5
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	58d3      	ldr	r3, [r2, r3]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d164      	bne.n	8009ea8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	68da      	ldr	r2, [r3, #12]
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d915      	bls.n	8009e16 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	68da      	ldr	r2, [r3, #12]
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	1ad2      	subs	r2, r2, r3
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	6879      	ldr	r1, [r7, #4]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	0018      	movs	r0, r3
 8009e04:	f000 ffe9 	bl	800adda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2100      	movs	r1, #0
 8009e10:	f001 fcf5 	bl	800b7fe <USBD_LL_PrepareReceive>
 8009e14:	e059      	b.n	8009eca <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	689a      	ldr	r2, [r3, #8]
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	0019      	movs	r1, r3
 8009e20:	0010      	movs	r0, r2
 8009e22:	f7f6 fa09 	bl	8000238 <__aeabi_uidivmod>
 8009e26:	1e0b      	subs	r3, r1, #0
 8009e28:	d11f      	bne.n	8009e6a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	689a      	ldr	r2, [r3, #8]
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d319      	bcc.n	8009e6a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	689a      	ldr	r2, [r3, #8]
 8009e3a:	68f9      	ldr	r1, [r7, #12]
 8009e3c:	23a6      	movs	r3, #166	@ 0xa6
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d211      	bcs.n	8009e6a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	0018      	movs	r0, r3
 8009e4e:	f000 ffc4 	bl	800adda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	23a6      	movs	r3, #166	@ 0xa6
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	2100      	movs	r1, #0
 8009e5a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	2300      	movs	r3, #0
 8009e60:	2200      	movs	r2, #0
 8009e62:	2100      	movs	r1, #0
 8009e64:	f001 fccb 	bl	800b7fe <USBD_LL_PrepareReceive>
 8009e68:	e02f      	b.n	8009eca <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	23ad      	movs	r3, #173	@ 0xad
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	58d3      	ldr	r3, [r2, r3]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00d      	beq.n	8009e94 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	23a7      	movs	r3, #167	@ 0xa7
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e80:	2b03      	cmp	r3, #3
 8009e82:	d107      	bne.n	8009e94 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	23ad      	movs	r3, #173	@ 0xad
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	58d3      	ldr	r3, [r2, r3]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	0010      	movs	r0, r2
 8009e92:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2180      	movs	r1, #128	@ 0x80
 8009e98:	0018      	movs	r0, r3
 8009e9a:	f001 fbc8 	bl	800b62e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	f000 fff8 	bl	800ae96 <USBD_CtlReceiveStatus>
 8009ea6:	e010      	b.n	8009eca <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	23a5      	movs	r3, #165	@ 0xa5
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	58d3      	ldr	r3, [r2, r3]
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	d005      	beq.n	8009ec0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	23a5      	movs	r3, #165	@ 0xa5
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d104      	bne.n	8009eca <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2180      	movs	r1, #128	@ 0x80
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f001 fbb2 	bl	800b62e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	23a8      	movs	r3, #168	@ 0xa8
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	5cd3      	ldrb	r3, [r2, r3]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d124      	bne.n	8009f20 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	0018      	movs	r0, r3
 8009eda:	f7ff fe43 	bl	8009b64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	23a8      	movs	r3, #168	@ 0xa8
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	54d1      	strb	r1, [r2, r3]
 8009ee8:	e01a      	b.n	8009f20 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	23ad      	movs	r3, #173	@ 0xad
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	58d3      	ldr	r3, [r2, r3]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d011      	beq.n	8009f1c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	23a7      	movs	r3, #167	@ 0xa7
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f00:	2b03      	cmp	r3, #3
 8009f02:	d10b      	bne.n	8009f1c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	23ad      	movs	r3, #173	@ 0xad
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	58d3      	ldr	r3, [r2, r3]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	220b      	movs	r2, #11
 8009f10:	18ba      	adds	r2, r7, r2
 8009f12:	7811      	ldrb	r1, [r2, #0]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	0010      	movs	r0, r2
 8009f18:	4798      	blx	r3
 8009f1a:	e001      	b.n	8009f20 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e000      	b.n	8009f22 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	0018      	movs	r0, r3
 8009f24:	46bd      	mov	sp, r7
 8009f26:	b006      	add	sp, #24
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b082      	sub	sp, #8
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	2340      	movs	r3, #64	@ 0x40
 8009f36:	2200      	movs	r2, #0
 8009f38:	2100      	movs	r1, #0
 8009f3a:	f001 fb16 	bl	800b56a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	23ac      	movs	r3, #172	@ 0xac
 8009f42:	005b      	lsls	r3, r3, #1
 8009f44:	2101      	movs	r1, #1
 8009f46:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	23b2      	movs	r3, #178	@ 0xb2
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	2140      	movs	r1, #64	@ 0x40
 8009f50:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	2340      	movs	r3, #64	@ 0x40
 8009f56:	2200      	movs	r2, #0
 8009f58:	2180      	movs	r1, #128	@ 0x80
 8009f5a:	f001 fb06 	bl	800b56a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2240      	movs	r2, #64	@ 0x40
 8009f68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	23a7      	movs	r3, #167	@ 0xa7
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	2101      	movs	r1, #1
 8009f72:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	23a5      	movs	r3, #165	@ 0xa5
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	23a9      	movs	r3, #169	@ 0xa9
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	23ae      	movs	r3, #174	@ 0xae
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	58d3      	ldr	r3, [r2, r3]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	23ad      	movs	r3, #173	@ 0xad
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	58d3      	ldr	r3, [r2, r3]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	b2d9      	uxtb	r1, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	0018      	movs	r0, r3
 8009fae:	4790      	blx	r2
  }

  return USBD_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	b002      	add	sp, #8
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	000a      	movs	r2, r1
 8009fc4:	1cfb      	adds	r3, r7, #3
 8009fc6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	1cfa      	adds	r2, r7, #3
 8009fcc:	7812      	ldrb	r2, [r2, #0]
 8009fce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	b002      	add	sp, #8
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	23a7      	movs	r3, #167	@ 0xa7
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	5cd1      	ldrb	r1, [r2, r3]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a06      	ldr	r2, [pc, #24]	@ (800a008 <USBD_LL_Suspend+0x2c>)
 8009ff0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	23a7      	movs	r3, #167	@ 0xa7
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	2104      	movs	r1, #4
 8009ffa:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	0018      	movs	r0, r3
 800a000:	46bd      	mov	sp, r7
 800a002:	b002      	add	sp, #8
 800a004:	bd80      	pop	{r7, pc}
 800a006:	46c0      	nop			@ (mov r8, r8)
 800a008:	0000029d 	.word	0x0000029d

0800a00c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	23a7      	movs	r3, #167	@ 0xa7
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	5cd3      	ldrb	r3, [r2, r3]
 800a01c:	2b04      	cmp	r3, #4
 800a01e:	d106      	bne.n	800a02e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a05      	ldr	r2, [pc, #20]	@ (800a038 <USBD_LL_Resume+0x2c>)
 800a024:	5c99      	ldrb	r1, [r3, r2]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	23a7      	movs	r3, #167	@ 0xa7
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	0018      	movs	r0, r3
 800a032:	46bd      	mov	sp, r7
 800a034:	b002      	add	sp, #8
 800a036:	bd80      	pop	{r7, pc}
 800a038:	0000029d 	.word	0x0000029d

0800a03c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	23a7      	movs	r3, #167	@ 0xa7
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	5cd3      	ldrb	r3, [r2, r3]
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d10e      	bne.n	800a06e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	23ad      	movs	r3, #173	@ 0xad
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	58d3      	ldr	r3, [r2, r3]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d007      	beq.n	800a06e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	23ad      	movs	r3, #173	@ 0xad
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	58d3      	ldr	r3, [r2, r3]
 800a066:	69db      	ldr	r3, [r3, #28]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	0010      	movs	r0, r2
 800a06c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	0018      	movs	r0, r3
 800a072:	46bd      	mov	sp, r7
 800a074:	b002      	add	sp, #8
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a082:	230f      	movs	r3, #15
 800a084:	18fb      	adds	r3, r7, r3
 800a086:	2200      	movs	r2, #0
 800a088:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	001a      	movs	r2, r3
 800a090:	2360      	movs	r3, #96	@ 0x60
 800a092:	4013      	ands	r3, r2
 800a094:	2b40      	cmp	r3, #64	@ 0x40
 800a096:	d004      	beq.n	800a0a2 <USBD_StdDevReq+0x2a>
 800a098:	d84f      	bhi.n	800a13a <USBD_StdDevReq+0xc2>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <USBD_StdDevReq+0x3e>
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	d14b      	bne.n	800a13a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	23ad      	movs	r3, #173	@ 0xad
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	58d3      	ldr	r3, [r2, r3]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	0010      	movs	r0, r2
 800a0b2:	4798      	blx	r3
      break;
 800a0b4:	e048      	b.n	800a148 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	785b      	ldrb	r3, [r3, #1]
 800a0ba:	2b09      	cmp	r3, #9
 800a0bc:	d835      	bhi.n	800a12a <USBD_StdDevReq+0xb2>
 800a0be:	009a      	lsls	r2, r3, #2
 800a0c0:	4b25      	ldr	r3, [pc, #148]	@ (800a158 <USBD_StdDevReq+0xe0>)
 800a0c2:	18d3      	adds	r3, r2, r3
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	0011      	movs	r1, r2
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	f000 fa52 	bl	800a578 <USBD_GetDescriptor>
          break;
 800a0d4:	e030      	b.n	800a138 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	0011      	movs	r1, r2
 800a0dc:	0018      	movs	r0, r3
 800a0de:	f000 fbfd 	bl	800a8dc <USBD_SetAddress>
          break;
 800a0e2:	e029      	b.n	800a138 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	0011      	movs	r1, r2
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	f000 fc4a 	bl	800a984 <USBD_SetConfig>
          break;
 800a0f0:	e022      	b.n	800a138 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	0011      	movs	r1, r2
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	f000 fce7 	bl	800aacc <USBD_GetConfig>
          break;
 800a0fe:	e01b      	b.n	800a138 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	0011      	movs	r1, r2
 800a106:	0018      	movs	r0, r3
 800a108:	f000 fd1b 	bl	800ab42 <USBD_GetStatus>
          break;
 800a10c:	e014      	b.n	800a138 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	0011      	movs	r1, r2
 800a114:	0018      	movs	r0, r3
 800a116:	f000 fd4e 	bl	800abb6 <USBD_SetFeature>
          break;
 800a11a:	e00d      	b.n	800a138 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	0011      	movs	r1, r2
 800a122:	0018      	movs	r0, r3
 800a124:	f000 fd5d 	bl	800abe2 <USBD_ClrFeature>
          break;
 800a128:	e006      	b.n	800a138 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	0011      	movs	r1, r2
 800a130:	0018      	movs	r0, r3
 800a132:	f000 fdb4 	bl	800ac9e <USBD_CtlError>
          break;
 800a136:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a138:	e006      	b.n	800a148 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	0011      	movs	r1, r2
 800a140:	0018      	movs	r0, r3
 800a142:	f000 fdac 	bl	800ac9e <USBD_CtlError>
      break;
 800a146:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800a148:	230f      	movs	r3, #15
 800a14a:	18fb      	adds	r3, r7, r3
 800a14c:	781b      	ldrb	r3, [r3, #0]
}
 800a14e:	0018      	movs	r0, r3
 800a150:	46bd      	mov	sp, r7
 800a152:	b004      	add	sp, #16
 800a154:	bd80      	pop	{r7, pc}
 800a156:	46c0      	nop			@ (mov r8, r8)
 800a158:	0800c5e4 	.word	0x0800c5e4

0800a15c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a15c:	b5b0      	push	{r4, r5, r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a166:	230f      	movs	r3, #15
 800a168:	18fb      	adds	r3, r7, r3
 800a16a:	2200      	movs	r2, #0
 800a16c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	001a      	movs	r2, r3
 800a174:	2360      	movs	r3, #96	@ 0x60
 800a176:	4013      	ands	r3, r2
 800a178:	2b40      	cmp	r3, #64	@ 0x40
 800a17a:	d004      	beq.n	800a186 <USBD_StdItfReq+0x2a>
 800a17c:	d839      	bhi.n	800a1f2 <USBD_StdItfReq+0x96>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <USBD_StdItfReq+0x2a>
 800a182:	2b20      	cmp	r3, #32
 800a184:	d135      	bne.n	800a1f2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	23a7      	movs	r3, #167	@ 0xa7
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	5cd3      	ldrb	r3, [r2, r3]
 800a18e:	3b01      	subs	r3, #1
 800a190:	2b02      	cmp	r3, #2
 800a192:	d825      	bhi.n	800a1e0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	889b      	ldrh	r3, [r3, #4]
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d819      	bhi.n	800a1d2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	23ad      	movs	r3, #173	@ 0xad
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	58d3      	ldr	r3, [r2, r3]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	250f      	movs	r5, #15
 800a1aa:	197c      	adds	r4, r7, r5
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	0010      	movs	r0, r2
 800a1b2:	4798      	blx	r3
 800a1b4:	0003      	movs	r3, r0
 800a1b6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	88db      	ldrh	r3, [r3, #6]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d116      	bne.n	800a1ee <USBD_StdItfReq+0x92>
 800a1c0:	197b      	adds	r3, r7, r5
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d112      	bne.n	800a1ee <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f000 fe4f 	bl	800ae6e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1d0:	e00d      	b.n	800a1ee <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	0011      	movs	r1, r2
 800a1d8:	0018      	movs	r0, r3
 800a1da:	f000 fd60 	bl	800ac9e <USBD_CtlError>
          break;
 800a1de:	e006      	b.n	800a1ee <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800a1e0:	683a      	ldr	r2, [r7, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	0011      	movs	r1, r2
 800a1e6:	0018      	movs	r0, r3
 800a1e8:	f000 fd59 	bl	800ac9e <USBD_CtlError>
          break;
 800a1ec:	e000      	b.n	800a1f0 <USBD_StdItfReq+0x94>
          break;
 800a1ee:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a1f0:	e006      	b.n	800a200 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	0011      	movs	r1, r2
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f000 fd50 	bl	800ac9e <USBD_CtlError>
      break;
 800a1fe:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	0018      	movs	r0, r3
 800a204:	46bd      	mov	sp, r7
 800a206:	b004      	add	sp, #16
 800a208:	bdb0      	pop	{r4, r5, r7, pc}

0800a20a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a20a:	b5b0      	push	{r4, r5, r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a214:	230f      	movs	r3, #15
 800a216:	18fb      	adds	r3, r7, r3
 800a218:	2200      	movs	r2, #0
 800a21a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	889a      	ldrh	r2, [r3, #4]
 800a220:	230e      	movs	r3, #14
 800a222:	18fb      	adds	r3, r7, r3
 800a224:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	001a      	movs	r2, r3
 800a22c:	2360      	movs	r3, #96	@ 0x60
 800a22e:	4013      	ands	r3, r2
 800a230:	2b40      	cmp	r3, #64	@ 0x40
 800a232:	d006      	beq.n	800a242 <USBD_StdEPReq+0x38>
 800a234:	d900      	bls.n	800a238 <USBD_StdEPReq+0x2e>
 800a236:	e190      	b.n	800a55a <USBD_StdEPReq+0x350>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00c      	beq.n	800a256 <USBD_StdEPReq+0x4c>
 800a23c:	2b20      	cmp	r3, #32
 800a23e:	d000      	beq.n	800a242 <USBD_StdEPReq+0x38>
 800a240:	e18b      	b.n	800a55a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	23ad      	movs	r3, #173	@ 0xad
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	58d3      	ldr	r3, [r2, r3]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	0010      	movs	r0, r2
 800a252:	4798      	blx	r3
      break;
 800a254:	e188      	b.n	800a568 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	001a      	movs	r2, r3
 800a25c:	2360      	movs	r3, #96	@ 0x60
 800a25e:	4013      	ands	r3, r2
 800a260:	2b20      	cmp	r3, #32
 800a262:	d10f      	bne.n	800a284 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	23ad      	movs	r3, #173	@ 0xad
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	58d3      	ldr	r3, [r2, r3]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	250f      	movs	r5, #15
 800a270:	197c      	adds	r4, r7, r5
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	0010      	movs	r0, r2
 800a278:	4798      	blx	r3
 800a27a:	0003      	movs	r3, r0
 800a27c:	7023      	strb	r3, [r4, #0]

        return ret;
 800a27e:	197b      	adds	r3, r7, r5
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	e174      	b.n	800a56e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	785b      	ldrb	r3, [r3, #1]
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d007      	beq.n	800a29c <USBD_StdEPReq+0x92>
 800a28c:	dd00      	ble.n	800a290 <USBD_StdEPReq+0x86>
 800a28e:	e15c      	b.n	800a54a <USBD_StdEPReq+0x340>
 800a290:	2b00      	cmp	r3, #0
 800a292:	d100      	bne.n	800a296 <USBD_StdEPReq+0x8c>
 800a294:	e092      	b.n	800a3bc <USBD_StdEPReq+0x1b2>
 800a296:	2b01      	cmp	r3, #1
 800a298:	d04b      	beq.n	800a332 <USBD_StdEPReq+0x128>
 800a29a:	e156      	b.n	800a54a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	23a7      	movs	r3, #167	@ 0xa7
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	5cd3      	ldrb	r3, [r2, r3]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d002      	beq.n	800a2ae <USBD_StdEPReq+0xa4>
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d01d      	beq.n	800a2e8 <USBD_StdEPReq+0xde>
 800a2ac:	e039      	b.n	800a322 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2ae:	220e      	movs	r2, #14
 800a2b0:	18bb      	adds	r3, r7, r2
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d010      	beq.n	800a2da <USBD_StdEPReq+0xd0>
 800a2b8:	18bb      	adds	r3, r7, r2
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b80      	cmp	r3, #128	@ 0x80
 800a2be:	d00c      	beq.n	800a2da <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a2c0:	18bb      	adds	r3, r7, r2
 800a2c2:	781a      	ldrb	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	0011      	movs	r1, r2
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	f001 f9b0 	bl	800b62e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2180      	movs	r1, #128	@ 0x80
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	f001 f9ab 	bl	800b62e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2d8:	e02a      	b.n	800a330 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	0011      	movs	r1, r2
 800a2e0:	0018      	movs	r0, r3
 800a2e2:	f000 fcdc 	bl	800ac9e <USBD_CtlError>
              break;
 800a2e6:	e023      	b.n	800a330 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	885b      	ldrh	r3, [r3, #2]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d113      	bne.n	800a318 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800a2f0:	220e      	movs	r2, #14
 800a2f2:	18bb      	adds	r3, r7, r2
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00e      	beq.n	800a318 <USBD_StdEPReq+0x10e>
 800a2fa:	18bb      	adds	r3, r7, r2
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2b80      	cmp	r3, #128	@ 0x80
 800a300:	d00a      	beq.n	800a318 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	88db      	ldrh	r3, [r3, #6]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d106      	bne.n	800a318 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a30a:	18bb      	adds	r3, r7, r2
 800a30c:	781a      	ldrb	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	0011      	movs	r1, r2
 800a312:	0018      	movs	r0, r3
 800a314:	f001 f98b 	bl	800b62e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	0018      	movs	r0, r3
 800a31c:	f000 fda7 	bl	800ae6e <USBD_CtlSendStatus>

              break;
 800a320:	e006      	b.n	800a330 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	0011      	movs	r1, r2
 800a328:	0018      	movs	r0, r3
 800a32a:	f000 fcb8 	bl	800ac9e <USBD_CtlError>
              break;
 800a32e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a330:	e112      	b.n	800a558 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	23a7      	movs	r3, #167	@ 0xa7
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	5cd3      	ldrb	r3, [r2, r3]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d002      	beq.n	800a344 <USBD_StdEPReq+0x13a>
 800a33e:	2b03      	cmp	r3, #3
 800a340:	d01d      	beq.n	800a37e <USBD_StdEPReq+0x174>
 800a342:	e032      	b.n	800a3aa <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a344:	220e      	movs	r2, #14
 800a346:	18bb      	adds	r3, r7, r2
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d010      	beq.n	800a370 <USBD_StdEPReq+0x166>
 800a34e:	18bb      	adds	r3, r7, r2
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b80      	cmp	r3, #128	@ 0x80
 800a354:	d00c      	beq.n	800a370 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a356:	18bb      	adds	r3, r7, r2
 800a358:	781a      	ldrb	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	0011      	movs	r1, r2
 800a35e:	0018      	movs	r0, r3
 800a360:	f001 f965 	bl	800b62e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2180      	movs	r1, #128	@ 0x80
 800a368:	0018      	movs	r0, r3
 800a36a:	f001 f960 	bl	800b62e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a36e:	e024      	b.n	800a3ba <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	0011      	movs	r1, r2
 800a376:	0018      	movs	r0, r3
 800a378:	f000 fc91 	bl	800ac9e <USBD_CtlError>
              break;
 800a37c:	e01d      	b.n	800a3ba <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	885b      	ldrh	r3, [r3, #2]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d118      	bne.n	800a3b8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a386:	210e      	movs	r1, #14
 800a388:	187b      	adds	r3, r7, r1
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	227f      	movs	r2, #127	@ 0x7f
 800a38e:	4013      	ands	r3, r2
 800a390:	d006      	beq.n	800a3a0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a392:	187b      	adds	r3, r7, r1
 800a394:	781a      	ldrb	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	0011      	movs	r1, r2
 800a39a:	0018      	movs	r0, r3
 800a39c:	f001 f972 	bl	800b684 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	0018      	movs	r0, r3
 800a3a4:	f000 fd63 	bl	800ae6e <USBD_CtlSendStatus>
              }
              break;
 800a3a8:	e006      	b.n	800a3b8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	0011      	movs	r1, r2
 800a3b0:	0018      	movs	r0, r3
 800a3b2:	f000 fc74 	bl	800ac9e <USBD_CtlError>
              break;
 800a3b6:	e000      	b.n	800a3ba <USBD_StdEPReq+0x1b0>
              break;
 800a3b8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a3ba:	e0cd      	b.n	800a558 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	23a7      	movs	r3, #167	@ 0xa7
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	5cd3      	ldrb	r3, [r2, r3]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d002      	beq.n	800a3ce <USBD_StdEPReq+0x1c4>
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d03c      	beq.n	800a446 <USBD_StdEPReq+0x23c>
 800a3cc:	e0b5      	b.n	800a53a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3ce:	220e      	movs	r2, #14
 800a3d0:	18bb      	adds	r3, r7, r2
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <USBD_StdEPReq+0x1e4>
 800a3d8:	18bb      	adds	r3, r7, r2
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	2b80      	cmp	r3, #128	@ 0x80
 800a3de:	d006      	beq.n	800a3ee <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	0011      	movs	r1, r2
 800a3e6:	0018      	movs	r0, r3
 800a3e8:	f000 fc59 	bl	800ac9e <USBD_CtlError>
                break;
 800a3ec:	e0ac      	b.n	800a548 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3ee:	220e      	movs	r2, #14
 800a3f0:	18bb      	adds	r3, r7, r2
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	b25b      	sxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	da0c      	bge.n	800a414 <USBD_StdEPReq+0x20a>
 800a3fa:	18bb      	adds	r3, r7, r2
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	227f      	movs	r2, #127	@ 0x7f
 800a400:	401a      	ands	r2, r3
 800a402:	0013      	movs	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	189b      	adds	r3, r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	3310      	adds	r3, #16
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	18d3      	adds	r3, r2, r3
 800a410:	3304      	adds	r3, #4
 800a412:	e00d      	b.n	800a430 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a414:	230e      	movs	r3, #14
 800a416:	18fb      	adds	r3, r7, r3
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	227f      	movs	r2, #127	@ 0x7f
 800a41c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a41e:	0013      	movs	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	189b      	adds	r3, r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	3351      	adds	r3, #81	@ 0x51
 800a428:	33ff      	adds	r3, #255	@ 0xff
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	18d3      	adds	r3, r2, r3
 800a42e:	3304      	adds	r3, #4
 800a430:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a438:	68b9      	ldr	r1, [r7, #8]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2202      	movs	r2, #2
 800a43e:	0018      	movs	r0, r3
 800a440:	f000 fcab 	bl	800ad9a <USBD_CtlSendData>
              break;
 800a444:	e080      	b.n	800a548 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a446:	220e      	movs	r2, #14
 800a448:	18bb      	adds	r3, r7, r2
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	b25b      	sxtb	r3, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	da14      	bge.n	800a47c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a452:	18bb      	adds	r3, r7, r2
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	220f      	movs	r2, #15
 800a458:	401a      	ands	r2, r3
 800a45a:	6879      	ldr	r1, [r7, #4]
 800a45c:	0013      	movs	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	189b      	adds	r3, r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	18cb      	adds	r3, r1, r3
 800a466:	3318      	adds	r3, #24
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d11e      	bne.n	800a4ac <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	0011      	movs	r1, r2
 800a474:	0018      	movs	r0, r3
 800a476:	f000 fc12 	bl	800ac9e <USBD_CtlError>
                  break;
 800a47a:	e065      	b.n	800a548 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a47c:	230e      	movs	r3, #14
 800a47e:	18fb      	adds	r3, r7, r3
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	220f      	movs	r2, #15
 800a484:	401a      	ands	r2, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	23ac      	movs	r3, #172	@ 0xac
 800a48a:	0059      	lsls	r1, r3, #1
 800a48c:	0013      	movs	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	189b      	adds	r3, r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	18c3      	adds	r3, r0, r3
 800a496:	185b      	adds	r3, r3, r1
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	0011      	movs	r1, r2
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f000 fbfa 	bl	800ac9e <USBD_CtlError>
                  break;
 800a4aa:	e04d      	b.n	800a548 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4ac:	220e      	movs	r2, #14
 800a4ae:	18bb      	adds	r3, r7, r2
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	b25b      	sxtb	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	da0c      	bge.n	800a4d2 <USBD_StdEPReq+0x2c8>
 800a4b8:	18bb      	adds	r3, r7, r2
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	227f      	movs	r2, #127	@ 0x7f
 800a4be:	401a      	ands	r2, r3
 800a4c0:	0013      	movs	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	189b      	adds	r3, r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	3310      	adds	r3, #16
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	18d3      	adds	r3, r2, r3
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	e00d      	b.n	800a4ee <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4d2:	230e      	movs	r3, #14
 800a4d4:	18fb      	adds	r3, r7, r3
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	227f      	movs	r2, #127	@ 0x7f
 800a4da:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4dc:	0013      	movs	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	189b      	adds	r3, r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	3351      	adds	r3, #81	@ 0x51
 800a4e6:	33ff      	adds	r3, #255	@ 0xff
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	18d3      	adds	r3, r2, r3
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a4f0:	220e      	movs	r2, #14
 800a4f2:	18bb      	adds	r3, r7, r2
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <USBD_StdEPReq+0x2f8>
 800a4fa:	18bb      	adds	r3, r7, r2
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b80      	cmp	r3, #128	@ 0x80
 800a500:	d103      	bne.n	800a50a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	2200      	movs	r2, #0
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	e010      	b.n	800a52c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a50a:	230e      	movs	r3, #14
 800a50c:	18fb      	adds	r3, r7, r3
 800a50e:	781a      	ldrb	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	0011      	movs	r1, r2
 800a514:	0018      	movs	r0, r3
 800a516:	f001 f8e0 	bl	800b6da <USBD_LL_IsStallEP>
 800a51a:	1e03      	subs	r3, r0, #0
 800a51c:	d003      	beq.n	800a526 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	2201      	movs	r2, #1
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	e002      	b.n	800a52c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a52c:	68b9      	ldr	r1, [r7, #8]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2202      	movs	r2, #2
 800a532:	0018      	movs	r0, r3
 800a534:	f000 fc31 	bl	800ad9a <USBD_CtlSendData>
              break;
 800a538:	e006      	b.n	800a548 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	0011      	movs	r1, r2
 800a540:	0018      	movs	r0, r3
 800a542:	f000 fbac 	bl	800ac9e <USBD_CtlError>
              break;
 800a546:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a548:	e006      	b.n	800a558 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	0011      	movs	r1, r2
 800a550:	0018      	movs	r0, r3
 800a552:	f000 fba4 	bl	800ac9e <USBD_CtlError>
          break;
 800a556:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a558:	e006      	b.n	800a568 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	0011      	movs	r1, r2
 800a560:	0018      	movs	r0, r3
 800a562:	f000 fb9c 	bl	800ac9e <USBD_CtlError>
      break;
 800a566:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800a568:	230f      	movs	r3, #15
 800a56a:	18fb      	adds	r3, r7, r3
 800a56c:	781b      	ldrb	r3, [r3, #0]
}
 800a56e:	0018      	movs	r0, r3
 800a570:	46bd      	mov	sp, r7
 800a572:	b004      	add	sp, #16
 800a574:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a578 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a582:	2308      	movs	r3, #8
 800a584:	18fb      	adds	r3, r7, r3
 800a586:	2200      	movs	r2, #0
 800a588:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a58e:	230b      	movs	r3, #11
 800a590:	18fb      	adds	r3, r7, r3
 800a592:	2200      	movs	r2, #0
 800a594:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	885b      	ldrh	r3, [r3, #2]
 800a59a:	0a1b      	lsrs	r3, r3, #8
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	2b07      	cmp	r3, #7
 800a5a0:	d900      	bls.n	800a5a4 <USBD_GetDescriptor+0x2c>
 800a5a2:	e159      	b.n	800a858 <USBD_GetDescriptor+0x2e0>
 800a5a4:	009a      	lsls	r2, r3, #2
 800a5a6:	4bcb      	ldr	r3, [pc, #812]	@ (800a8d4 <USBD_GetDescriptor+0x35c>)
 800a5a8:	18d3      	adds	r3, r2, r3
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	23ac      	movs	r3, #172	@ 0xac
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	58d3      	ldr	r3, [r2, r3]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	7c12      	ldrb	r2, [r2, #16]
 800a5bc:	2108      	movs	r1, #8
 800a5be:	1879      	adds	r1, r7, r1
 800a5c0:	0010      	movs	r0, r2
 800a5c2:	4798      	blx	r3
 800a5c4:	0003      	movs	r3, r0
 800a5c6:	60fb      	str	r3, [r7, #12]
      break;
 800a5c8:	e153      	b.n	800a872 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	7c1b      	ldrb	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10f      	bne.n	800a5f2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	23ad      	movs	r3, #173	@ 0xad
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	58d3      	ldr	r3, [r2, r3]
 800a5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5dc:	2208      	movs	r2, #8
 800a5de:	18ba      	adds	r2, r7, r2
 800a5e0:	0010      	movs	r0, r2
 800a5e2:	4798      	blx	r3
 800a5e4:	0003      	movs	r3, r0
 800a5e6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a5f0:	e13f      	b.n	800a872 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	23ad      	movs	r3, #173	@ 0xad
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	58d3      	ldr	r3, [r2, r3]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fc:	2208      	movs	r2, #8
 800a5fe:	18ba      	adds	r2, r7, r2
 800a600:	0010      	movs	r0, r2
 800a602:	4798      	blx	r3
 800a604:	0003      	movs	r3, r0
 800a606:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3301      	adds	r3, #1
 800a60c:	2202      	movs	r2, #2
 800a60e:	701a      	strb	r2, [r3, #0]
      break;
 800a610:	e12f      	b.n	800a872 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	885b      	ldrh	r3, [r3, #2]
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b05      	cmp	r3, #5
 800a61a:	d900      	bls.n	800a61e <USBD_GetDescriptor+0xa6>
 800a61c:	e0d0      	b.n	800a7c0 <USBD_GetDescriptor+0x248>
 800a61e:	009a      	lsls	r2, r3, #2
 800a620:	4bad      	ldr	r3, [pc, #692]	@ (800a8d8 <USBD_GetDescriptor+0x360>)
 800a622:	18d3      	adds	r3, r2, r3
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	23ac      	movs	r3, #172	@ 0xac
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	58d3      	ldr	r3, [r2, r3]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00d      	beq.n	800a652 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	23ac      	movs	r3, #172	@ 0xac
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	58d3      	ldr	r3, [r2, r3]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	7c12      	ldrb	r2, [r2, #16]
 800a644:	2108      	movs	r1, #8
 800a646:	1879      	adds	r1, r7, r1
 800a648:	0010      	movs	r0, r2
 800a64a:	4798      	blx	r3
 800a64c:	0003      	movs	r3, r0
 800a64e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a650:	e0c3      	b.n	800a7da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	0011      	movs	r1, r2
 800a658:	0018      	movs	r0, r3
 800a65a:	f000 fb20 	bl	800ac9e <USBD_CtlError>
            err++;
 800a65e:	210b      	movs	r1, #11
 800a660:	187b      	adds	r3, r7, r1
 800a662:	781a      	ldrb	r2, [r3, #0]
 800a664:	187b      	adds	r3, r7, r1
 800a666:	3201      	adds	r2, #1
 800a668:	701a      	strb	r2, [r3, #0]
          break;
 800a66a:	e0b6      	b.n	800a7da <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	23ac      	movs	r3, #172	@ 0xac
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	58d3      	ldr	r3, [r2, r3]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00d      	beq.n	800a696 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	23ac      	movs	r3, #172	@ 0xac
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	58d3      	ldr	r3, [r2, r3]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	7c12      	ldrb	r2, [r2, #16]
 800a688:	2108      	movs	r1, #8
 800a68a:	1879      	adds	r1, r7, r1
 800a68c:	0010      	movs	r0, r2
 800a68e:	4798      	blx	r3
 800a690:	0003      	movs	r3, r0
 800a692:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a694:	e0a1      	b.n	800a7da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	0011      	movs	r1, r2
 800a69c:	0018      	movs	r0, r3
 800a69e:	f000 fafe 	bl	800ac9e <USBD_CtlError>
            err++;
 800a6a2:	210b      	movs	r1, #11
 800a6a4:	187b      	adds	r3, r7, r1
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	187b      	adds	r3, r7, r1
 800a6aa:	3201      	adds	r2, #1
 800a6ac:	701a      	strb	r2, [r3, #0]
          break;
 800a6ae:	e094      	b.n	800a7da <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	23ac      	movs	r3, #172	@ 0xac
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	58d3      	ldr	r3, [r2, r3]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00d      	beq.n	800a6da <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	23ac      	movs	r3, #172	@ 0xac
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	58d3      	ldr	r3, [r2, r3]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	7c12      	ldrb	r2, [r2, #16]
 800a6cc:	2108      	movs	r1, #8
 800a6ce:	1879      	adds	r1, r7, r1
 800a6d0:	0010      	movs	r0, r2
 800a6d2:	4798      	blx	r3
 800a6d4:	0003      	movs	r3, r0
 800a6d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6d8:	e07f      	b.n	800a7da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	0011      	movs	r1, r2
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	f000 fadc 	bl	800ac9e <USBD_CtlError>
            err++;
 800a6e6:	210b      	movs	r1, #11
 800a6e8:	187b      	adds	r3, r7, r1
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	187b      	adds	r3, r7, r1
 800a6ee:	3201      	adds	r2, #1
 800a6f0:	701a      	strb	r2, [r3, #0]
          break;
 800a6f2:	e072      	b.n	800a7da <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	23ac      	movs	r3, #172	@ 0xac
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	58d3      	ldr	r3, [r2, r3]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00d      	beq.n	800a71e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	23ac      	movs	r3, #172	@ 0xac
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	58d3      	ldr	r3, [r2, r3]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	7c12      	ldrb	r2, [r2, #16]
 800a710:	2108      	movs	r1, #8
 800a712:	1879      	adds	r1, r7, r1
 800a714:	0010      	movs	r0, r2
 800a716:	4798      	blx	r3
 800a718:	0003      	movs	r3, r0
 800a71a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a71c:	e05d      	b.n	800a7da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	0011      	movs	r1, r2
 800a724:	0018      	movs	r0, r3
 800a726:	f000 faba 	bl	800ac9e <USBD_CtlError>
            err++;
 800a72a:	210b      	movs	r1, #11
 800a72c:	187b      	adds	r3, r7, r1
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	187b      	adds	r3, r7, r1
 800a732:	3201      	adds	r2, #1
 800a734:	701a      	strb	r2, [r3, #0]
          break;
 800a736:	e050      	b.n	800a7da <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	23ac      	movs	r3, #172	@ 0xac
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	58d3      	ldr	r3, [r2, r3]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00d      	beq.n	800a762 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	23ac      	movs	r3, #172	@ 0xac
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	58d3      	ldr	r3, [r2, r3]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	7c12      	ldrb	r2, [r2, #16]
 800a754:	2108      	movs	r1, #8
 800a756:	1879      	adds	r1, r7, r1
 800a758:	0010      	movs	r0, r2
 800a75a:	4798      	blx	r3
 800a75c:	0003      	movs	r3, r0
 800a75e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a760:	e03b      	b.n	800a7da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	0011      	movs	r1, r2
 800a768:	0018      	movs	r0, r3
 800a76a:	f000 fa98 	bl	800ac9e <USBD_CtlError>
            err++;
 800a76e:	210b      	movs	r1, #11
 800a770:	187b      	adds	r3, r7, r1
 800a772:	781a      	ldrb	r2, [r3, #0]
 800a774:	187b      	adds	r3, r7, r1
 800a776:	3201      	adds	r2, #1
 800a778:	701a      	strb	r2, [r3, #0]
          break;
 800a77a:	e02e      	b.n	800a7da <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	23ac      	movs	r3, #172	@ 0xac
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	58d3      	ldr	r3, [r2, r3]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00d      	beq.n	800a7a6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	23ac      	movs	r3, #172	@ 0xac
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	58d3      	ldr	r3, [r2, r3]
 800a792:	699b      	ldr	r3, [r3, #24]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	7c12      	ldrb	r2, [r2, #16]
 800a798:	2108      	movs	r1, #8
 800a79a:	1879      	adds	r1, r7, r1
 800a79c:	0010      	movs	r0, r2
 800a79e:	4798      	blx	r3
 800a7a0:	0003      	movs	r3, r0
 800a7a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7a4:	e019      	b.n	800a7da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	0011      	movs	r1, r2
 800a7ac:	0018      	movs	r0, r3
 800a7ae:	f000 fa76 	bl	800ac9e <USBD_CtlError>
            err++;
 800a7b2:	210b      	movs	r1, #11
 800a7b4:	187b      	adds	r3, r7, r1
 800a7b6:	781a      	ldrb	r2, [r3, #0]
 800a7b8:	187b      	adds	r3, r7, r1
 800a7ba:	3201      	adds	r2, #1
 800a7bc:	701a      	strb	r2, [r3, #0]
          break;
 800a7be:	e00c      	b.n	800a7da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	0011      	movs	r1, r2
 800a7c6:	0018      	movs	r0, r3
 800a7c8:	f000 fa69 	bl	800ac9e <USBD_CtlError>
          err++;
 800a7cc:	210b      	movs	r1, #11
 800a7ce:	187b      	adds	r3, r7, r1
 800a7d0:	781a      	ldrb	r2, [r3, #0]
 800a7d2:	187b      	adds	r3, r7, r1
 800a7d4:	3201      	adds	r2, #1
 800a7d6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800a7d8:	e04b      	b.n	800a872 <USBD_GetDescriptor+0x2fa>
 800a7da:	e04a      	b.n	800a872 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	7c1b      	ldrb	r3, [r3, #16]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10b      	bne.n	800a7fc <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	23ad      	movs	r3, #173	@ 0xad
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	58d3      	ldr	r3, [r2, r3]
 800a7ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ee:	2208      	movs	r2, #8
 800a7f0:	18ba      	adds	r2, r7, r2
 800a7f2:	0010      	movs	r0, r2
 800a7f4:	4798      	blx	r3
 800a7f6:	0003      	movs	r3, r0
 800a7f8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7fa:	e03a      	b.n	800a872 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	0011      	movs	r1, r2
 800a802:	0018      	movs	r0, r3
 800a804:	f000 fa4b 	bl	800ac9e <USBD_CtlError>
        err++;
 800a808:	210b      	movs	r1, #11
 800a80a:	187b      	adds	r3, r7, r1
 800a80c:	781a      	ldrb	r2, [r3, #0]
 800a80e:	187b      	adds	r3, r7, r1
 800a810:	3201      	adds	r2, #1
 800a812:	701a      	strb	r2, [r3, #0]
      break;
 800a814:	e02d      	b.n	800a872 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	7c1b      	ldrb	r3, [r3, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10f      	bne.n	800a83e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	23ad      	movs	r3, #173	@ 0xad
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	58d3      	ldr	r3, [r2, r3]
 800a826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a828:	2208      	movs	r2, #8
 800a82a:	18ba      	adds	r2, r7, r2
 800a82c:	0010      	movs	r0, r2
 800a82e:	4798      	blx	r3
 800a830:	0003      	movs	r3, r0
 800a832:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3301      	adds	r3, #1
 800a838:	2207      	movs	r2, #7
 800a83a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a83c:	e019      	b.n	800a872 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	0011      	movs	r1, r2
 800a844:	0018      	movs	r0, r3
 800a846:	f000 fa2a 	bl	800ac9e <USBD_CtlError>
        err++;
 800a84a:	210b      	movs	r1, #11
 800a84c:	187b      	adds	r3, r7, r1
 800a84e:	781a      	ldrb	r2, [r3, #0]
 800a850:	187b      	adds	r3, r7, r1
 800a852:	3201      	adds	r2, #1
 800a854:	701a      	strb	r2, [r3, #0]
      break;
 800a856:	e00c      	b.n	800a872 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	0011      	movs	r1, r2
 800a85e:	0018      	movs	r0, r3
 800a860:	f000 fa1d 	bl	800ac9e <USBD_CtlError>
      err++;
 800a864:	210b      	movs	r1, #11
 800a866:	187b      	adds	r3, r7, r1
 800a868:	781a      	ldrb	r2, [r3, #0]
 800a86a:	187b      	adds	r3, r7, r1
 800a86c:	3201      	adds	r2, #1
 800a86e:	701a      	strb	r2, [r3, #0]
      break;
 800a870:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800a872:	230b      	movs	r3, #11
 800a874:	18fb      	adds	r3, r7, r3
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d127      	bne.n	800a8cc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a87c:	2108      	movs	r1, #8
 800a87e:	187b      	adds	r3, r7, r1
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d019      	beq.n	800a8ba <USBD_GetDescriptor+0x342>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	88db      	ldrh	r3, [r3, #6]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d015      	beq.n	800a8ba <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	88da      	ldrh	r2, [r3, #6]
 800a892:	187b      	adds	r3, r7, r1
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	1c18      	adds	r0, r3, #0
 800a898:	1c11      	adds	r1, r2, #0
 800a89a:	b28a      	uxth	r2, r1
 800a89c:	b283      	uxth	r3, r0
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d900      	bls.n	800a8a4 <USBD_GetDescriptor+0x32c>
 800a8a2:	1c01      	adds	r1, r0, #0
 800a8a4:	b28a      	uxth	r2, r1
 800a8a6:	2108      	movs	r1, #8
 800a8a8:	187b      	adds	r3, r7, r1
 800a8aa:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8ac:	187b      	adds	r3, r7, r1
 800a8ae:	881a      	ldrh	r2, [r3, #0]
 800a8b0:	68f9      	ldr	r1, [r7, #12]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	f000 fa70 	bl	800ad9a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	88db      	ldrh	r3, [r3, #6]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d105      	bne.n	800a8ce <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	f000 fad2 	bl	800ae6e <USBD_CtlSendStatus>
 800a8ca:	e000      	b.n	800a8ce <USBD_GetDescriptor+0x356>
    return;
 800a8cc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	b004      	add	sp, #16
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	0800c60c 	.word	0x0800c60c
 800a8d8:	0800c62c 	.word	0x0800c62c

0800a8dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a8dc:	b590      	push	{r4, r7, lr}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	889b      	ldrh	r3, [r3, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d13d      	bne.n	800a96a <USBD_SetAddress+0x8e>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	88db      	ldrh	r3, [r3, #6]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d139      	bne.n	800a96a <USBD_SetAddress+0x8e>
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	885b      	ldrh	r3, [r3, #2]
 800a8fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8fc:	d835      	bhi.n	800a96a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	885b      	ldrh	r3, [r3, #2]
 800a902:	b2da      	uxtb	r2, r3
 800a904:	230f      	movs	r3, #15
 800a906:	18fb      	adds	r3, r7, r3
 800a908:	217f      	movs	r1, #127	@ 0x7f
 800a90a:	400a      	ands	r2, r1
 800a90c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	23a7      	movs	r3, #167	@ 0xa7
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	5cd3      	ldrb	r3, [r2, r3]
 800a916:	2b03      	cmp	r3, #3
 800a918:	d106      	bne.n	800a928 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	0011      	movs	r1, r2
 800a920:	0018      	movs	r0, r3
 800a922:	f000 f9bc 	bl	800ac9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a926:	e027      	b.n	800a978 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	240f      	movs	r4, #15
 800a92c:	193a      	adds	r2, r7, r4
 800a92e:	4914      	ldr	r1, [pc, #80]	@ (800a980 <USBD_SetAddress+0xa4>)
 800a930:	7812      	ldrb	r2, [r2, #0]
 800a932:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a934:	193b      	adds	r3, r7, r4
 800a936:	781a      	ldrb	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	0011      	movs	r1, r2
 800a93c:	0018      	movs	r0, r3
 800a93e:	f000 fefc 	bl	800b73a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	0018      	movs	r0, r3
 800a946:	f000 fa92 	bl	800ae6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a94a:	193b      	adds	r3, r7, r4
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d005      	beq.n	800a95e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	23a7      	movs	r3, #167	@ 0xa7
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	2102      	movs	r1, #2
 800a95a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95c:	e00c      	b.n	800a978 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	23a7      	movs	r3, #167	@ 0xa7
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	2101      	movs	r1, #1
 800a966:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a968:	e006      	b.n	800a978 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	0011      	movs	r1, r2
 800a970:	0018      	movs	r0, r3
 800a972:	f000 f994 	bl	800ac9e <USBD_CtlError>
  }
}
 800a976:	46c0      	nop			@ (mov r8, r8)
 800a978:	46c0      	nop			@ (mov r8, r8)
 800a97a:	46bd      	mov	sp, r7
 800a97c:	b005      	add	sp, #20
 800a97e:	bd90      	pop	{r4, r7, pc}
 800a980:	0000029e 	.word	0x0000029e

0800a984 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	885b      	ldrh	r3, [r3, #2]
 800a992:	b2da      	uxtb	r2, r3
 800a994:	4b4c      	ldr	r3, [pc, #304]	@ (800aac8 <USBD_SetConfig+0x144>)
 800a996:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a998:	4b4b      	ldr	r3, [pc, #300]	@ (800aac8 <USBD_SetConfig+0x144>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d906      	bls.n	800a9ae <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	0011      	movs	r1, r2
 800a9a6:	0018      	movs	r0, r3
 800a9a8:	f000 f979 	bl	800ac9e <USBD_CtlError>
 800a9ac:	e088      	b.n	800aac0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	23a7      	movs	r3, #167	@ 0xa7
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	5cd3      	ldrb	r3, [r2, r3]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d002      	beq.n	800a9c0 <USBD_SetConfig+0x3c>
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d029      	beq.n	800aa12 <USBD_SetConfig+0x8e>
 800a9be:	e071      	b.n	800aaa4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a9c0:	4b41      	ldr	r3, [pc, #260]	@ (800aac8 <USBD_SetConfig+0x144>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01f      	beq.n	800aa08 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800a9c8:	4b3f      	ldr	r3, [pc, #252]	@ (800aac8 <USBD_SetConfig+0x144>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	001a      	movs	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	23a7      	movs	r3, #167	@ 0xa7
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	2103      	movs	r1, #3
 800a9da:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a9dc:	4b3a      	ldr	r3, [pc, #232]	@ (800aac8 <USBD_SetConfig+0x144>)
 800a9de:	781a      	ldrb	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	0011      	movs	r1, r2
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	f7ff f8c6 	bl	8009b76 <USBD_SetClassConfig>
 800a9ea:	0003      	movs	r3, r0
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d106      	bne.n	800a9fe <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	0011      	movs	r1, r2
 800a9f6:	0018      	movs	r0, r3
 800a9f8:	f000 f951 	bl	800ac9e <USBD_CtlError>
            return;
 800a9fc:	e060      	b.n	800aac0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	0018      	movs	r0, r3
 800aa02:	f000 fa34 	bl	800ae6e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa06:	e05b      	b.n	800aac0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	f000 fa2f 	bl	800ae6e <USBD_CtlSendStatus>
        break;
 800aa10:	e056      	b.n	800aac0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aa12:	4b2d      	ldr	r3, [pc, #180]	@ (800aac8 <USBD_SetConfig+0x144>)
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d115      	bne.n	800aa46 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	23a7      	movs	r3, #167	@ 0xa7
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	2102      	movs	r1, #2
 800aa22:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800aa24:	4b28      	ldr	r3, [pc, #160]	@ (800aac8 <USBD_SetConfig+0x144>)
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	001a      	movs	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aa2e:	4b26      	ldr	r3, [pc, #152]	@ (800aac8 <USBD_SetConfig+0x144>)
 800aa30:	781a      	ldrb	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	0011      	movs	r1, r2
 800aa36:	0018      	movs	r0, r3
 800aa38:	f7ff f8c4 	bl	8009bc4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	0018      	movs	r0, r3
 800aa40:	f000 fa15 	bl	800ae6e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa44:	e03c      	b.n	800aac0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800aa46:	4b20      	ldr	r3, [pc, #128]	@ (800aac8 <USBD_SetConfig+0x144>)
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	001a      	movs	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d022      	beq.n	800aa9a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	0011      	movs	r1, r2
 800aa5e:	0018      	movs	r0, r3
 800aa60:	f7ff f8b0 	bl	8009bc4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800aa64:	4b18      	ldr	r3, [pc, #96]	@ (800aac8 <USBD_SetConfig+0x144>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	001a      	movs	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa6e:	4b16      	ldr	r3, [pc, #88]	@ (800aac8 <USBD_SetConfig+0x144>)
 800aa70:	781a      	ldrb	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	0011      	movs	r1, r2
 800aa76:	0018      	movs	r0, r3
 800aa78:	f7ff f87d 	bl	8009b76 <USBD_SetClassConfig>
 800aa7c:	0003      	movs	r3, r0
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d106      	bne.n	800aa90 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	0011      	movs	r1, r2
 800aa88:	0018      	movs	r0, r3
 800aa8a:	f000 f908 	bl	800ac9e <USBD_CtlError>
            return;
 800aa8e:	e017      	b.n	800aac0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	0018      	movs	r0, r3
 800aa94:	f000 f9eb 	bl	800ae6e <USBD_CtlSendStatus>
        break;
 800aa98:	e012      	b.n	800aac0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	0018      	movs	r0, r3
 800aa9e:	f000 f9e6 	bl	800ae6e <USBD_CtlSendStatus>
        break;
 800aaa2:	e00d      	b.n	800aac0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	0011      	movs	r1, r2
 800aaaa:	0018      	movs	r0, r3
 800aaac:	f000 f8f7 	bl	800ac9e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aab0:	4b05      	ldr	r3, [pc, #20]	@ (800aac8 <USBD_SetConfig+0x144>)
 800aab2:	781a      	ldrb	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	0011      	movs	r1, r2
 800aab8:	0018      	movs	r0, r3
 800aaba:	f7ff f883 	bl	8009bc4 <USBD_ClrClassConfig>
        break;
 800aabe:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800aac0:	46bd      	mov	sp, r7
 800aac2:	b002      	add	sp, #8
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	46c0      	nop			@ (mov r8, r8)
 800aac8:	20000424 	.word	0x20000424

0800aacc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	88db      	ldrh	r3, [r3, #6]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d006      	beq.n	800aaec <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	0011      	movs	r1, r2
 800aae4:	0018      	movs	r0, r3
 800aae6:	f000 f8da 	bl	800ac9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aaea:	e026      	b.n	800ab3a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	23a7      	movs	r3, #167	@ 0xa7
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	5cd3      	ldrb	r3, [r2, r3]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	dc02      	bgt.n	800aafe <USBD_GetConfig+0x32>
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dc03      	bgt.n	800ab04 <USBD_GetConfig+0x38>
 800aafc:	e016      	b.n	800ab2c <USBD_GetConfig+0x60>
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d00c      	beq.n	800ab1c <USBD_GetConfig+0x50>
 800ab02:	e013      	b.n	800ab2c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	0019      	movs	r1, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	0018      	movs	r0, r3
 800ab16:	f000 f940 	bl	800ad9a <USBD_CtlSendData>
        break;
 800ab1a:	e00e      	b.n	800ab3a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	1d19      	adds	r1, r3, #4
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	0018      	movs	r0, r3
 800ab26:	f000 f938 	bl	800ad9a <USBD_CtlSendData>
        break;
 800ab2a:	e006      	b.n	800ab3a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800ab2c:	683a      	ldr	r2, [r7, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	0011      	movs	r1, r2
 800ab32:	0018      	movs	r0, r3
 800ab34:	f000 f8b3 	bl	800ac9e <USBD_CtlError>
        break;
 800ab38:	46c0      	nop			@ (mov r8, r8)
}
 800ab3a:	46c0      	nop			@ (mov r8, r8)
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	b002      	add	sp, #8
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	23a7      	movs	r3, #167	@ 0xa7
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	5cd3      	ldrb	r3, [r2, r3]
 800ab54:	3b01      	subs	r3, #1
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d822      	bhi.n	800aba0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	88db      	ldrh	r3, [r3, #6]
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d006      	beq.n	800ab70 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	0011      	movs	r1, r2
 800ab68:	0018      	movs	r0, r3
 800ab6a:	f000 f898 	bl	800ac9e <USBD_CtlError>
        break;
 800ab6e:	e01e      	b.n	800abae <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	23a9      	movs	r3, #169	@ 0xa9
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	58d3      	ldr	r3, [r2, r3]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d005      	beq.n	800ab8e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	2202      	movs	r2, #2
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	330c      	adds	r3, #12
 800ab92:	0019      	movs	r1, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2202      	movs	r2, #2
 800ab98:	0018      	movs	r0, r3
 800ab9a:	f000 f8fe 	bl	800ad9a <USBD_CtlSendData>
      break;
 800ab9e:	e006      	b.n	800abae <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	0011      	movs	r1, r2
 800aba6:	0018      	movs	r0, r3
 800aba8:	f000 f879 	bl	800ac9e <USBD_CtlError>
      break;
 800abac:	46c0      	nop			@ (mov r8, r8)
  }
}
 800abae:	46c0      	nop			@ (mov r8, r8)
 800abb0:	46bd      	mov	sp, r7
 800abb2:	b002      	add	sp, #8
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b082      	sub	sp, #8
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	885b      	ldrh	r3, [r3, #2]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d108      	bne.n	800abda <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	23a9      	movs	r3, #169	@ 0xa9
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	2101      	movs	r1, #1
 800abd0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	0018      	movs	r0, r3
 800abd6:	f000 f94a 	bl	800ae6e <USBD_CtlSendStatus>
  }
}
 800abda:	46c0      	nop			@ (mov r8, r8)
 800abdc:	46bd      	mov	sp, r7
 800abde:	b002      	add	sp, #8
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b082      	sub	sp, #8
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	23a7      	movs	r3, #167	@ 0xa7
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	5cd3      	ldrb	r3, [r2, r3]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d80d      	bhi.n	800ac16 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	885b      	ldrh	r3, [r3, #2]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d110      	bne.n	800ac24 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	23a9      	movs	r3, #169	@ 0xa9
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	2100      	movs	r1, #0
 800ac0a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	0018      	movs	r0, r3
 800ac10:	f000 f92d 	bl	800ae6e <USBD_CtlSendStatus>
      }
      break;
 800ac14:	e006      	b.n	800ac24 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	0011      	movs	r1, r2
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f000 f83e 	bl	800ac9e <USBD_CtlError>
      break;
 800ac22:	e000      	b.n	800ac26 <USBD_ClrFeature+0x44>
      break;
 800ac24:	46c0      	nop			@ (mov r8, r8)
  }
}
 800ac26:	46c0      	nop			@ (mov r8, r8)
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	b002      	add	sp, #8
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	781a      	ldrb	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	785a      	ldrb	r2, [r3, #1]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	3302      	adds	r3, #2
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	001a      	movs	r2, r3
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	3303      	adds	r3, #3
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	021b      	lsls	r3, r3, #8
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	18d3      	adds	r3, r2, r3
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	3304      	adds	r3, #4
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	001a      	movs	r2, r3
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	3305      	adds	r3, #5
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	18d3      	adds	r3, r2, r3
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	3306      	adds	r3, #6
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	001a      	movs	r2, r3
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	3307      	adds	r3, #7
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	021b      	lsls	r3, r3, #8
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	18d3      	adds	r3, r2, r3
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	80da      	strh	r2, [r3, #6]

}
 800ac96:	46c0      	nop			@ (mov r8, r8)
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	b002      	add	sp, #8
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b082      	sub	sp, #8
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2180      	movs	r1, #128	@ 0x80
 800acac:	0018      	movs	r0, r3
 800acae:	f000 fcbe 	bl	800b62e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2100      	movs	r1, #0
 800acb6:	0018      	movs	r0, r3
 800acb8:	f000 fcb9 	bl	800b62e <USBD_LL_StallEP>
}
 800acbc:	46c0      	nop			@ (mov r8, r8)
 800acbe:	46bd      	mov	sp, r7
 800acc0:	b002      	add	sp, #8
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800acc4:	b590      	push	{r4, r7, lr}
 800acc6:	b087      	sub	sp, #28
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800acd0:	2417      	movs	r4, #23
 800acd2:	193b      	adds	r3, r7, r4
 800acd4:	2200      	movs	r2, #0
 800acd6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d03c      	beq.n	800ad58 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	0018      	movs	r0, r3
 800ace2:	f000 f83d 	bl	800ad60 <USBD_GetLen>
 800ace6:	0003      	movs	r3, r0
 800ace8:	3301      	adds	r3, #1
 800acea:	b29b      	uxth	r3, r3
 800acec:	18db      	adds	r3, r3, r3
 800acee:	b29a      	uxth	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800acf4:	193b      	adds	r3, r7, r4
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	193a      	adds	r2, r7, r4
 800acfa:	1c59      	adds	r1, r3, #1
 800acfc:	7011      	strb	r1, [r2, #0]
 800acfe:	001a      	movs	r2, r3
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	189b      	adds	r3, r3, r2
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	7812      	ldrb	r2, [r2, #0]
 800ad08:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ad0a:	193b      	adds	r3, r7, r4
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	193a      	adds	r2, r7, r4
 800ad10:	1c59      	adds	r1, r3, #1
 800ad12:	7011      	strb	r1, [r2, #0]
 800ad14:	001a      	movs	r2, r3
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	189b      	adds	r3, r3, r2
 800ad1a:	2203      	movs	r2, #3
 800ad1c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ad1e:	e017      	b.n	800ad50 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	60fa      	str	r2, [r7, #12]
 800ad26:	2417      	movs	r4, #23
 800ad28:	193a      	adds	r2, r7, r4
 800ad2a:	7812      	ldrb	r2, [r2, #0]
 800ad2c:	1939      	adds	r1, r7, r4
 800ad2e:	1c50      	adds	r0, r2, #1
 800ad30:	7008      	strb	r0, [r1, #0]
 800ad32:	0011      	movs	r1, r2
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	1852      	adds	r2, r2, r1
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ad3c:	193b      	adds	r3, r7, r4
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	193a      	adds	r2, r7, r4
 800ad42:	1c59      	adds	r1, r3, #1
 800ad44:	7011      	strb	r1, [r2, #0]
 800ad46:	001a      	movs	r2, r3
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	189b      	adds	r3, r3, r2
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e3      	bne.n	800ad20 <USBD_GetString+0x5c>
    }
  }
}
 800ad58:	46c0      	nop			@ (mov r8, r8)
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	b007      	add	sp, #28
 800ad5e:	bd90      	pop	{r4, r7, pc}

0800ad60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad68:	230f      	movs	r3, #15
 800ad6a:	18fb      	adds	r3, r7, r3
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800ad70:	e008      	b.n	800ad84 <USBD_GetLen+0x24>
  {
    len++;
 800ad72:	210f      	movs	r1, #15
 800ad74:	187b      	adds	r3, r7, r1
 800ad76:	781a      	ldrb	r2, [r3, #0]
 800ad78:	187b      	adds	r3, r7, r1
 800ad7a:	3201      	adds	r2, #1
 800ad7c:	701a      	strb	r2, [r3, #0]
    buf++;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	3301      	adds	r3, #1
 800ad82:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1f2      	bne.n	800ad72 <USBD_GetLen+0x12>
  }

  return len;
 800ad8c:	230f      	movs	r3, #15
 800ad8e:	18fb      	adds	r3, r7, r3
 800ad90:	781b      	ldrb	r3, [r3, #0]
}
 800ad92:	0018      	movs	r0, r3
 800ad94:	46bd      	mov	sp, r7
 800ad96:	b004      	add	sp, #16
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	60f8      	str	r0, [r7, #12]
 800ada2:	60b9      	str	r1, [r7, #8]
 800ada4:	1dbb      	adds	r3, r7, #6
 800ada6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	23a5      	movs	r3, #165	@ 0xa5
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	2102      	movs	r1, #2
 800adb0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800adb2:	1dbb      	adds	r3, r7, #6
 800adb4:	881a      	ldrh	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800adba:	1dbb      	adds	r3, r7, #6
 800adbc:	881a      	ldrh	r2, [r3, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adc2:	1dbb      	adds	r3, r7, #6
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	2100      	movs	r1, #0
 800adcc:	f000 fce0 	bl	800b790 <USBD_LL_Transmit>

  return USBD_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	0018      	movs	r0, r3
 800add4:	46bd      	mov	sp, r7
 800add6:	b004      	add	sp, #16
 800add8:	bd80      	pop	{r7, pc}

0800adda <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b084      	sub	sp, #16
 800adde:	af00      	add	r7, sp, #0
 800ade0:	60f8      	str	r0, [r7, #12]
 800ade2:	60b9      	str	r1, [r7, #8]
 800ade4:	1dbb      	adds	r3, r7, #6
 800ade6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ade8:	1dbb      	adds	r3, r7, #6
 800adea:	881b      	ldrh	r3, [r3, #0]
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	2100      	movs	r1, #0
 800adf2:	f000 fccd 	bl	800b790 <USBD_LL_Transmit>

  return USBD_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	0018      	movs	r0, r3
 800adfa:	46bd      	mov	sp, r7
 800adfc:	b004      	add	sp, #16
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	1dbb      	adds	r3, r7, #6
 800ae0c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	23a5      	movs	r3, #165	@ 0xa5
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	2103      	movs	r1, #3
 800ae16:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800ae18:	1dbb      	adds	r3, r7, #6
 800ae1a:	8819      	ldrh	r1, [r3, #0]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	23ae      	movs	r3, #174	@ 0xae
 800ae20:	005b      	lsls	r3, r3, #1
 800ae22:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800ae24:	1dbb      	adds	r3, r7, #6
 800ae26:	8819      	ldrh	r1, [r3, #0]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	23b0      	movs	r3, #176	@ 0xb0
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae30:	1dbb      	adds	r3, r7, #6
 800ae32:	881b      	ldrh	r3, [r3, #0]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	2100      	movs	r1, #0
 800ae3a:	f000 fce0 	bl	800b7fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	0018      	movs	r0, r3
 800ae42:	46bd      	mov	sp, r7
 800ae44:	b004      	add	sp, #16
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	1dbb      	adds	r3, r7, #6
 800ae54:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae56:	1dbb      	adds	r3, r7, #6
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	2100      	movs	r1, #0
 800ae60:	f000 fccd 	bl	800b7fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	0018      	movs	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	b004      	add	sp, #16
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	23a5      	movs	r3, #165	@ 0xa5
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	2104      	movs	r1, #4
 800ae7e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	2300      	movs	r3, #0
 800ae84:	2200      	movs	r2, #0
 800ae86:	2100      	movs	r1, #0
 800ae88:	f000 fc82 	bl	800b790 <USBD_LL_Transmit>

  return USBD_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	0018      	movs	r0, r3
 800ae90:	46bd      	mov	sp, r7
 800ae92:	b002      	add	sp, #8
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b082      	sub	sp, #8
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	23a5      	movs	r3, #165	@ 0xa5
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	2105      	movs	r1, #5
 800aea6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	2200      	movs	r2, #0
 800aeae:	2100      	movs	r1, #0
 800aeb0:	f000 fca5 	bl	800b7fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	b002      	add	sp, #8
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aec4:	4914      	ldr	r1, [pc, #80]	@ (800af18 <MX_USB_DEVICE_Init+0x58>)
 800aec6:	4b15      	ldr	r3, [pc, #84]	@ (800af1c <MX_USB_DEVICE_Init+0x5c>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	0018      	movs	r0, r3
 800aecc:	f7fe fdec 	bl	8009aa8 <USBD_Init>
 800aed0:	1e03      	subs	r3, r0, #0
 800aed2:	d001      	beq.n	800aed8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aed4:	f7f5 fe40 	bl	8000b58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aed8:	4a11      	ldr	r2, [pc, #68]	@ (800af20 <MX_USB_DEVICE_Init+0x60>)
 800aeda:	4b10      	ldr	r3, [pc, #64]	@ (800af1c <MX_USB_DEVICE_Init+0x5c>)
 800aedc:	0011      	movs	r1, r2
 800aede:	0018      	movs	r0, r3
 800aee0:	f7fe fe13 	bl	8009b0a <USBD_RegisterClass>
 800aee4:	1e03      	subs	r3, r0, #0
 800aee6:	d001      	beq.n	800aeec <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800aee8:	f7f5 fe36 	bl	8000b58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aeec:	4a0d      	ldr	r2, [pc, #52]	@ (800af24 <MX_USB_DEVICE_Init+0x64>)
 800aeee:	4b0b      	ldr	r3, [pc, #44]	@ (800af1c <MX_USB_DEVICE_Init+0x5c>)
 800aef0:	0011      	movs	r1, r2
 800aef2:	0018      	movs	r0, r3
 800aef4:	f7fe fd28 	bl	8009948 <USBD_CDC_RegisterInterface>
 800aef8:	1e03      	subs	r3, r0, #0
 800aefa:	d001      	beq.n	800af00 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800aefc:	f7f5 fe2c 	bl	8000b58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800af00:	4b06      	ldr	r3, [pc, #24]	@ (800af1c <MX_USB_DEVICE_Init+0x5c>)
 800af02:	0018      	movs	r0, r3
 800af04:	f7fe fe21 	bl	8009b4a <USBD_Start>
 800af08:	1e03      	subs	r3, r0, #0
 800af0a:	d001      	beq.n	800af10 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800af0c:	f7f5 fe24 	bl	8000b58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af10:	46c0      	nop			@ (mov r8, r8)
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	46c0      	nop			@ (mov r8, r8)
 800af18:	20000144 	.word	0x20000144
 800af1c:	20000428 	.word	0x20000428
 800af20:	20000030 	.word	0x20000030
 800af24:	20000134 	.word	0x20000134

0800af28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af2c:	4907      	ldr	r1, [pc, #28]	@ (800af4c <CDC_Init_FS+0x24>)
 800af2e:	4b08      	ldr	r3, [pc, #32]	@ (800af50 <CDC_Init_FS+0x28>)
 800af30:	2200      	movs	r2, #0
 800af32:	0018      	movs	r0, r3
 800af34:	f7fe fd23 	bl	800997e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af38:	4a06      	ldr	r2, [pc, #24]	@ (800af54 <CDC_Init_FS+0x2c>)
 800af3a:	4b05      	ldr	r3, [pc, #20]	@ (800af50 <CDC_Init_FS+0x28>)
 800af3c:	0011      	movs	r1, r2
 800af3e:	0018      	movs	r0, r3
 800af40:	f7fe fd39 	bl	80099b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af44:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af46:	0018      	movs	r0, r3
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	20000aec 	.word	0x20000aec
 800af50:	20000428 	.word	0x20000428
 800af54:	200006ec 	.word	0x200006ec

0800af58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af5e:	0018      	movs	r0, r3
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6039      	str	r1, [r7, #0]
 800af6c:	0011      	movs	r1, r2
 800af6e:	1dfb      	adds	r3, r7, #7
 800af70:	1c02      	adds	r2, r0, #0
 800af72:	701a      	strb	r2, [r3, #0]
 800af74:	1d3b      	adds	r3, r7, #4
 800af76:	1c0a      	adds	r2, r1, #0
 800af78:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af7a:	1dfb      	adds	r3, r7, #7
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	2b23      	cmp	r3, #35	@ 0x23
 800af80:	d804      	bhi.n	800af8c <CDC_Control_FS+0x28>
 800af82:	009a      	lsls	r2, r3, #2
 800af84:	4b04      	ldr	r3, [pc, #16]	@ (800af98 <CDC_Control_FS+0x34>)
 800af86:	18d3      	adds	r3, r2, r3
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800af8c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800af8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af90:	0018      	movs	r0, r3
 800af92:	46bd      	mov	sp, r7
 800af94:	b002      	add	sp, #8
 800af96:	bd80      	pop	{r7, pc}
 800af98:	0800c644 	.word	0x0800c644

0800af9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	4b06      	ldr	r3, [pc, #24]	@ (800afc4 <CDC_Receive_FS+0x28>)
 800afaa:	0011      	movs	r1, r2
 800afac:	0018      	movs	r0, r3
 800afae:	f7fe fd02 	bl	80099b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800afb2:	4b04      	ldr	r3, [pc, #16]	@ (800afc4 <CDC_Receive_FS+0x28>)
 800afb4:	0018      	movs	r0, r3
 800afb6:	f7fe fd49 	bl	8009a4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800afba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800afbc:	0018      	movs	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	b002      	add	sp, #8
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20000428 	.word	0x20000428

0800afc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800afc8:	b5b0      	push	{r4, r5, r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	000a      	movs	r2, r1
 800afd2:	1cbb      	adds	r3, r7, #2
 800afd4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800afd6:	230f      	movs	r3, #15
 800afd8:	18fb      	adds	r3, r7, r3
 800afda:	2200      	movs	r2, #0
 800afdc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800afde:	4a11      	ldr	r2, [pc, #68]	@ (800b024 <CDC_Transmit_FS+0x5c>)
 800afe0:	23ae      	movs	r3, #174	@ 0xae
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	58d3      	ldr	r3, [r2, r3]
 800afe6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	2385      	movs	r3, #133	@ 0x85
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	58d3      	ldr	r3, [r2, r3]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e010      	b.n	800b01a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aff8:	1cbb      	adds	r3, r7, #2
 800affa:	881a      	ldrh	r2, [r3, #0]
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	4b09      	ldr	r3, [pc, #36]	@ (800b024 <CDC_Transmit_FS+0x5c>)
 800b000:	0018      	movs	r0, r3
 800b002:	f7fe fcbc 	bl	800997e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b006:	250f      	movs	r5, #15
 800b008:	197c      	adds	r4, r7, r5
 800b00a:	4b06      	ldr	r3, [pc, #24]	@ (800b024 <CDC_Transmit_FS+0x5c>)
 800b00c:	0018      	movs	r0, r3
 800b00e:	f7fe fce6 	bl	80099de <USBD_CDC_TransmitPacket>
 800b012:	0003      	movs	r3, r0
 800b014:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800b016:	197b      	adds	r3, r7, r5
 800b018:	781b      	ldrb	r3, [r3, #0]
}
 800b01a:	0018      	movs	r0, r3
 800b01c:	46bd      	mov	sp, r7
 800b01e:	b004      	add	sp, #16
 800b020:	bdb0      	pop	{r4, r5, r7, pc}
 800b022:	46c0      	nop			@ (mov r8, r8)
 800b024:	20000428 	.word	0x20000428

0800b028 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	0002      	movs	r2, r0
 800b030:	6039      	str	r1, [r7, #0]
 800b032:	1dfb      	adds	r3, r7, #7
 800b034:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2212      	movs	r2, #18
 800b03a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b03c:	4b02      	ldr	r3, [pc, #8]	@ (800b048 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b03e:	0018      	movs	r0, r3
 800b040:	46bd      	mov	sp, r7
 800b042:	b002      	add	sp, #8
 800b044:	bd80      	pop	{r7, pc}
 800b046:	46c0      	nop			@ (mov r8, r8)
 800b048:	20000160 	.word	0x20000160

0800b04c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	0002      	movs	r2, r0
 800b054:	6039      	str	r1, [r7, #0]
 800b056:	1dfb      	adds	r3, r7, #7
 800b058:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	2204      	movs	r2, #4
 800b05e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b060:	4b02      	ldr	r3, [pc, #8]	@ (800b06c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b062:	0018      	movs	r0, r3
 800b064:	46bd      	mov	sp, r7
 800b066:	b002      	add	sp, #8
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	46c0      	nop			@ (mov r8, r8)
 800b06c:	20000174 	.word	0x20000174

0800b070 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	0002      	movs	r2, r0
 800b078:	6039      	str	r1, [r7, #0]
 800b07a:	1dfb      	adds	r3, r7, #7
 800b07c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b07e:	1dfb      	adds	r3, r7, #7
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d106      	bne.n	800b094 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	4908      	ldr	r1, [pc, #32]	@ (800b0ac <USBD_FS_ProductStrDescriptor+0x3c>)
 800b08a:	4b09      	ldr	r3, [pc, #36]	@ (800b0b0 <USBD_FS_ProductStrDescriptor+0x40>)
 800b08c:	0018      	movs	r0, r3
 800b08e:	f7ff fe19 	bl	800acc4 <USBD_GetString>
 800b092:	e005      	b.n	800b0a0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	4905      	ldr	r1, [pc, #20]	@ (800b0ac <USBD_FS_ProductStrDescriptor+0x3c>)
 800b098:	4b05      	ldr	r3, [pc, #20]	@ (800b0b0 <USBD_FS_ProductStrDescriptor+0x40>)
 800b09a:	0018      	movs	r0, r3
 800b09c:	f7ff fe12 	bl	800acc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0a0:	4b02      	ldr	r3, [pc, #8]	@ (800b0ac <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800b0a2:	0018      	movs	r0, r3
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	b002      	add	sp, #8
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	46c0      	nop			@ (mov r8, r8)
 800b0ac:	20000eec 	.word	0x20000eec
 800b0b0:	0800c580 	.word	0x0800c580

0800b0b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	0002      	movs	r2, r0
 800b0bc:	6039      	str	r1, [r7, #0]
 800b0be:	1dfb      	adds	r3, r7, #7
 800b0c0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b0c2:	683a      	ldr	r2, [r7, #0]
 800b0c4:	4904      	ldr	r1, [pc, #16]	@ (800b0d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b0c6:	4b05      	ldr	r3, [pc, #20]	@ (800b0dc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800b0c8:	0018      	movs	r0, r3
 800b0ca:	f7ff fdfb 	bl	800acc4 <USBD_GetString>
  return USBD_StrDesc;
 800b0ce:	4b02      	ldr	r3, [pc, #8]	@ (800b0d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	b002      	add	sp, #8
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	20000eec 	.word	0x20000eec
 800b0dc:	0800c590 	.word	0x0800c590

0800b0e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	0002      	movs	r2, r0
 800b0e8:	6039      	str	r1, [r7, #0]
 800b0ea:	1dfb      	adds	r3, r7, #7
 800b0ec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	221a      	movs	r2, #26
 800b0f2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b0f4:	f000 f84c 	bl	800b190 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b0f8:	4b02      	ldr	r3, [pc, #8]	@ (800b104 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800b0fa:	0018      	movs	r0, r3
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	b002      	add	sp, #8
 800b100:	bd80      	pop	{r7, pc}
 800b102:	46c0      	nop			@ (mov r8, r8)
 800b104:	20000178 	.word	0x20000178

0800b108 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	0002      	movs	r2, r0
 800b110:	6039      	str	r1, [r7, #0]
 800b112:	1dfb      	adds	r3, r7, #7
 800b114:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800b116:	1dfb      	adds	r3, r7, #7
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	4908      	ldr	r1, [pc, #32]	@ (800b144 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b122:	4b09      	ldr	r3, [pc, #36]	@ (800b148 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b124:	0018      	movs	r0, r3
 800b126:	f7ff fdcd 	bl	800acc4 <USBD_GetString>
 800b12a:	e005      	b.n	800b138 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b12c:	683a      	ldr	r2, [r7, #0]
 800b12e:	4905      	ldr	r1, [pc, #20]	@ (800b144 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b130:	4b05      	ldr	r3, [pc, #20]	@ (800b148 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b132:	0018      	movs	r0, r3
 800b134:	f7ff fdc6 	bl	800acc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b138:	4b02      	ldr	r3, [pc, #8]	@ (800b144 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800b13a:	0018      	movs	r0, r3
 800b13c:	46bd      	mov	sp, r7
 800b13e:	b002      	add	sp, #8
 800b140:	bd80      	pop	{r7, pc}
 800b142:	46c0      	nop			@ (mov r8, r8)
 800b144:	20000eec 	.word	0x20000eec
 800b148:	0800c598 	.word	0x0800c598

0800b14c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	0002      	movs	r2, r0
 800b154:	6039      	str	r1, [r7, #0]
 800b156:	1dfb      	adds	r3, r7, #7
 800b158:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b15a:	1dfb      	adds	r3, r7, #7
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d106      	bne.n	800b170 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	4908      	ldr	r1, [pc, #32]	@ (800b188 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b166:	4b09      	ldr	r3, [pc, #36]	@ (800b18c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b168:	0018      	movs	r0, r3
 800b16a:	f7ff fdab 	bl	800acc4 <USBD_GetString>
 800b16e:	e005      	b.n	800b17c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	4905      	ldr	r1, [pc, #20]	@ (800b188 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b174:	4b05      	ldr	r3, [pc, #20]	@ (800b18c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b176:	0018      	movs	r0, r3
 800b178:	f7ff fda4 	bl	800acc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b17c:	4b02      	ldr	r3, [pc, #8]	@ (800b188 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800b17e:	0018      	movs	r0, r3
 800b180:	46bd      	mov	sp, r7
 800b182:	b002      	add	sp, #8
 800b184:	bd80      	pop	{r7, pc}
 800b186:	46c0      	nop			@ (mov r8, r8)
 800b188:	20000eec 	.word	0x20000eec
 800b18c:	0800c5a4 	.word	0x0800c5a4

0800b190 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b196:	4b10      	ldr	r3, [pc, #64]	@ (800b1d8 <Get_SerialNum+0x48>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b19c:	4b0f      	ldr	r3, [pc, #60]	@ (800b1dc <Get_SerialNum+0x4c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1a2:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e0 <Get_SerialNum+0x50>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	18d3      	adds	r3, r2, r3
 800b1ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00b      	beq.n	800b1ce <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1b6:	490b      	ldr	r1, [pc, #44]	@ (800b1e4 <Get_SerialNum+0x54>)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2208      	movs	r2, #8
 800b1bc:	0018      	movs	r0, r3
 800b1be:	f000 f815 	bl	800b1ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1c2:	4909      	ldr	r1, [pc, #36]	@ (800b1e8 <Get_SerialNum+0x58>)
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	2204      	movs	r2, #4
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	f000 f80f 	bl	800b1ec <IntToUnicode>
  }
}
 800b1ce:	46c0      	nop			@ (mov r8, r8)
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	b004      	add	sp, #16
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	46c0      	nop			@ (mov r8, r8)
 800b1d8:	1ffff7ac 	.word	0x1ffff7ac
 800b1dc:	1ffff7b0 	.word	0x1ffff7b0
 800b1e0:	1ffff7b4 	.word	0x1ffff7b4
 800b1e4:	2000017a 	.word	0x2000017a
 800b1e8:	2000018a 	.word	0x2000018a

0800b1ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	1dfb      	adds	r3, r7, #7
 800b1f8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800b1fa:	2117      	movs	r1, #23
 800b1fc:	187b      	adds	r3, r7, r1
 800b1fe:	2200      	movs	r2, #0
 800b200:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800b202:	187b      	adds	r3, r7, r1
 800b204:	2200      	movs	r2, #0
 800b206:	701a      	strb	r2, [r3, #0]
 800b208:	e02f      	b.n	800b26a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	0f1b      	lsrs	r3, r3, #28
 800b20e:	2b09      	cmp	r3, #9
 800b210:	d80d      	bhi.n	800b22e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	0f1b      	lsrs	r3, r3, #28
 800b216:	b2da      	uxtb	r2, r3
 800b218:	2317      	movs	r3, #23
 800b21a:	18fb      	adds	r3, r7, r3
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	0019      	movs	r1, r3
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	185b      	adds	r3, r3, r1
 800b226:	3230      	adds	r2, #48	@ 0x30
 800b228:	b2d2      	uxtb	r2, r2
 800b22a:	701a      	strb	r2, [r3, #0]
 800b22c:	e00c      	b.n	800b248 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	0f1b      	lsrs	r3, r3, #28
 800b232:	b2da      	uxtb	r2, r3
 800b234:	2317      	movs	r3, #23
 800b236:	18fb      	adds	r3, r7, r3
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	0019      	movs	r1, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	185b      	adds	r3, r3, r1
 800b242:	3237      	adds	r2, #55	@ 0x37
 800b244:	b2d2      	uxtb	r2, r2
 800b246:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	011b      	lsls	r3, r3, #4
 800b24c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b24e:	2117      	movs	r1, #23
 800b250:	187b      	adds	r3, r7, r1
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	3301      	adds	r3, #1
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	18d3      	adds	r3, r2, r3
 800b25c:	2200      	movs	r2, #0
 800b25e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b260:	187b      	adds	r3, r7, r1
 800b262:	781a      	ldrb	r2, [r3, #0]
 800b264:	187b      	adds	r3, r7, r1
 800b266:	3201      	adds	r2, #1
 800b268:	701a      	strb	r2, [r3, #0]
 800b26a:	2317      	movs	r3, #23
 800b26c:	18fa      	adds	r2, r7, r3
 800b26e:	1dfb      	adds	r3, r7, #7
 800b270:	7812      	ldrb	r2, [r2, #0]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	429a      	cmp	r2, r3
 800b276:	d3c8      	bcc.n	800b20a <IntToUnicode+0x1e>
  }
}
 800b278:	46c0      	nop			@ (mov r8, r8)
 800b27a:	46c0      	nop			@ (mov r8, r8)
 800b27c:	46bd      	mov	sp, r7
 800b27e:	b006      	add	sp, #24
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a0e      	ldr	r2, [pc, #56]	@ (800b2cc <HAL_PCD_MspInit+0x48>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d115      	bne.n	800b2c2 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b296:	4b0e      	ldr	r3, [pc, #56]	@ (800b2d0 <HAL_PCD_MspInit+0x4c>)
 800b298:	69da      	ldr	r2, [r3, #28]
 800b29a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d0 <HAL_PCD_MspInit+0x4c>)
 800b29c:	2180      	movs	r1, #128	@ 0x80
 800b29e:	0409      	lsls	r1, r1, #16
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	61da      	str	r2, [r3, #28]
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d0 <HAL_PCD_MspInit+0x4c>)
 800b2a6:	69da      	ldr	r2, [r3, #28]
 800b2a8:	2380      	movs	r3, #128	@ 0x80
 800b2aa:	041b      	lsls	r3, r3, #16
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	201f      	movs	r0, #31
 800b2b8:	f7f7 fd04 	bl	8002cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b2bc:	201f      	movs	r0, #31
 800b2be:	f7f7 fd21 	bl	8002d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b2c2:	46c0      	nop			@ (mov r8, r8)
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	b004      	add	sp, #16
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	46c0      	nop			@ (mov r8, r8)
 800b2cc:	40005c00 	.word	0x40005c00
 800b2d0:	40021000 	.word	0x40021000

0800b2d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	23b6      	movs	r3, #182	@ 0xb6
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	58d2      	ldr	r2, [r2, r3]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	21a6      	movs	r1, #166	@ 0xa6
 800b2e8:	0089      	lsls	r1, r1, #2
 800b2ea:	468c      	mov	ip, r1
 800b2ec:	4463      	add	r3, ip
 800b2ee:	0019      	movs	r1, r3
 800b2f0:	0010      	movs	r0, r2
 800b2f2:	f7fe fc7d 	bl	8009bf0 <USBD_LL_SetupStage>
}
 800b2f6:	46c0      	nop			@ (mov r8, r8)
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	b002      	add	sp, #8
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2fe:	b590      	push	{r4, r7, lr}
 800b300:	b083      	sub	sp, #12
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	000a      	movs	r2, r1
 800b308:	1cfb      	adds	r3, r7, #3
 800b30a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	23b6      	movs	r3, #182	@ 0xb6
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	58d4      	ldr	r4, [r2, r3]
 800b314:	1cfb      	adds	r3, r7, #3
 800b316:	781a      	ldrb	r2, [r3, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	23b2      	movs	r3, #178	@ 0xb2
 800b31c:	0059      	lsls	r1, r3, #1
 800b31e:	0013      	movs	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	189b      	adds	r3, r3, r2
 800b324:	00db      	lsls	r3, r3, #3
 800b326:	18c3      	adds	r3, r0, r3
 800b328:	185b      	adds	r3, r3, r1
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	1cfb      	adds	r3, r7, #3
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	0019      	movs	r1, r3
 800b332:	0020      	movs	r0, r4
 800b334:	f7fe fcba 	bl	8009cac <USBD_LL_DataOutStage>
}
 800b338:	46c0      	nop			@ (mov r8, r8)
 800b33a:	46bd      	mov	sp, r7
 800b33c:	b003      	add	sp, #12
 800b33e:	bd90      	pop	{r4, r7, pc}

0800b340 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	000a      	movs	r2, r1
 800b34a:	1cfb      	adds	r3, r7, #3
 800b34c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	23b6      	movs	r3, #182	@ 0xb6
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	58d0      	ldr	r0, [r2, r3]
 800b356:	1cfb      	adds	r3, r7, #3
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	0013      	movs	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	189b      	adds	r3, r3, r2
 800b362:	00db      	lsls	r3, r3, #3
 800b364:	18cb      	adds	r3, r1, r3
 800b366:	3324      	adds	r3, #36	@ 0x24
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	1cfb      	adds	r3, r7, #3
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	0019      	movs	r1, r3
 800b370:	f7fe fd1e 	bl	8009db0 <USBD_LL_DataInStage>
}
 800b374:	46c0      	nop			@ (mov r8, r8)
 800b376:	46bd      	mov	sp, r7
 800b378:	b002      	add	sp, #8
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	23b6      	movs	r3, #182	@ 0xb6
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	58d3      	ldr	r3, [r2, r3]
 800b38c:	0018      	movs	r0, r3
 800b38e:	f7fe fe55 	bl	800a03c <USBD_LL_SOF>
}
 800b392:	46c0      	nop			@ (mov r8, r8)
 800b394:	46bd      	mov	sp, r7
 800b396:	b002      	add	sp, #8
 800b398:	bd80      	pop	{r7, pc}

0800b39a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b3a2:	230f      	movs	r3, #15
 800b3a4:	18fb      	adds	r3, r7, r3
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	795b      	ldrb	r3, [r3, #5]
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d001      	beq.n	800b3b6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800b3b2:	f7f5 fbd1 	bl	8000b58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	23b6      	movs	r3, #182	@ 0xb6
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	58d2      	ldr	r2, [r2, r3]
 800b3be:	230f      	movs	r3, #15
 800b3c0:	18fb      	adds	r3, r7, r3
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	0019      	movs	r1, r3
 800b3c6:	0010      	movs	r0, r2
 800b3c8:	f7fe fdf7 	bl	8009fba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	23b6      	movs	r3, #182	@ 0xb6
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	58d3      	ldr	r3, [r2, r3]
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	f7fe fda8 	bl	8009f2a <USBD_LL_Reset>
}
 800b3da:	46c0      	nop			@ (mov r8, r8)
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	b004      	add	sp, #16
 800b3e0:	bd80      	pop	{r7, pc}
	...

0800b3e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	23b6      	movs	r3, #182	@ 0xb6
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	58d3      	ldr	r3, [r2, r3]
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	f7fe fdf1 	bl	8009fdc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7a5b      	ldrb	r3, [r3, #9]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b402:	4b05      	ldr	r3, [pc, #20]	@ (800b418 <HAL_PCD_SuspendCallback+0x34>)
 800b404:	691a      	ldr	r2, [r3, #16]
 800b406:	4b04      	ldr	r3, [pc, #16]	@ (800b418 <HAL_PCD_SuspendCallback+0x34>)
 800b408:	2106      	movs	r1, #6
 800b40a:	430a      	orrs	r2, r1
 800b40c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800b40e:	46c0      	nop			@ (mov r8, r8)
 800b410:	46bd      	mov	sp, r7
 800b412:	b002      	add	sp, #8
 800b414:	bd80      	pop	{r7, pc}
 800b416:	46c0      	nop			@ (mov r8, r8)
 800b418:	e000ed00 	.word	0xe000ed00

0800b41c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	7a5b      	ldrb	r3, [r3, #9]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d007      	beq.n	800b43c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b42c:	4b09      	ldr	r3, [pc, #36]	@ (800b454 <HAL_PCD_ResumeCallback+0x38>)
 800b42e:	691a      	ldr	r2, [r3, #16]
 800b430:	4b08      	ldr	r3, [pc, #32]	@ (800b454 <HAL_PCD_ResumeCallback+0x38>)
 800b432:	2106      	movs	r1, #6
 800b434:	438a      	bics	r2, r1
 800b436:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800b438:	f000 fa42 	bl	800b8c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	23b6      	movs	r3, #182	@ 0xb6
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	58d3      	ldr	r3, [r2, r3]
 800b444:	0018      	movs	r0, r3
 800b446:	f7fe fde1 	bl	800a00c <USBD_LL_Resume>
}
 800b44a:	46c0      	nop			@ (mov r8, r8)
 800b44c:	46bd      	mov	sp, r7
 800b44e:	b002      	add	sp, #8
 800b450:	bd80      	pop	{r7, pc}
 800b452:	46c0      	nop			@ (mov r8, r8)
 800b454:	e000ed00 	.word	0xe000ed00

0800b458 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b460:	4a2d      	ldr	r2, [pc, #180]	@ (800b518 <USBD_LL_Init+0xc0>)
 800b462:	23b6      	movs	r3, #182	@ 0xb6
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	23b0      	movs	r3, #176	@ 0xb0
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4929      	ldr	r1, [pc, #164]	@ (800b518 <USBD_LL_Init+0xc0>)
 800b472:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800b474:	4b28      	ldr	r3, [pc, #160]	@ (800b518 <USBD_LL_Init+0xc0>)
 800b476:	4a29      	ldr	r2, [pc, #164]	@ (800b51c <USBD_LL_Init+0xc4>)
 800b478:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b47a:	4b27      	ldr	r3, [pc, #156]	@ (800b518 <USBD_LL_Init+0xc0>)
 800b47c:	2208      	movs	r2, #8
 800b47e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b480:	4b25      	ldr	r3, [pc, #148]	@ (800b518 <USBD_LL_Init+0xc0>)
 800b482:	2202      	movs	r2, #2
 800b484:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b486:	4b24      	ldr	r3, [pc, #144]	@ (800b518 <USBD_LL_Init+0xc0>)
 800b488:	2202      	movs	r2, #2
 800b48a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b48c:	4b22      	ldr	r3, [pc, #136]	@ (800b518 <USBD_LL_Init+0xc0>)
 800b48e:	2200      	movs	r2, #0
 800b490:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b492:	4b21      	ldr	r3, [pc, #132]	@ (800b518 <USBD_LL_Init+0xc0>)
 800b494:	2200      	movs	r2, #0
 800b496:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b498:	4b1f      	ldr	r3, [pc, #124]	@ (800b518 <USBD_LL_Init+0xc0>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b49e:	4b1e      	ldr	r3, [pc, #120]	@ (800b518 <USBD_LL_Init+0xc0>)
 800b4a0:	0018      	movs	r0, r3
 800b4a2:	f7f8 f891 	bl	80035c8 <HAL_PCD_Init>
 800b4a6:	1e03      	subs	r3, r0, #0
 800b4a8:	d001      	beq.n	800b4ae <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800b4aa:	f7f5 fb55 	bl	8000b58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	23b0      	movs	r3, #176	@ 0xb0
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	58d0      	ldr	r0, [r2, r3]
 800b4b6:	2318      	movs	r3, #24
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	f7f9 fe50 	bl	8005160 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	23b0      	movs	r3, #176	@ 0xb0
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	58d0      	ldr	r0, [r2, r3]
 800b4c8:	2358      	movs	r3, #88	@ 0x58
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2180      	movs	r1, #128	@ 0x80
 800b4ce:	f7f9 fe47 	bl	8005160 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	23b0      	movs	r3, #176	@ 0xb0
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	58d0      	ldr	r0, [r2, r3]
 800b4da:	23c0      	movs	r3, #192	@ 0xc0
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2181      	movs	r1, #129	@ 0x81
 800b4e0:	f7f9 fe3e 	bl	8005160 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	23b0      	movs	r3, #176	@ 0xb0
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	58d0      	ldr	r0, [r2, r3]
 800b4ec:	2388      	movs	r3, #136	@ 0x88
 800b4ee:	005b      	lsls	r3, r3, #1
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	f7f9 fe34 	bl	8005160 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	23b0      	movs	r3, #176	@ 0xb0
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	58d0      	ldr	r0, [r2, r3]
 800b500:	2380      	movs	r3, #128	@ 0x80
 800b502:	005b      	lsls	r3, r3, #1
 800b504:	2200      	movs	r2, #0
 800b506:	2182      	movs	r1, #130	@ 0x82
 800b508:	f7f9 fe2a 	bl	8005160 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	0018      	movs	r0, r3
 800b510:	46bd      	mov	sp, r7
 800b512:	b002      	add	sp, #8
 800b514:	bd80      	pop	{r7, pc}
 800b516:	46c0      	nop			@ (mov r8, r8)
 800b518:	200010ec 	.word	0x200010ec
 800b51c:	40005c00 	.word	0x40005c00

0800b520 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b528:	210f      	movs	r1, #15
 800b52a:	187b      	adds	r3, r7, r1
 800b52c:	2200      	movs	r2, #0
 800b52e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b530:	260e      	movs	r6, #14
 800b532:	19bb      	adds	r3, r7, r6
 800b534:	2200      	movs	r2, #0
 800b536:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	23b0      	movs	r3, #176	@ 0xb0
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	58d3      	ldr	r3, [r2, r3]
 800b540:	000d      	movs	r5, r1
 800b542:	187c      	adds	r4, r7, r1
 800b544:	0018      	movs	r0, r3
 800b546:	f7f8 f941 	bl	80037cc <HAL_PCD_Start>
 800b54a:	0003      	movs	r3, r0
 800b54c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b54e:	19bc      	adds	r4, r7, r6
 800b550:	197b      	adds	r3, r7, r5
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	0018      	movs	r0, r3
 800b556:	f000 f9ba 	bl	800b8ce <USBD_Get_USB_Status>
 800b55a:	0003      	movs	r3, r0
 800b55c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b55e:	19bb      	adds	r3, r7, r6
 800b560:	781b      	ldrb	r3, [r3, #0]
}
 800b562:	0018      	movs	r0, r3
 800b564:	46bd      	mov	sp, r7
 800b566:	b005      	add	sp, #20
 800b568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b56a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b56a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b56c:	b085      	sub	sp, #20
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
 800b572:	000c      	movs	r4, r1
 800b574:	0010      	movs	r0, r2
 800b576:	0019      	movs	r1, r3
 800b578:	1cfb      	adds	r3, r7, #3
 800b57a:	1c22      	adds	r2, r4, #0
 800b57c:	701a      	strb	r2, [r3, #0]
 800b57e:	1cbb      	adds	r3, r7, #2
 800b580:	1c02      	adds	r2, r0, #0
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	003b      	movs	r3, r7
 800b586:	1c0a      	adds	r2, r1, #0
 800b588:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b58a:	260f      	movs	r6, #15
 800b58c:	19bb      	adds	r3, r7, r6
 800b58e:	2200      	movs	r2, #0
 800b590:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b592:	250e      	movs	r5, #14
 800b594:	197b      	adds	r3, r7, r5
 800b596:	2200      	movs	r2, #0
 800b598:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	23b0      	movs	r3, #176	@ 0xb0
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	58d0      	ldr	r0, [r2, r3]
 800b5a2:	19bc      	adds	r4, r7, r6
 800b5a4:	1cbb      	adds	r3, r7, #2
 800b5a6:	781d      	ldrb	r5, [r3, #0]
 800b5a8:	003b      	movs	r3, r7
 800b5aa:	881a      	ldrh	r2, [r3, #0]
 800b5ac:	1cfb      	adds	r3, r7, #3
 800b5ae:	7819      	ldrb	r1, [r3, #0]
 800b5b0:	002b      	movs	r3, r5
 800b5b2:	f7f8 fa9f 	bl	8003af4 <HAL_PCD_EP_Open>
 800b5b6:	0003      	movs	r3, r0
 800b5b8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5ba:	250e      	movs	r5, #14
 800b5bc:	197c      	adds	r4, r7, r5
 800b5be:	19bb      	adds	r3, r7, r6
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	0018      	movs	r0, r3
 800b5c4:	f000 f983 	bl	800b8ce <USBD_Get_USB_Status>
 800b5c8:	0003      	movs	r3, r0
 800b5ca:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b5cc:	197b      	adds	r3, r7, r5
 800b5ce:	781b      	ldrb	r3, [r3, #0]
}
 800b5d0:	0018      	movs	r0, r3
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	b005      	add	sp, #20
 800b5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5d8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	000a      	movs	r2, r1
 800b5e2:	1cfb      	adds	r3, r7, #3
 800b5e4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e6:	210f      	movs	r1, #15
 800b5e8:	187b      	adds	r3, r7, r1
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5ee:	260e      	movs	r6, #14
 800b5f0:	19bb      	adds	r3, r7, r6
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	23b0      	movs	r3, #176	@ 0xb0
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	58d2      	ldr	r2, [r2, r3]
 800b5fe:	000d      	movs	r5, r1
 800b600:	187c      	adds	r4, r7, r1
 800b602:	1cfb      	adds	r3, r7, #3
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	0019      	movs	r1, r3
 800b608:	0010      	movs	r0, r2
 800b60a:	f7f8 fae2 	bl	8003bd2 <HAL_PCD_EP_Close>
 800b60e:	0003      	movs	r3, r0
 800b610:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b612:	19bc      	adds	r4, r7, r6
 800b614:	197b      	adds	r3, r7, r5
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	0018      	movs	r0, r3
 800b61a:	f000 f958 	bl	800b8ce <USBD_Get_USB_Status>
 800b61e:	0003      	movs	r3, r0
 800b620:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b622:	19bb      	adds	r3, r7, r6
 800b624:	781b      	ldrb	r3, [r3, #0]
}
 800b626:	0018      	movs	r0, r3
 800b628:	46bd      	mov	sp, r7
 800b62a:	b005      	add	sp, #20
 800b62c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b62e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b62e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b630:	b085      	sub	sp, #20
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	000a      	movs	r2, r1
 800b638:	1cfb      	adds	r3, r7, #3
 800b63a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63c:	210f      	movs	r1, #15
 800b63e:	187b      	adds	r3, r7, r1
 800b640:	2200      	movs	r2, #0
 800b642:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b644:	260e      	movs	r6, #14
 800b646:	19bb      	adds	r3, r7, r6
 800b648:	2200      	movs	r2, #0
 800b64a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	23b0      	movs	r3, #176	@ 0xb0
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	58d2      	ldr	r2, [r2, r3]
 800b654:	000d      	movs	r5, r1
 800b656:	187c      	adds	r4, r7, r1
 800b658:	1cfb      	adds	r3, r7, #3
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	0019      	movs	r1, r3
 800b65e:	0010      	movs	r0, r2
 800b660:	f7f8 fb94 	bl	8003d8c <HAL_PCD_EP_SetStall>
 800b664:	0003      	movs	r3, r0
 800b666:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b668:	19bc      	adds	r4, r7, r6
 800b66a:	197b      	adds	r3, r7, r5
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	0018      	movs	r0, r3
 800b670:	f000 f92d 	bl	800b8ce <USBD_Get_USB_Status>
 800b674:	0003      	movs	r3, r0
 800b676:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b678:	19bb      	adds	r3, r7, r6
 800b67a:	781b      	ldrb	r3, [r3, #0]
}
 800b67c:	0018      	movs	r0, r3
 800b67e:	46bd      	mov	sp, r7
 800b680:	b005      	add	sp, #20
 800b682:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b684 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	000a      	movs	r2, r1
 800b68e:	1cfb      	adds	r3, r7, #3
 800b690:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b692:	210f      	movs	r1, #15
 800b694:	187b      	adds	r3, r7, r1
 800b696:	2200      	movs	r2, #0
 800b698:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b69a:	260e      	movs	r6, #14
 800b69c:	19bb      	adds	r3, r7, r6
 800b69e:	2200      	movs	r2, #0
 800b6a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	23b0      	movs	r3, #176	@ 0xb0
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	58d2      	ldr	r2, [r2, r3]
 800b6aa:	000d      	movs	r5, r1
 800b6ac:	187c      	adds	r4, r7, r1
 800b6ae:	1cfb      	adds	r3, r7, #3
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	0019      	movs	r1, r3
 800b6b4:	0010      	movs	r0, r2
 800b6b6:	f7f8 fbc5 	bl	8003e44 <HAL_PCD_EP_ClrStall>
 800b6ba:	0003      	movs	r3, r0
 800b6bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6be:	19bc      	adds	r4, r7, r6
 800b6c0:	197b      	adds	r3, r7, r5
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	0018      	movs	r0, r3
 800b6c6:	f000 f902 	bl	800b8ce <USBD_Get_USB_Status>
 800b6ca:	0003      	movs	r3, r0
 800b6cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b6ce:	19bb      	adds	r3, r7, r6
 800b6d0:	781b      	ldrb	r3, [r3, #0]
}
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	b005      	add	sp, #20
 800b6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6da <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b084      	sub	sp, #16
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	000a      	movs	r2, r1
 800b6e4:	1cfb      	adds	r3, r7, #3
 800b6e6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	23b0      	movs	r3, #176	@ 0xb0
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	58d3      	ldr	r3, [r2, r3]
 800b6f0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b6f2:	1cfb      	adds	r3, r7, #3
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	b25b      	sxtb	r3, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	da0c      	bge.n	800b716 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b6fc:	1cfb      	adds	r3, r7, #3
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	227f      	movs	r2, #127	@ 0x7f
 800b702:	401a      	ands	r2, r3
 800b704:	68f9      	ldr	r1, [r7, #12]
 800b706:	0013      	movs	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	189b      	adds	r3, r3, r2
 800b70c:	00db      	lsls	r3, r3, #3
 800b70e:	18cb      	adds	r3, r1, r3
 800b710:	3312      	adds	r3, #18
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	e00d      	b.n	800b732 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b716:	1cfb      	adds	r3, r7, #3
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	227f      	movs	r2, #127	@ 0x7f
 800b71c:	401a      	ands	r2, r3
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	23a9      	movs	r3, #169	@ 0xa9
 800b722:	0059      	lsls	r1, r3, #1
 800b724:	0013      	movs	r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	189b      	adds	r3, r3, r2
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	18c3      	adds	r3, r0, r3
 800b72e:	185b      	adds	r3, r3, r1
 800b730:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b732:	0018      	movs	r0, r3
 800b734:	46bd      	mov	sp, r7
 800b736:	b004      	add	sp, #16
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b73a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b73c:	b085      	sub	sp, #20
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	000a      	movs	r2, r1
 800b744:	1cfb      	adds	r3, r7, #3
 800b746:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b748:	210f      	movs	r1, #15
 800b74a:	187b      	adds	r3, r7, r1
 800b74c:	2200      	movs	r2, #0
 800b74e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b750:	260e      	movs	r6, #14
 800b752:	19bb      	adds	r3, r7, r6
 800b754:	2200      	movs	r2, #0
 800b756:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	23b0      	movs	r3, #176	@ 0xb0
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	58d2      	ldr	r2, [r2, r3]
 800b760:	000d      	movs	r5, r1
 800b762:	187c      	adds	r4, r7, r1
 800b764:	1cfb      	adds	r3, r7, #3
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	0019      	movs	r1, r3
 800b76a:	0010      	movs	r0, r2
 800b76c:	f7f8 f998 	bl	8003aa0 <HAL_PCD_SetAddress>
 800b770:	0003      	movs	r3, r0
 800b772:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b774:	19bc      	adds	r4, r7, r6
 800b776:	197b      	adds	r3, r7, r5
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	0018      	movs	r0, r3
 800b77c:	f000 f8a7 	bl	800b8ce <USBD_Get_USB_Status>
 800b780:	0003      	movs	r3, r0
 800b782:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b784:	19bb      	adds	r3, r7, r6
 800b786:	781b      	ldrb	r3, [r3, #0]
}
 800b788:	0018      	movs	r0, r3
 800b78a:	46bd      	mov	sp, r7
 800b78c:	b005      	add	sp, #20
 800b78e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b790 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	0008      	movs	r0, r1
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	0019      	movs	r1, r3
 800b79e:	230b      	movs	r3, #11
 800b7a0:	18fb      	adds	r3, r7, r3
 800b7a2:	1c02      	adds	r2, r0, #0
 800b7a4:	701a      	strb	r2, [r3, #0]
 800b7a6:	2408      	movs	r4, #8
 800b7a8:	193b      	adds	r3, r7, r4
 800b7aa:	1c0a      	adds	r2, r1, #0
 800b7ac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ae:	2117      	movs	r1, #23
 800b7b0:	187b      	adds	r3, r7, r1
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b6:	2516      	movs	r5, #22
 800b7b8:	197b      	adds	r3, r7, r5
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	23b0      	movs	r3, #176	@ 0xb0
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	58d0      	ldr	r0, [r2, r3]
 800b7c6:	193b      	adds	r3, r7, r4
 800b7c8:	881d      	ldrh	r5, [r3, #0]
 800b7ca:	000e      	movs	r6, r1
 800b7cc:	187c      	adds	r4, r7, r1
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	230b      	movs	r3, #11
 800b7d2:	18fb      	adds	r3, r7, r3
 800b7d4:	7819      	ldrb	r1, [r3, #0]
 800b7d6:	002b      	movs	r3, r5
 800b7d8:	f7f8 fa9c 	bl	8003d14 <HAL_PCD_EP_Transmit>
 800b7dc:	0003      	movs	r3, r0
 800b7de:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7e0:	2516      	movs	r5, #22
 800b7e2:	197c      	adds	r4, r7, r5
 800b7e4:	19bb      	adds	r3, r7, r6
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f000 f870 	bl	800b8ce <USBD_Get_USB_Status>
 800b7ee:	0003      	movs	r3, r0
 800b7f0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b7f2:	197b      	adds	r3, r7, r5
 800b7f4:	781b      	ldrb	r3, [r3, #0]
}
 800b7f6:	0018      	movs	r0, r3
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	b007      	add	sp, #28
 800b7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7fe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b7fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b800:	b087      	sub	sp, #28
 800b802:	af00      	add	r7, sp, #0
 800b804:	60f8      	str	r0, [r7, #12]
 800b806:	0008      	movs	r0, r1
 800b808:	607a      	str	r2, [r7, #4]
 800b80a:	0019      	movs	r1, r3
 800b80c:	230b      	movs	r3, #11
 800b80e:	18fb      	adds	r3, r7, r3
 800b810:	1c02      	adds	r2, r0, #0
 800b812:	701a      	strb	r2, [r3, #0]
 800b814:	2408      	movs	r4, #8
 800b816:	193b      	adds	r3, r7, r4
 800b818:	1c0a      	adds	r2, r1, #0
 800b81a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b81c:	2117      	movs	r1, #23
 800b81e:	187b      	adds	r3, r7, r1
 800b820:	2200      	movs	r2, #0
 800b822:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b824:	2516      	movs	r5, #22
 800b826:	197b      	adds	r3, r7, r5
 800b828:	2200      	movs	r2, #0
 800b82a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	23b0      	movs	r3, #176	@ 0xb0
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	58d0      	ldr	r0, [r2, r3]
 800b834:	193b      	adds	r3, r7, r4
 800b836:	881d      	ldrh	r5, [r3, #0]
 800b838:	000e      	movs	r6, r1
 800b83a:	187c      	adds	r4, r7, r1
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	230b      	movs	r3, #11
 800b840:	18fb      	adds	r3, r7, r3
 800b842:	7819      	ldrb	r1, [r3, #0]
 800b844:	002b      	movs	r3, r5
 800b846:	f7f8 fa15 	bl	8003c74 <HAL_PCD_EP_Receive>
 800b84a:	0003      	movs	r3, r0
 800b84c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b84e:	2516      	movs	r5, #22
 800b850:	197c      	adds	r4, r7, r5
 800b852:	19bb      	adds	r3, r7, r6
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	0018      	movs	r0, r3
 800b858:	f000 f839 	bl	800b8ce <USBD_Get_USB_Status>
 800b85c:	0003      	movs	r3, r0
 800b85e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b860:	197b      	adds	r3, r7, r5
 800b862:	781b      	ldrb	r3, [r3, #0]
}
 800b864:	0018      	movs	r0, r3
 800b866:	46bd      	mov	sp, r7
 800b868:	b007      	add	sp, #28
 800b86a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b86c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	000a      	movs	r2, r1
 800b876:	1cfb      	adds	r3, r7, #3
 800b878:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	23b0      	movs	r3, #176	@ 0xb0
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	58d2      	ldr	r2, [r2, r3]
 800b882:	1cfb      	adds	r3, r7, #3
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	0019      	movs	r1, r3
 800b888:	0010      	movs	r0, r2
 800b88a:	f7f8 fa2a 	bl	8003ce2 <HAL_PCD_EP_GetRxCount>
 800b88e:	0003      	movs	r3, r0
}
 800b890:	0018      	movs	r0, r3
 800b892:	46bd      	mov	sp, r7
 800b894:	b002      	add	sp, #8
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b8a0:	4b02      	ldr	r3, [pc, #8]	@ (800b8ac <USBD_static_malloc+0x14>)
}
 800b8a2:	0018      	movs	r0, r3
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	b002      	add	sp, #8
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	46c0      	nop			@ (mov r8, r8)
 800b8ac:	200013c8 	.word	0x200013c8

0800b8b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]

}
 800b8b8:	46c0      	nop			@ (mov r8, r8)
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	b002      	add	sp, #8
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b8c4:	f7f4 fe6c 	bl	80005a0 <SystemClock_Config>
}
 800b8c8:	46c0      	nop			@ (mov r8, r8)
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b084      	sub	sp, #16
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	0002      	movs	r2, r0
 800b8d6:	1dfb      	adds	r3, r7, #7
 800b8d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8da:	230f      	movs	r3, #15
 800b8dc:	18fb      	adds	r3, r7, r3
 800b8de:	2200      	movs	r2, #0
 800b8e0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800b8e2:	1dfb      	adds	r3, r7, #7
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d017      	beq.n	800b91a <USBD_Get_USB_Status+0x4c>
 800b8ea:	dc1b      	bgt.n	800b924 <USBD_Get_USB_Status+0x56>
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d00f      	beq.n	800b910 <USBD_Get_USB_Status+0x42>
 800b8f0:	dc18      	bgt.n	800b924 <USBD_Get_USB_Status+0x56>
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d002      	beq.n	800b8fc <USBD_Get_USB_Status+0x2e>
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d005      	beq.n	800b906 <USBD_Get_USB_Status+0x38>
 800b8fa:	e013      	b.n	800b924 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b8fc:	230f      	movs	r3, #15
 800b8fe:	18fb      	adds	r3, r7, r3
 800b900:	2200      	movs	r2, #0
 800b902:	701a      	strb	r2, [r3, #0]
    break;
 800b904:	e013      	b.n	800b92e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b906:	230f      	movs	r3, #15
 800b908:	18fb      	adds	r3, r7, r3
 800b90a:	2202      	movs	r2, #2
 800b90c:	701a      	strb	r2, [r3, #0]
    break;
 800b90e:	e00e      	b.n	800b92e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b910:	230f      	movs	r3, #15
 800b912:	18fb      	adds	r3, r7, r3
 800b914:	2201      	movs	r2, #1
 800b916:	701a      	strb	r2, [r3, #0]
    break;
 800b918:	e009      	b.n	800b92e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b91a:	230f      	movs	r3, #15
 800b91c:	18fb      	adds	r3, r7, r3
 800b91e:	2202      	movs	r2, #2
 800b920:	701a      	strb	r2, [r3, #0]
    break;
 800b922:	e004      	b.n	800b92e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800b924:	230f      	movs	r3, #15
 800b926:	18fb      	adds	r3, r7, r3
 800b928:	2202      	movs	r2, #2
 800b92a:	701a      	strb	r2, [r3, #0]
    break;
 800b92c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800b92e:	230f      	movs	r3, #15
 800b930:	18fb      	adds	r3, r7, r3
 800b932:	781b      	ldrb	r3, [r3, #0]
}
 800b934:	0018      	movs	r0, r3
 800b936:	46bd      	mov	sp, r7
 800b938:	b004      	add	sp, #16
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <siprintf>:
 800b93c:	b40e      	push	{r1, r2, r3}
 800b93e:	b500      	push	{lr}
 800b940:	490b      	ldr	r1, [pc, #44]	@ (800b970 <siprintf+0x34>)
 800b942:	b09c      	sub	sp, #112	@ 0x70
 800b944:	ab1d      	add	r3, sp, #116	@ 0x74
 800b946:	9002      	str	r0, [sp, #8]
 800b948:	9006      	str	r0, [sp, #24]
 800b94a:	9107      	str	r1, [sp, #28]
 800b94c:	9104      	str	r1, [sp, #16]
 800b94e:	4809      	ldr	r0, [pc, #36]	@ (800b974 <siprintf+0x38>)
 800b950:	4909      	ldr	r1, [pc, #36]	@ (800b978 <siprintf+0x3c>)
 800b952:	cb04      	ldmia	r3!, {r2}
 800b954:	9105      	str	r1, [sp, #20]
 800b956:	6800      	ldr	r0, [r0, #0]
 800b958:	a902      	add	r1, sp, #8
 800b95a:	9301      	str	r3, [sp, #4]
 800b95c:	f000 f8ac 	bl	800bab8 <_svfiprintf_r>
 800b960:	2200      	movs	r2, #0
 800b962:	9b02      	ldr	r3, [sp, #8]
 800b964:	701a      	strb	r2, [r3, #0]
 800b966:	b01c      	add	sp, #112	@ 0x70
 800b968:	bc08      	pop	{r3}
 800b96a:	b003      	add	sp, #12
 800b96c:	4718      	bx	r3
 800b96e:	46c0      	nop			@ (mov r8, r8)
 800b970:	7fffffff 	.word	0x7fffffff
 800b974:	20000194 	.word	0x20000194
 800b978:	ffff0208 	.word	0xffff0208

0800b97c <memset>:
 800b97c:	0003      	movs	r3, r0
 800b97e:	1882      	adds	r2, r0, r2
 800b980:	4293      	cmp	r3, r2
 800b982:	d100      	bne.n	800b986 <memset+0xa>
 800b984:	4770      	bx	lr
 800b986:	7019      	strb	r1, [r3, #0]
 800b988:	3301      	adds	r3, #1
 800b98a:	e7f9      	b.n	800b980 <memset+0x4>

0800b98c <__errno>:
 800b98c:	4b01      	ldr	r3, [pc, #4]	@ (800b994 <__errno+0x8>)
 800b98e:	6818      	ldr	r0, [r3, #0]
 800b990:	4770      	bx	lr
 800b992:	46c0      	nop			@ (mov r8, r8)
 800b994:	20000194 	.word	0x20000194

0800b998 <__libc_init_array>:
 800b998:	b570      	push	{r4, r5, r6, lr}
 800b99a:	2600      	movs	r6, #0
 800b99c:	4c0c      	ldr	r4, [pc, #48]	@ (800b9d0 <__libc_init_array+0x38>)
 800b99e:	4d0d      	ldr	r5, [pc, #52]	@ (800b9d4 <__libc_init_array+0x3c>)
 800b9a0:	1b64      	subs	r4, r4, r5
 800b9a2:	10a4      	asrs	r4, r4, #2
 800b9a4:	42a6      	cmp	r6, r4
 800b9a6:	d109      	bne.n	800b9bc <__libc_init_array+0x24>
 800b9a8:	2600      	movs	r6, #0
 800b9aa:	f000 fc65 	bl	800c278 <_init>
 800b9ae:	4c0a      	ldr	r4, [pc, #40]	@ (800b9d8 <__libc_init_array+0x40>)
 800b9b0:	4d0a      	ldr	r5, [pc, #40]	@ (800b9dc <__libc_init_array+0x44>)
 800b9b2:	1b64      	subs	r4, r4, r5
 800b9b4:	10a4      	asrs	r4, r4, #2
 800b9b6:	42a6      	cmp	r6, r4
 800b9b8:	d105      	bne.n	800b9c6 <__libc_init_array+0x2e>
 800b9ba:	bd70      	pop	{r4, r5, r6, pc}
 800b9bc:	00b3      	lsls	r3, r6, #2
 800b9be:	58eb      	ldr	r3, [r5, r3]
 800b9c0:	4798      	blx	r3
 800b9c2:	3601      	adds	r6, #1
 800b9c4:	e7ee      	b.n	800b9a4 <__libc_init_array+0xc>
 800b9c6:	00b3      	lsls	r3, r6, #2
 800b9c8:	58eb      	ldr	r3, [r5, r3]
 800b9ca:	4798      	blx	r3
 800b9cc:	3601      	adds	r6, #1
 800b9ce:	e7f2      	b.n	800b9b6 <__libc_init_array+0x1e>
 800b9d0:	0800c708 	.word	0x0800c708
 800b9d4:	0800c708 	.word	0x0800c708
 800b9d8:	0800c70c 	.word	0x0800c70c
 800b9dc:	0800c708 	.word	0x0800c708

0800b9e0 <__retarget_lock_acquire_recursive>:
 800b9e0:	4770      	bx	lr

0800b9e2 <__retarget_lock_release_recursive>:
 800b9e2:	4770      	bx	lr

0800b9e4 <memcpy>:
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	b510      	push	{r4, lr}
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d100      	bne.n	800b9ee <memcpy+0xa>
 800b9ec:	bd10      	pop	{r4, pc}
 800b9ee:	5ccc      	ldrb	r4, [r1, r3]
 800b9f0:	54c4      	strb	r4, [r0, r3]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	e7f8      	b.n	800b9e8 <memcpy+0x4>
	...

0800b9f8 <__ssputs_r>:
 800b9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9fa:	688e      	ldr	r6, [r1, #8]
 800b9fc:	b085      	sub	sp, #20
 800b9fe:	001f      	movs	r7, r3
 800ba00:	000c      	movs	r4, r1
 800ba02:	680b      	ldr	r3, [r1, #0]
 800ba04:	9002      	str	r0, [sp, #8]
 800ba06:	9203      	str	r2, [sp, #12]
 800ba08:	42be      	cmp	r6, r7
 800ba0a:	d830      	bhi.n	800ba6e <__ssputs_r+0x76>
 800ba0c:	210c      	movs	r1, #12
 800ba0e:	5e62      	ldrsh	r2, [r4, r1]
 800ba10:	2190      	movs	r1, #144	@ 0x90
 800ba12:	00c9      	lsls	r1, r1, #3
 800ba14:	420a      	tst	r2, r1
 800ba16:	d028      	beq.n	800ba6a <__ssputs_r+0x72>
 800ba18:	2003      	movs	r0, #3
 800ba1a:	6921      	ldr	r1, [r4, #16]
 800ba1c:	1a5b      	subs	r3, r3, r1
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	6963      	ldr	r3, [r4, #20]
 800ba22:	4343      	muls	r3, r0
 800ba24:	9801      	ldr	r0, [sp, #4]
 800ba26:	0fdd      	lsrs	r5, r3, #31
 800ba28:	18ed      	adds	r5, r5, r3
 800ba2a:	1c7b      	adds	r3, r7, #1
 800ba2c:	181b      	adds	r3, r3, r0
 800ba2e:	106d      	asrs	r5, r5, #1
 800ba30:	42ab      	cmp	r3, r5
 800ba32:	d900      	bls.n	800ba36 <__ssputs_r+0x3e>
 800ba34:	001d      	movs	r5, r3
 800ba36:	0552      	lsls	r2, r2, #21
 800ba38:	d528      	bpl.n	800ba8c <__ssputs_r+0x94>
 800ba3a:	0029      	movs	r1, r5
 800ba3c:	9802      	ldr	r0, [sp, #8]
 800ba3e:	f000 f95b 	bl	800bcf8 <_malloc_r>
 800ba42:	1e06      	subs	r6, r0, #0
 800ba44:	d02c      	beq.n	800baa0 <__ssputs_r+0xa8>
 800ba46:	9a01      	ldr	r2, [sp, #4]
 800ba48:	6921      	ldr	r1, [r4, #16]
 800ba4a:	f7ff ffcb 	bl	800b9e4 <memcpy>
 800ba4e:	89a2      	ldrh	r2, [r4, #12]
 800ba50:	4b18      	ldr	r3, [pc, #96]	@ (800bab4 <__ssputs_r+0xbc>)
 800ba52:	401a      	ands	r2, r3
 800ba54:	2380      	movs	r3, #128	@ 0x80
 800ba56:	4313      	orrs	r3, r2
 800ba58:	81a3      	strh	r3, [r4, #12]
 800ba5a:	9b01      	ldr	r3, [sp, #4]
 800ba5c:	6126      	str	r6, [r4, #16]
 800ba5e:	18f6      	adds	r6, r6, r3
 800ba60:	6026      	str	r6, [r4, #0]
 800ba62:	003e      	movs	r6, r7
 800ba64:	6165      	str	r5, [r4, #20]
 800ba66:	1aed      	subs	r5, r5, r3
 800ba68:	60a5      	str	r5, [r4, #8]
 800ba6a:	42be      	cmp	r6, r7
 800ba6c:	d900      	bls.n	800ba70 <__ssputs_r+0x78>
 800ba6e:	003e      	movs	r6, r7
 800ba70:	0032      	movs	r2, r6
 800ba72:	9903      	ldr	r1, [sp, #12]
 800ba74:	6820      	ldr	r0, [r4, #0]
 800ba76:	f000 fb7c 	bl	800c172 <memmove>
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	68a3      	ldr	r3, [r4, #8]
 800ba7e:	1b9b      	subs	r3, r3, r6
 800ba80:	60a3      	str	r3, [r4, #8]
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	199b      	adds	r3, r3, r6
 800ba86:	6023      	str	r3, [r4, #0]
 800ba88:	b005      	add	sp, #20
 800ba8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba8c:	002a      	movs	r2, r5
 800ba8e:	9802      	ldr	r0, [sp, #8]
 800ba90:	f000 fb40 	bl	800c114 <_realloc_r>
 800ba94:	1e06      	subs	r6, r0, #0
 800ba96:	d1e0      	bne.n	800ba5a <__ssputs_r+0x62>
 800ba98:	6921      	ldr	r1, [r4, #16]
 800ba9a:	9802      	ldr	r0, [sp, #8]
 800ba9c:	f000 fb9a 	bl	800c1d4 <_free_r>
 800baa0:	230c      	movs	r3, #12
 800baa2:	2001      	movs	r0, #1
 800baa4:	9a02      	ldr	r2, [sp, #8]
 800baa6:	4240      	negs	r0, r0
 800baa8:	6013      	str	r3, [r2, #0]
 800baaa:	89a2      	ldrh	r2, [r4, #12]
 800baac:	3334      	adds	r3, #52	@ 0x34
 800baae:	4313      	orrs	r3, r2
 800bab0:	81a3      	strh	r3, [r4, #12]
 800bab2:	e7e9      	b.n	800ba88 <__ssputs_r+0x90>
 800bab4:	fffffb7f 	.word	0xfffffb7f

0800bab8 <_svfiprintf_r>:
 800bab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baba:	b0a1      	sub	sp, #132	@ 0x84
 800babc:	9003      	str	r0, [sp, #12]
 800babe:	001d      	movs	r5, r3
 800bac0:	898b      	ldrh	r3, [r1, #12]
 800bac2:	000f      	movs	r7, r1
 800bac4:	0016      	movs	r6, r2
 800bac6:	061b      	lsls	r3, r3, #24
 800bac8:	d511      	bpl.n	800baee <_svfiprintf_r+0x36>
 800baca:	690b      	ldr	r3, [r1, #16]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10e      	bne.n	800baee <_svfiprintf_r+0x36>
 800bad0:	2140      	movs	r1, #64	@ 0x40
 800bad2:	f000 f911 	bl	800bcf8 <_malloc_r>
 800bad6:	6038      	str	r0, [r7, #0]
 800bad8:	6138      	str	r0, [r7, #16]
 800bada:	2800      	cmp	r0, #0
 800badc:	d105      	bne.n	800baea <_svfiprintf_r+0x32>
 800bade:	230c      	movs	r3, #12
 800bae0:	9a03      	ldr	r2, [sp, #12]
 800bae2:	6013      	str	r3, [r2, #0]
 800bae4:	2001      	movs	r0, #1
 800bae6:	4240      	negs	r0, r0
 800bae8:	e0cf      	b.n	800bc8a <_svfiprintf_r+0x1d2>
 800baea:	2340      	movs	r3, #64	@ 0x40
 800baec:	617b      	str	r3, [r7, #20]
 800baee:	2300      	movs	r3, #0
 800baf0:	ac08      	add	r4, sp, #32
 800baf2:	6163      	str	r3, [r4, #20]
 800baf4:	3320      	adds	r3, #32
 800baf6:	7663      	strb	r3, [r4, #25]
 800baf8:	3310      	adds	r3, #16
 800bafa:	76a3      	strb	r3, [r4, #26]
 800bafc:	9507      	str	r5, [sp, #28]
 800bafe:	0035      	movs	r5, r6
 800bb00:	782b      	ldrb	r3, [r5, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <_svfiprintf_r+0x52>
 800bb06:	2b25      	cmp	r3, #37	@ 0x25
 800bb08:	d148      	bne.n	800bb9c <_svfiprintf_r+0xe4>
 800bb0a:	1bab      	subs	r3, r5, r6
 800bb0c:	9305      	str	r3, [sp, #20]
 800bb0e:	42b5      	cmp	r5, r6
 800bb10:	d00b      	beq.n	800bb2a <_svfiprintf_r+0x72>
 800bb12:	0032      	movs	r2, r6
 800bb14:	0039      	movs	r1, r7
 800bb16:	9803      	ldr	r0, [sp, #12]
 800bb18:	f7ff ff6e 	bl	800b9f8 <__ssputs_r>
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	d100      	bne.n	800bb22 <_svfiprintf_r+0x6a>
 800bb20:	e0ae      	b.n	800bc80 <_svfiprintf_r+0x1c8>
 800bb22:	6963      	ldr	r3, [r4, #20]
 800bb24:	9a05      	ldr	r2, [sp, #20]
 800bb26:	189b      	adds	r3, r3, r2
 800bb28:	6163      	str	r3, [r4, #20]
 800bb2a:	782b      	ldrb	r3, [r5, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d100      	bne.n	800bb32 <_svfiprintf_r+0x7a>
 800bb30:	e0a6      	b.n	800bc80 <_svfiprintf_r+0x1c8>
 800bb32:	2201      	movs	r2, #1
 800bb34:	2300      	movs	r3, #0
 800bb36:	4252      	negs	r2, r2
 800bb38:	6062      	str	r2, [r4, #4]
 800bb3a:	a904      	add	r1, sp, #16
 800bb3c:	3254      	adds	r2, #84	@ 0x54
 800bb3e:	1852      	adds	r2, r2, r1
 800bb40:	1c6e      	adds	r6, r5, #1
 800bb42:	6023      	str	r3, [r4, #0]
 800bb44:	60e3      	str	r3, [r4, #12]
 800bb46:	60a3      	str	r3, [r4, #8]
 800bb48:	7013      	strb	r3, [r2, #0]
 800bb4a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bb4c:	4b54      	ldr	r3, [pc, #336]	@ (800bca0 <_svfiprintf_r+0x1e8>)
 800bb4e:	2205      	movs	r2, #5
 800bb50:	0018      	movs	r0, r3
 800bb52:	7831      	ldrb	r1, [r6, #0]
 800bb54:	9305      	str	r3, [sp, #20]
 800bb56:	f000 fb31 	bl	800c1bc <memchr>
 800bb5a:	1c75      	adds	r5, r6, #1
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d11f      	bne.n	800bba0 <_svfiprintf_r+0xe8>
 800bb60:	6822      	ldr	r2, [r4, #0]
 800bb62:	06d3      	lsls	r3, r2, #27
 800bb64:	d504      	bpl.n	800bb70 <_svfiprintf_r+0xb8>
 800bb66:	2353      	movs	r3, #83	@ 0x53
 800bb68:	a904      	add	r1, sp, #16
 800bb6a:	185b      	adds	r3, r3, r1
 800bb6c:	2120      	movs	r1, #32
 800bb6e:	7019      	strb	r1, [r3, #0]
 800bb70:	0713      	lsls	r3, r2, #28
 800bb72:	d504      	bpl.n	800bb7e <_svfiprintf_r+0xc6>
 800bb74:	2353      	movs	r3, #83	@ 0x53
 800bb76:	a904      	add	r1, sp, #16
 800bb78:	185b      	adds	r3, r3, r1
 800bb7a:	212b      	movs	r1, #43	@ 0x2b
 800bb7c:	7019      	strb	r1, [r3, #0]
 800bb7e:	7833      	ldrb	r3, [r6, #0]
 800bb80:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb82:	d016      	beq.n	800bbb2 <_svfiprintf_r+0xfa>
 800bb84:	0035      	movs	r5, r6
 800bb86:	2100      	movs	r1, #0
 800bb88:	200a      	movs	r0, #10
 800bb8a:	68e3      	ldr	r3, [r4, #12]
 800bb8c:	782a      	ldrb	r2, [r5, #0]
 800bb8e:	1c6e      	adds	r6, r5, #1
 800bb90:	3a30      	subs	r2, #48	@ 0x30
 800bb92:	2a09      	cmp	r2, #9
 800bb94:	d950      	bls.n	800bc38 <_svfiprintf_r+0x180>
 800bb96:	2900      	cmp	r1, #0
 800bb98:	d111      	bne.n	800bbbe <_svfiprintf_r+0x106>
 800bb9a:	e017      	b.n	800bbcc <_svfiprintf_r+0x114>
 800bb9c:	3501      	adds	r5, #1
 800bb9e:	e7af      	b.n	800bb00 <_svfiprintf_r+0x48>
 800bba0:	9b05      	ldr	r3, [sp, #20]
 800bba2:	6822      	ldr	r2, [r4, #0]
 800bba4:	1ac0      	subs	r0, r0, r3
 800bba6:	2301      	movs	r3, #1
 800bba8:	4083      	lsls	r3, r0
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	002e      	movs	r6, r5
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	e7cc      	b.n	800bb4c <_svfiprintf_r+0x94>
 800bbb2:	9b07      	ldr	r3, [sp, #28]
 800bbb4:	1d19      	adds	r1, r3, #4
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	9107      	str	r1, [sp, #28]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	db01      	blt.n	800bbc2 <_svfiprintf_r+0x10a>
 800bbbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbc0:	e004      	b.n	800bbcc <_svfiprintf_r+0x114>
 800bbc2:	425b      	negs	r3, r3
 800bbc4:	60e3      	str	r3, [r4, #12]
 800bbc6:	2302      	movs	r3, #2
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	6023      	str	r3, [r4, #0]
 800bbcc:	782b      	ldrb	r3, [r5, #0]
 800bbce:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbd0:	d10c      	bne.n	800bbec <_svfiprintf_r+0x134>
 800bbd2:	786b      	ldrb	r3, [r5, #1]
 800bbd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbd6:	d134      	bne.n	800bc42 <_svfiprintf_r+0x18a>
 800bbd8:	9b07      	ldr	r3, [sp, #28]
 800bbda:	3502      	adds	r5, #2
 800bbdc:	1d1a      	adds	r2, r3, #4
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	9207      	str	r2, [sp, #28]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	da01      	bge.n	800bbea <_svfiprintf_r+0x132>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	425b      	negs	r3, r3
 800bbea:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbec:	4e2d      	ldr	r6, [pc, #180]	@ (800bca4 <_svfiprintf_r+0x1ec>)
 800bbee:	2203      	movs	r2, #3
 800bbf0:	0030      	movs	r0, r6
 800bbf2:	7829      	ldrb	r1, [r5, #0]
 800bbf4:	f000 fae2 	bl	800c1bc <memchr>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d006      	beq.n	800bc0a <_svfiprintf_r+0x152>
 800bbfc:	2340      	movs	r3, #64	@ 0x40
 800bbfe:	1b80      	subs	r0, r0, r6
 800bc00:	4083      	lsls	r3, r0
 800bc02:	6822      	ldr	r2, [r4, #0]
 800bc04:	3501      	adds	r5, #1
 800bc06:	4313      	orrs	r3, r2
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	7829      	ldrb	r1, [r5, #0]
 800bc0c:	2206      	movs	r2, #6
 800bc0e:	4826      	ldr	r0, [pc, #152]	@ (800bca8 <_svfiprintf_r+0x1f0>)
 800bc10:	1c6e      	adds	r6, r5, #1
 800bc12:	7621      	strb	r1, [r4, #24]
 800bc14:	f000 fad2 	bl	800c1bc <memchr>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d038      	beq.n	800bc8e <_svfiprintf_r+0x1d6>
 800bc1c:	4b23      	ldr	r3, [pc, #140]	@ (800bcac <_svfiprintf_r+0x1f4>)
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d122      	bne.n	800bc68 <_svfiprintf_r+0x1b0>
 800bc22:	2207      	movs	r2, #7
 800bc24:	9b07      	ldr	r3, [sp, #28]
 800bc26:	3307      	adds	r3, #7
 800bc28:	4393      	bics	r3, r2
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	9307      	str	r3, [sp, #28]
 800bc2e:	6963      	ldr	r3, [r4, #20]
 800bc30:	9a04      	ldr	r2, [sp, #16]
 800bc32:	189b      	adds	r3, r3, r2
 800bc34:	6163      	str	r3, [r4, #20]
 800bc36:	e762      	b.n	800bafe <_svfiprintf_r+0x46>
 800bc38:	4343      	muls	r3, r0
 800bc3a:	0035      	movs	r5, r6
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	189b      	adds	r3, r3, r2
 800bc40:	e7a4      	b.n	800bb8c <_svfiprintf_r+0xd4>
 800bc42:	2300      	movs	r3, #0
 800bc44:	200a      	movs	r0, #10
 800bc46:	0019      	movs	r1, r3
 800bc48:	3501      	adds	r5, #1
 800bc4a:	6063      	str	r3, [r4, #4]
 800bc4c:	782a      	ldrb	r2, [r5, #0]
 800bc4e:	1c6e      	adds	r6, r5, #1
 800bc50:	3a30      	subs	r2, #48	@ 0x30
 800bc52:	2a09      	cmp	r2, #9
 800bc54:	d903      	bls.n	800bc5e <_svfiprintf_r+0x1a6>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0c8      	beq.n	800bbec <_svfiprintf_r+0x134>
 800bc5a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc5c:	e7c6      	b.n	800bbec <_svfiprintf_r+0x134>
 800bc5e:	4341      	muls	r1, r0
 800bc60:	0035      	movs	r5, r6
 800bc62:	2301      	movs	r3, #1
 800bc64:	1889      	adds	r1, r1, r2
 800bc66:	e7f1      	b.n	800bc4c <_svfiprintf_r+0x194>
 800bc68:	aa07      	add	r2, sp, #28
 800bc6a:	9200      	str	r2, [sp, #0]
 800bc6c:	0021      	movs	r1, r4
 800bc6e:	003a      	movs	r2, r7
 800bc70:	4b0f      	ldr	r3, [pc, #60]	@ (800bcb0 <_svfiprintf_r+0x1f8>)
 800bc72:	9803      	ldr	r0, [sp, #12]
 800bc74:	e000      	b.n	800bc78 <_svfiprintf_r+0x1c0>
 800bc76:	bf00      	nop
 800bc78:	9004      	str	r0, [sp, #16]
 800bc7a:	9b04      	ldr	r3, [sp, #16]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	d1d6      	bne.n	800bc2e <_svfiprintf_r+0x176>
 800bc80:	89bb      	ldrh	r3, [r7, #12]
 800bc82:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800bc84:	065b      	lsls	r3, r3, #25
 800bc86:	d500      	bpl.n	800bc8a <_svfiprintf_r+0x1d2>
 800bc88:	e72c      	b.n	800bae4 <_svfiprintf_r+0x2c>
 800bc8a:	b021      	add	sp, #132	@ 0x84
 800bc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc8e:	aa07      	add	r2, sp, #28
 800bc90:	9200      	str	r2, [sp, #0]
 800bc92:	0021      	movs	r1, r4
 800bc94:	003a      	movs	r2, r7
 800bc96:	4b06      	ldr	r3, [pc, #24]	@ (800bcb0 <_svfiprintf_r+0x1f8>)
 800bc98:	9803      	ldr	r0, [sp, #12]
 800bc9a:	f000 f91d 	bl	800bed8 <_printf_i>
 800bc9e:	e7eb      	b.n	800bc78 <_svfiprintf_r+0x1c0>
 800bca0:	0800c6d4 	.word	0x0800c6d4
 800bca4:	0800c6da 	.word	0x0800c6da
 800bca8:	0800c6de 	.word	0x0800c6de
 800bcac:	00000000 	.word	0x00000000
 800bcb0:	0800b9f9 	.word	0x0800b9f9

0800bcb4 <sbrk_aligned>:
 800bcb4:	b570      	push	{r4, r5, r6, lr}
 800bcb6:	4e0f      	ldr	r6, [pc, #60]	@ (800bcf4 <sbrk_aligned+0x40>)
 800bcb8:	000d      	movs	r5, r1
 800bcba:	6831      	ldr	r1, [r6, #0]
 800bcbc:	0004      	movs	r4, r0
 800bcbe:	2900      	cmp	r1, #0
 800bcc0:	d102      	bne.n	800bcc8 <sbrk_aligned+0x14>
 800bcc2:	f000 fa69 	bl	800c198 <_sbrk_r>
 800bcc6:	6030      	str	r0, [r6, #0]
 800bcc8:	0029      	movs	r1, r5
 800bcca:	0020      	movs	r0, r4
 800bccc:	f000 fa64 	bl	800c198 <_sbrk_r>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d103      	bne.n	800bcdc <sbrk_aligned+0x28>
 800bcd4:	2501      	movs	r5, #1
 800bcd6:	426d      	negs	r5, r5
 800bcd8:	0028      	movs	r0, r5
 800bcda:	bd70      	pop	{r4, r5, r6, pc}
 800bcdc:	2303      	movs	r3, #3
 800bcde:	1cc5      	adds	r5, r0, #3
 800bce0:	439d      	bics	r5, r3
 800bce2:	42a8      	cmp	r0, r5
 800bce4:	d0f8      	beq.n	800bcd8 <sbrk_aligned+0x24>
 800bce6:	1a29      	subs	r1, r5, r0
 800bce8:	0020      	movs	r0, r4
 800bcea:	f000 fa55 	bl	800c198 <_sbrk_r>
 800bcee:	3001      	adds	r0, #1
 800bcf0:	d1f2      	bne.n	800bcd8 <sbrk_aligned+0x24>
 800bcf2:	e7ef      	b.n	800bcd4 <sbrk_aligned+0x20>
 800bcf4:	20001724 	.word	0x20001724

0800bcf8 <_malloc_r>:
 800bcf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcfa:	2203      	movs	r2, #3
 800bcfc:	1ccb      	adds	r3, r1, #3
 800bcfe:	4393      	bics	r3, r2
 800bd00:	3308      	adds	r3, #8
 800bd02:	0005      	movs	r5, r0
 800bd04:	001f      	movs	r7, r3
 800bd06:	2b0c      	cmp	r3, #12
 800bd08:	d234      	bcs.n	800bd74 <_malloc_r+0x7c>
 800bd0a:	270c      	movs	r7, #12
 800bd0c:	42b9      	cmp	r1, r7
 800bd0e:	d833      	bhi.n	800bd78 <_malloc_r+0x80>
 800bd10:	0028      	movs	r0, r5
 800bd12:	f000 f9ef 	bl	800c0f4 <__malloc_lock>
 800bd16:	4e37      	ldr	r6, [pc, #220]	@ (800bdf4 <_malloc_r+0xfc>)
 800bd18:	6833      	ldr	r3, [r6, #0]
 800bd1a:	001c      	movs	r4, r3
 800bd1c:	2c00      	cmp	r4, #0
 800bd1e:	d12f      	bne.n	800bd80 <_malloc_r+0x88>
 800bd20:	0039      	movs	r1, r7
 800bd22:	0028      	movs	r0, r5
 800bd24:	f7ff ffc6 	bl	800bcb4 <sbrk_aligned>
 800bd28:	0004      	movs	r4, r0
 800bd2a:	1c43      	adds	r3, r0, #1
 800bd2c:	d15f      	bne.n	800bdee <_malloc_r+0xf6>
 800bd2e:	6834      	ldr	r4, [r6, #0]
 800bd30:	9400      	str	r4, [sp, #0]
 800bd32:	9b00      	ldr	r3, [sp, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d14a      	bne.n	800bdce <_malloc_r+0xd6>
 800bd38:	2c00      	cmp	r4, #0
 800bd3a:	d052      	beq.n	800bde2 <_malloc_r+0xea>
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	0028      	movs	r0, r5
 800bd40:	18e3      	adds	r3, r4, r3
 800bd42:	9900      	ldr	r1, [sp, #0]
 800bd44:	9301      	str	r3, [sp, #4]
 800bd46:	f000 fa27 	bl	800c198 <_sbrk_r>
 800bd4a:	9b01      	ldr	r3, [sp, #4]
 800bd4c:	4283      	cmp	r3, r0
 800bd4e:	d148      	bne.n	800bde2 <_malloc_r+0xea>
 800bd50:	6823      	ldr	r3, [r4, #0]
 800bd52:	0028      	movs	r0, r5
 800bd54:	1aff      	subs	r7, r7, r3
 800bd56:	0039      	movs	r1, r7
 800bd58:	f7ff ffac 	bl	800bcb4 <sbrk_aligned>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d040      	beq.n	800bde2 <_malloc_r+0xea>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	19db      	adds	r3, r3, r7
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	6833      	ldr	r3, [r6, #0]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	2a00      	cmp	r2, #0
 800bd6c:	d133      	bne.n	800bdd6 <_malloc_r+0xde>
 800bd6e:	9b00      	ldr	r3, [sp, #0]
 800bd70:	6033      	str	r3, [r6, #0]
 800bd72:	e019      	b.n	800bda8 <_malloc_r+0xb0>
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	dac9      	bge.n	800bd0c <_malloc_r+0x14>
 800bd78:	230c      	movs	r3, #12
 800bd7a:	602b      	str	r3, [r5, #0]
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd80:	6821      	ldr	r1, [r4, #0]
 800bd82:	1bc9      	subs	r1, r1, r7
 800bd84:	d420      	bmi.n	800bdc8 <_malloc_r+0xd0>
 800bd86:	290b      	cmp	r1, #11
 800bd88:	d90a      	bls.n	800bda0 <_malloc_r+0xa8>
 800bd8a:	19e2      	adds	r2, r4, r7
 800bd8c:	6027      	str	r7, [r4, #0]
 800bd8e:	42a3      	cmp	r3, r4
 800bd90:	d104      	bne.n	800bd9c <_malloc_r+0xa4>
 800bd92:	6032      	str	r2, [r6, #0]
 800bd94:	6863      	ldr	r3, [r4, #4]
 800bd96:	6011      	str	r1, [r2, #0]
 800bd98:	6053      	str	r3, [r2, #4]
 800bd9a:	e005      	b.n	800bda8 <_malloc_r+0xb0>
 800bd9c:	605a      	str	r2, [r3, #4]
 800bd9e:	e7f9      	b.n	800bd94 <_malloc_r+0x9c>
 800bda0:	6862      	ldr	r2, [r4, #4]
 800bda2:	42a3      	cmp	r3, r4
 800bda4:	d10e      	bne.n	800bdc4 <_malloc_r+0xcc>
 800bda6:	6032      	str	r2, [r6, #0]
 800bda8:	0028      	movs	r0, r5
 800bdaa:	f000 f9ab 	bl	800c104 <__malloc_unlock>
 800bdae:	0020      	movs	r0, r4
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	300b      	adds	r0, #11
 800bdb4:	1d23      	adds	r3, r4, #4
 800bdb6:	4390      	bics	r0, r2
 800bdb8:	1ac2      	subs	r2, r0, r3
 800bdba:	4298      	cmp	r0, r3
 800bdbc:	d0df      	beq.n	800bd7e <_malloc_r+0x86>
 800bdbe:	1a1b      	subs	r3, r3, r0
 800bdc0:	50a3      	str	r3, [r4, r2]
 800bdc2:	e7dc      	b.n	800bd7e <_malloc_r+0x86>
 800bdc4:	605a      	str	r2, [r3, #4]
 800bdc6:	e7ef      	b.n	800bda8 <_malloc_r+0xb0>
 800bdc8:	0023      	movs	r3, r4
 800bdca:	6864      	ldr	r4, [r4, #4]
 800bdcc:	e7a6      	b.n	800bd1c <_malloc_r+0x24>
 800bdce:	9c00      	ldr	r4, [sp, #0]
 800bdd0:	6863      	ldr	r3, [r4, #4]
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	e7ad      	b.n	800bd32 <_malloc_r+0x3a>
 800bdd6:	001a      	movs	r2, r3
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	42a3      	cmp	r3, r4
 800bddc:	d1fb      	bne.n	800bdd6 <_malloc_r+0xde>
 800bdde:	2300      	movs	r3, #0
 800bde0:	e7da      	b.n	800bd98 <_malloc_r+0xa0>
 800bde2:	230c      	movs	r3, #12
 800bde4:	0028      	movs	r0, r5
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	f000 f98c 	bl	800c104 <__malloc_unlock>
 800bdec:	e7c6      	b.n	800bd7c <_malloc_r+0x84>
 800bdee:	6007      	str	r7, [r0, #0]
 800bdf0:	e7da      	b.n	800bda8 <_malloc_r+0xb0>
 800bdf2:	46c0      	nop			@ (mov r8, r8)
 800bdf4:	20001728 	.word	0x20001728

0800bdf8 <_printf_common>:
 800bdf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdfa:	0016      	movs	r6, r2
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	688a      	ldr	r2, [r1, #8]
 800be00:	690b      	ldr	r3, [r1, #16]
 800be02:	000c      	movs	r4, r1
 800be04:	9000      	str	r0, [sp, #0]
 800be06:	4293      	cmp	r3, r2
 800be08:	da00      	bge.n	800be0c <_printf_common+0x14>
 800be0a:	0013      	movs	r3, r2
 800be0c:	0022      	movs	r2, r4
 800be0e:	6033      	str	r3, [r6, #0]
 800be10:	3243      	adds	r2, #67	@ 0x43
 800be12:	7812      	ldrb	r2, [r2, #0]
 800be14:	2a00      	cmp	r2, #0
 800be16:	d001      	beq.n	800be1c <_printf_common+0x24>
 800be18:	3301      	adds	r3, #1
 800be1a:	6033      	str	r3, [r6, #0]
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	069b      	lsls	r3, r3, #26
 800be20:	d502      	bpl.n	800be28 <_printf_common+0x30>
 800be22:	6833      	ldr	r3, [r6, #0]
 800be24:	3302      	adds	r3, #2
 800be26:	6033      	str	r3, [r6, #0]
 800be28:	6822      	ldr	r2, [r4, #0]
 800be2a:	2306      	movs	r3, #6
 800be2c:	0015      	movs	r5, r2
 800be2e:	401d      	ands	r5, r3
 800be30:	421a      	tst	r2, r3
 800be32:	d027      	beq.n	800be84 <_printf_common+0x8c>
 800be34:	0023      	movs	r3, r4
 800be36:	3343      	adds	r3, #67	@ 0x43
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	1e5a      	subs	r2, r3, #1
 800be3c:	4193      	sbcs	r3, r2
 800be3e:	6822      	ldr	r2, [r4, #0]
 800be40:	0692      	lsls	r2, r2, #26
 800be42:	d430      	bmi.n	800bea6 <_printf_common+0xae>
 800be44:	0022      	movs	r2, r4
 800be46:	9901      	ldr	r1, [sp, #4]
 800be48:	9800      	ldr	r0, [sp, #0]
 800be4a:	9d08      	ldr	r5, [sp, #32]
 800be4c:	3243      	adds	r2, #67	@ 0x43
 800be4e:	47a8      	blx	r5
 800be50:	3001      	adds	r0, #1
 800be52:	d025      	beq.n	800bea0 <_printf_common+0xa8>
 800be54:	2206      	movs	r2, #6
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	2500      	movs	r5, #0
 800be5a:	4013      	ands	r3, r2
 800be5c:	2b04      	cmp	r3, #4
 800be5e:	d105      	bne.n	800be6c <_printf_common+0x74>
 800be60:	6833      	ldr	r3, [r6, #0]
 800be62:	68e5      	ldr	r5, [r4, #12]
 800be64:	1aed      	subs	r5, r5, r3
 800be66:	43eb      	mvns	r3, r5
 800be68:	17db      	asrs	r3, r3, #31
 800be6a:	401d      	ands	r5, r3
 800be6c:	68a3      	ldr	r3, [r4, #8]
 800be6e:	6922      	ldr	r2, [r4, #16]
 800be70:	4293      	cmp	r3, r2
 800be72:	dd01      	ble.n	800be78 <_printf_common+0x80>
 800be74:	1a9b      	subs	r3, r3, r2
 800be76:	18ed      	adds	r5, r5, r3
 800be78:	2600      	movs	r6, #0
 800be7a:	42b5      	cmp	r5, r6
 800be7c:	d120      	bne.n	800bec0 <_printf_common+0xc8>
 800be7e:	2000      	movs	r0, #0
 800be80:	e010      	b.n	800bea4 <_printf_common+0xac>
 800be82:	3501      	adds	r5, #1
 800be84:	68e3      	ldr	r3, [r4, #12]
 800be86:	6832      	ldr	r2, [r6, #0]
 800be88:	1a9b      	subs	r3, r3, r2
 800be8a:	42ab      	cmp	r3, r5
 800be8c:	ddd2      	ble.n	800be34 <_printf_common+0x3c>
 800be8e:	0022      	movs	r2, r4
 800be90:	2301      	movs	r3, #1
 800be92:	9901      	ldr	r1, [sp, #4]
 800be94:	9800      	ldr	r0, [sp, #0]
 800be96:	9f08      	ldr	r7, [sp, #32]
 800be98:	3219      	adds	r2, #25
 800be9a:	47b8      	blx	r7
 800be9c:	3001      	adds	r0, #1
 800be9e:	d1f0      	bne.n	800be82 <_printf_common+0x8a>
 800bea0:	2001      	movs	r0, #1
 800bea2:	4240      	negs	r0, r0
 800bea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bea6:	2030      	movs	r0, #48	@ 0x30
 800bea8:	18e1      	adds	r1, r4, r3
 800beaa:	3143      	adds	r1, #67	@ 0x43
 800beac:	7008      	strb	r0, [r1, #0]
 800beae:	0021      	movs	r1, r4
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	3145      	adds	r1, #69	@ 0x45
 800beb4:	7809      	ldrb	r1, [r1, #0]
 800beb6:	18a2      	adds	r2, r4, r2
 800beb8:	3243      	adds	r2, #67	@ 0x43
 800beba:	3302      	adds	r3, #2
 800bebc:	7011      	strb	r1, [r2, #0]
 800bebe:	e7c1      	b.n	800be44 <_printf_common+0x4c>
 800bec0:	0022      	movs	r2, r4
 800bec2:	2301      	movs	r3, #1
 800bec4:	9901      	ldr	r1, [sp, #4]
 800bec6:	9800      	ldr	r0, [sp, #0]
 800bec8:	9f08      	ldr	r7, [sp, #32]
 800beca:	321a      	adds	r2, #26
 800becc:	47b8      	blx	r7
 800bece:	3001      	adds	r0, #1
 800bed0:	d0e6      	beq.n	800bea0 <_printf_common+0xa8>
 800bed2:	3601      	adds	r6, #1
 800bed4:	e7d1      	b.n	800be7a <_printf_common+0x82>
	...

0800bed8 <_printf_i>:
 800bed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beda:	b08b      	sub	sp, #44	@ 0x2c
 800bedc:	9206      	str	r2, [sp, #24]
 800bede:	000a      	movs	r2, r1
 800bee0:	3243      	adds	r2, #67	@ 0x43
 800bee2:	9307      	str	r3, [sp, #28]
 800bee4:	9005      	str	r0, [sp, #20]
 800bee6:	9203      	str	r2, [sp, #12]
 800bee8:	7e0a      	ldrb	r2, [r1, #24]
 800beea:	000c      	movs	r4, r1
 800beec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800beee:	2a78      	cmp	r2, #120	@ 0x78
 800bef0:	d809      	bhi.n	800bf06 <_printf_i+0x2e>
 800bef2:	2a62      	cmp	r2, #98	@ 0x62
 800bef4:	d80b      	bhi.n	800bf0e <_printf_i+0x36>
 800bef6:	2a00      	cmp	r2, #0
 800bef8:	d100      	bne.n	800befc <_printf_i+0x24>
 800befa:	e0bc      	b.n	800c076 <_printf_i+0x19e>
 800befc:	497b      	ldr	r1, [pc, #492]	@ (800c0ec <_printf_i+0x214>)
 800befe:	9104      	str	r1, [sp, #16]
 800bf00:	2a58      	cmp	r2, #88	@ 0x58
 800bf02:	d100      	bne.n	800bf06 <_printf_i+0x2e>
 800bf04:	e090      	b.n	800c028 <_printf_i+0x150>
 800bf06:	0025      	movs	r5, r4
 800bf08:	3542      	adds	r5, #66	@ 0x42
 800bf0a:	702a      	strb	r2, [r5, #0]
 800bf0c:	e022      	b.n	800bf54 <_printf_i+0x7c>
 800bf0e:	0010      	movs	r0, r2
 800bf10:	3863      	subs	r0, #99	@ 0x63
 800bf12:	2815      	cmp	r0, #21
 800bf14:	d8f7      	bhi.n	800bf06 <_printf_i+0x2e>
 800bf16:	f7f4 f8ff 	bl	8000118 <__gnu_thumb1_case_shi>
 800bf1a:	0016      	.short	0x0016
 800bf1c:	fff6001f 	.word	0xfff6001f
 800bf20:	fff6fff6 	.word	0xfff6fff6
 800bf24:	001ffff6 	.word	0x001ffff6
 800bf28:	fff6fff6 	.word	0xfff6fff6
 800bf2c:	fff6fff6 	.word	0xfff6fff6
 800bf30:	003600a1 	.word	0x003600a1
 800bf34:	fff60080 	.word	0xfff60080
 800bf38:	00b2fff6 	.word	0x00b2fff6
 800bf3c:	0036fff6 	.word	0x0036fff6
 800bf40:	fff6fff6 	.word	0xfff6fff6
 800bf44:	0084      	.short	0x0084
 800bf46:	0025      	movs	r5, r4
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	3542      	adds	r5, #66	@ 0x42
 800bf4c:	1d11      	adds	r1, r2, #4
 800bf4e:	6019      	str	r1, [r3, #0]
 800bf50:	6813      	ldr	r3, [r2, #0]
 800bf52:	702b      	strb	r3, [r5, #0]
 800bf54:	2301      	movs	r3, #1
 800bf56:	e0a0      	b.n	800c09a <_printf_i+0x1c2>
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	6809      	ldr	r1, [r1, #0]
 800bf5c:	1d02      	adds	r2, r0, #4
 800bf5e:	060d      	lsls	r5, r1, #24
 800bf60:	d50b      	bpl.n	800bf7a <_printf_i+0xa2>
 800bf62:	6806      	ldr	r6, [r0, #0]
 800bf64:	601a      	str	r2, [r3, #0]
 800bf66:	2e00      	cmp	r6, #0
 800bf68:	da03      	bge.n	800bf72 <_printf_i+0x9a>
 800bf6a:	232d      	movs	r3, #45	@ 0x2d
 800bf6c:	9a03      	ldr	r2, [sp, #12]
 800bf6e:	4276      	negs	r6, r6
 800bf70:	7013      	strb	r3, [r2, #0]
 800bf72:	4b5e      	ldr	r3, [pc, #376]	@ (800c0ec <_printf_i+0x214>)
 800bf74:	270a      	movs	r7, #10
 800bf76:	9304      	str	r3, [sp, #16]
 800bf78:	e018      	b.n	800bfac <_printf_i+0xd4>
 800bf7a:	6806      	ldr	r6, [r0, #0]
 800bf7c:	601a      	str	r2, [r3, #0]
 800bf7e:	0649      	lsls	r1, r1, #25
 800bf80:	d5f1      	bpl.n	800bf66 <_printf_i+0x8e>
 800bf82:	b236      	sxth	r6, r6
 800bf84:	e7ef      	b.n	800bf66 <_printf_i+0x8e>
 800bf86:	6808      	ldr	r0, [r1, #0]
 800bf88:	6819      	ldr	r1, [r3, #0]
 800bf8a:	c940      	ldmia	r1!, {r6}
 800bf8c:	0605      	lsls	r5, r0, #24
 800bf8e:	d402      	bmi.n	800bf96 <_printf_i+0xbe>
 800bf90:	0640      	lsls	r0, r0, #25
 800bf92:	d500      	bpl.n	800bf96 <_printf_i+0xbe>
 800bf94:	b2b6      	uxth	r6, r6
 800bf96:	6019      	str	r1, [r3, #0]
 800bf98:	4b54      	ldr	r3, [pc, #336]	@ (800c0ec <_printf_i+0x214>)
 800bf9a:	270a      	movs	r7, #10
 800bf9c:	9304      	str	r3, [sp, #16]
 800bf9e:	2a6f      	cmp	r2, #111	@ 0x6f
 800bfa0:	d100      	bne.n	800bfa4 <_printf_i+0xcc>
 800bfa2:	3f02      	subs	r7, #2
 800bfa4:	0023      	movs	r3, r4
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	3343      	adds	r3, #67	@ 0x43
 800bfaa:	701a      	strb	r2, [r3, #0]
 800bfac:	6863      	ldr	r3, [r4, #4]
 800bfae:	60a3      	str	r3, [r4, #8]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	db03      	blt.n	800bfbc <_printf_i+0xe4>
 800bfb4:	2104      	movs	r1, #4
 800bfb6:	6822      	ldr	r2, [r4, #0]
 800bfb8:	438a      	bics	r2, r1
 800bfba:	6022      	str	r2, [r4, #0]
 800bfbc:	2e00      	cmp	r6, #0
 800bfbe:	d102      	bne.n	800bfc6 <_printf_i+0xee>
 800bfc0:	9d03      	ldr	r5, [sp, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00c      	beq.n	800bfe0 <_printf_i+0x108>
 800bfc6:	9d03      	ldr	r5, [sp, #12]
 800bfc8:	0030      	movs	r0, r6
 800bfca:	0039      	movs	r1, r7
 800bfcc:	f7f4 f934 	bl	8000238 <__aeabi_uidivmod>
 800bfd0:	9b04      	ldr	r3, [sp, #16]
 800bfd2:	3d01      	subs	r5, #1
 800bfd4:	5c5b      	ldrb	r3, [r3, r1]
 800bfd6:	702b      	strb	r3, [r5, #0]
 800bfd8:	0033      	movs	r3, r6
 800bfda:	0006      	movs	r6, r0
 800bfdc:	429f      	cmp	r7, r3
 800bfde:	d9f3      	bls.n	800bfc8 <_printf_i+0xf0>
 800bfe0:	2f08      	cmp	r7, #8
 800bfe2:	d109      	bne.n	800bff8 <_printf_i+0x120>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	07db      	lsls	r3, r3, #31
 800bfe8:	d506      	bpl.n	800bff8 <_printf_i+0x120>
 800bfea:	6862      	ldr	r2, [r4, #4]
 800bfec:	6923      	ldr	r3, [r4, #16]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	dc02      	bgt.n	800bff8 <_printf_i+0x120>
 800bff2:	2330      	movs	r3, #48	@ 0x30
 800bff4:	3d01      	subs	r5, #1
 800bff6:	702b      	strb	r3, [r5, #0]
 800bff8:	9b03      	ldr	r3, [sp, #12]
 800bffa:	1b5b      	subs	r3, r3, r5
 800bffc:	6123      	str	r3, [r4, #16]
 800bffe:	9b07      	ldr	r3, [sp, #28]
 800c000:	0021      	movs	r1, r4
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	9805      	ldr	r0, [sp, #20]
 800c006:	9b06      	ldr	r3, [sp, #24]
 800c008:	aa09      	add	r2, sp, #36	@ 0x24
 800c00a:	f7ff fef5 	bl	800bdf8 <_printf_common>
 800c00e:	3001      	adds	r0, #1
 800c010:	d148      	bne.n	800c0a4 <_printf_i+0x1cc>
 800c012:	2001      	movs	r0, #1
 800c014:	4240      	negs	r0, r0
 800c016:	b00b      	add	sp, #44	@ 0x2c
 800c018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c01a:	2220      	movs	r2, #32
 800c01c:	6809      	ldr	r1, [r1, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	6022      	str	r2, [r4, #0]
 800c022:	2278      	movs	r2, #120	@ 0x78
 800c024:	4932      	ldr	r1, [pc, #200]	@ (800c0f0 <_printf_i+0x218>)
 800c026:	9104      	str	r1, [sp, #16]
 800c028:	0021      	movs	r1, r4
 800c02a:	3145      	adds	r1, #69	@ 0x45
 800c02c:	700a      	strb	r2, [r1, #0]
 800c02e:	6819      	ldr	r1, [r3, #0]
 800c030:	6822      	ldr	r2, [r4, #0]
 800c032:	c940      	ldmia	r1!, {r6}
 800c034:	0610      	lsls	r0, r2, #24
 800c036:	d402      	bmi.n	800c03e <_printf_i+0x166>
 800c038:	0650      	lsls	r0, r2, #25
 800c03a:	d500      	bpl.n	800c03e <_printf_i+0x166>
 800c03c:	b2b6      	uxth	r6, r6
 800c03e:	6019      	str	r1, [r3, #0]
 800c040:	07d3      	lsls	r3, r2, #31
 800c042:	d502      	bpl.n	800c04a <_printf_i+0x172>
 800c044:	2320      	movs	r3, #32
 800c046:	4313      	orrs	r3, r2
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	2e00      	cmp	r6, #0
 800c04c:	d001      	beq.n	800c052 <_printf_i+0x17a>
 800c04e:	2710      	movs	r7, #16
 800c050:	e7a8      	b.n	800bfa4 <_printf_i+0xcc>
 800c052:	2220      	movs	r2, #32
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	4393      	bics	r3, r2
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	e7f8      	b.n	800c04e <_printf_i+0x176>
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	680d      	ldr	r5, [r1, #0]
 800c060:	1d10      	adds	r0, r2, #4
 800c062:	6949      	ldr	r1, [r1, #20]
 800c064:	6018      	str	r0, [r3, #0]
 800c066:	6813      	ldr	r3, [r2, #0]
 800c068:	062e      	lsls	r6, r5, #24
 800c06a:	d501      	bpl.n	800c070 <_printf_i+0x198>
 800c06c:	6019      	str	r1, [r3, #0]
 800c06e:	e002      	b.n	800c076 <_printf_i+0x19e>
 800c070:	066d      	lsls	r5, r5, #25
 800c072:	d5fb      	bpl.n	800c06c <_printf_i+0x194>
 800c074:	8019      	strh	r1, [r3, #0]
 800c076:	2300      	movs	r3, #0
 800c078:	9d03      	ldr	r5, [sp, #12]
 800c07a:	6123      	str	r3, [r4, #16]
 800c07c:	e7bf      	b.n	800bffe <_printf_i+0x126>
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	1d11      	adds	r1, r2, #4
 800c082:	6019      	str	r1, [r3, #0]
 800c084:	6815      	ldr	r5, [r2, #0]
 800c086:	2100      	movs	r1, #0
 800c088:	0028      	movs	r0, r5
 800c08a:	6862      	ldr	r2, [r4, #4]
 800c08c:	f000 f896 	bl	800c1bc <memchr>
 800c090:	2800      	cmp	r0, #0
 800c092:	d001      	beq.n	800c098 <_printf_i+0x1c0>
 800c094:	1b40      	subs	r0, r0, r5
 800c096:	6060      	str	r0, [r4, #4]
 800c098:	6863      	ldr	r3, [r4, #4]
 800c09a:	6123      	str	r3, [r4, #16]
 800c09c:	2300      	movs	r3, #0
 800c09e:	9a03      	ldr	r2, [sp, #12]
 800c0a0:	7013      	strb	r3, [r2, #0]
 800c0a2:	e7ac      	b.n	800bffe <_printf_i+0x126>
 800c0a4:	002a      	movs	r2, r5
 800c0a6:	6923      	ldr	r3, [r4, #16]
 800c0a8:	9906      	ldr	r1, [sp, #24]
 800c0aa:	9805      	ldr	r0, [sp, #20]
 800c0ac:	9d07      	ldr	r5, [sp, #28]
 800c0ae:	47a8      	blx	r5
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	d0ae      	beq.n	800c012 <_printf_i+0x13a>
 800c0b4:	6823      	ldr	r3, [r4, #0]
 800c0b6:	079b      	lsls	r3, r3, #30
 800c0b8:	d415      	bmi.n	800c0e6 <_printf_i+0x20e>
 800c0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0bc:	68e0      	ldr	r0, [r4, #12]
 800c0be:	4298      	cmp	r0, r3
 800c0c0:	daa9      	bge.n	800c016 <_printf_i+0x13e>
 800c0c2:	0018      	movs	r0, r3
 800c0c4:	e7a7      	b.n	800c016 <_printf_i+0x13e>
 800c0c6:	0022      	movs	r2, r4
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	9906      	ldr	r1, [sp, #24]
 800c0cc:	9805      	ldr	r0, [sp, #20]
 800c0ce:	9e07      	ldr	r6, [sp, #28]
 800c0d0:	3219      	adds	r2, #25
 800c0d2:	47b0      	blx	r6
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d09c      	beq.n	800c012 <_printf_i+0x13a>
 800c0d8:	3501      	adds	r5, #1
 800c0da:	68e3      	ldr	r3, [r4, #12]
 800c0dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0de:	1a9b      	subs	r3, r3, r2
 800c0e0:	42ab      	cmp	r3, r5
 800c0e2:	dcf0      	bgt.n	800c0c6 <_printf_i+0x1ee>
 800c0e4:	e7e9      	b.n	800c0ba <_printf_i+0x1e2>
 800c0e6:	2500      	movs	r5, #0
 800c0e8:	e7f7      	b.n	800c0da <_printf_i+0x202>
 800c0ea:	46c0      	nop			@ (mov r8, r8)
 800c0ec:	0800c6e5 	.word	0x0800c6e5
 800c0f0:	0800c6f6 	.word	0x0800c6f6

0800c0f4 <__malloc_lock>:
 800c0f4:	b510      	push	{r4, lr}
 800c0f6:	4802      	ldr	r0, [pc, #8]	@ (800c100 <__malloc_lock+0xc>)
 800c0f8:	f7ff fc72 	bl	800b9e0 <__retarget_lock_acquire_recursive>
 800c0fc:	bd10      	pop	{r4, pc}
 800c0fe:	46c0      	nop			@ (mov r8, r8)
 800c100:	20001720 	.word	0x20001720

0800c104 <__malloc_unlock>:
 800c104:	b510      	push	{r4, lr}
 800c106:	4802      	ldr	r0, [pc, #8]	@ (800c110 <__malloc_unlock+0xc>)
 800c108:	f7ff fc6b 	bl	800b9e2 <__retarget_lock_release_recursive>
 800c10c:	bd10      	pop	{r4, pc}
 800c10e:	46c0      	nop			@ (mov r8, r8)
 800c110:	20001720 	.word	0x20001720

0800c114 <_realloc_r>:
 800c114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c116:	0006      	movs	r6, r0
 800c118:	000c      	movs	r4, r1
 800c11a:	0015      	movs	r5, r2
 800c11c:	2900      	cmp	r1, #0
 800c11e:	d105      	bne.n	800c12c <_realloc_r+0x18>
 800c120:	0011      	movs	r1, r2
 800c122:	f7ff fde9 	bl	800bcf8 <_malloc_r>
 800c126:	0004      	movs	r4, r0
 800c128:	0020      	movs	r0, r4
 800c12a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c12c:	2a00      	cmp	r2, #0
 800c12e:	d103      	bne.n	800c138 <_realloc_r+0x24>
 800c130:	f000 f850 	bl	800c1d4 <_free_r>
 800c134:	2400      	movs	r4, #0
 800c136:	e7f7      	b.n	800c128 <_realloc_r+0x14>
 800c138:	f000 f896 	bl	800c268 <_malloc_usable_size_r>
 800c13c:	0007      	movs	r7, r0
 800c13e:	4285      	cmp	r5, r0
 800c140:	d802      	bhi.n	800c148 <_realloc_r+0x34>
 800c142:	0843      	lsrs	r3, r0, #1
 800c144:	42ab      	cmp	r3, r5
 800c146:	d3ef      	bcc.n	800c128 <_realloc_r+0x14>
 800c148:	0029      	movs	r1, r5
 800c14a:	0030      	movs	r0, r6
 800c14c:	f7ff fdd4 	bl	800bcf8 <_malloc_r>
 800c150:	9001      	str	r0, [sp, #4]
 800c152:	2800      	cmp	r0, #0
 800c154:	d0ee      	beq.n	800c134 <_realloc_r+0x20>
 800c156:	002a      	movs	r2, r5
 800c158:	42bd      	cmp	r5, r7
 800c15a:	d900      	bls.n	800c15e <_realloc_r+0x4a>
 800c15c:	003a      	movs	r2, r7
 800c15e:	0021      	movs	r1, r4
 800c160:	9801      	ldr	r0, [sp, #4]
 800c162:	f7ff fc3f 	bl	800b9e4 <memcpy>
 800c166:	0021      	movs	r1, r4
 800c168:	0030      	movs	r0, r6
 800c16a:	f000 f833 	bl	800c1d4 <_free_r>
 800c16e:	9c01      	ldr	r4, [sp, #4]
 800c170:	e7da      	b.n	800c128 <_realloc_r+0x14>

0800c172 <memmove>:
 800c172:	b510      	push	{r4, lr}
 800c174:	4288      	cmp	r0, r1
 800c176:	d806      	bhi.n	800c186 <memmove+0x14>
 800c178:	2300      	movs	r3, #0
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d008      	beq.n	800c190 <memmove+0x1e>
 800c17e:	5ccc      	ldrb	r4, [r1, r3]
 800c180:	54c4      	strb	r4, [r0, r3]
 800c182:	3301      	adds	r3, #1
 800c184:	e7f9      	b.n	800c17a <memmove+0x8>
 800c186:	188b      	adds	r3, r1, r2
 800c188:	4298      	cmp	r0, r3
 800c18a:	d2f5      	bcs.n	800c178 <memmove+0x6>
 800c18c:	3a01      	subs	r2, #1
 800c18e:	d200      	bcs.n	800c192 <memmove+0x20>
 800c190:	bd10      	pop	{r4, pc}
 800c192:	5c8b      	ldrb	r3, [r1, r2]
 800c194:	5483      	strb	r3, [r0, r2]
 800c196:	e7f9      	b.n	800c18c <memmove+0x1a>

0800c198 <_sbrk_r>:
 800c198:	2300      	movs	r3, #0
 800c19a:	b570      	push	{r4, r5, r6, lr}
 800c19c:	4d06      	ldr	r5, [pc, #24]	@ (800c1b8 <_sbrk_r+0x20>)
 800c19e:	0004      	movs	r4, r0
 800c1a0:	0008      	movs	r0, r1
 800c1a2:	602b      	str	r3, [r5, #0]
 800c1a4:	f7f4 fe7a 	bl	8000e9c <_sbrk>
 800c1a8:	1c43      	adds	r3, r0, #1
 800c1aa:	d103      	bne.n	800c1b4 <_sbrk_r+0x1c>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d000      	beq.n	800c1b4 <_sbrk_r+0x1c>
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	bd70      	pop	{r4, r5, r6, pc}
 800c1b6:	46c0      	nop			@ (mov r8, r8)
 800c1b8:	2000172c 	.word	0x2000172c

0800c1bc <memchr>:
 800c1bc:	b2c9      	uxtb	r1, r1
 800c1be:	1882      	adds	r2, r0, r2
 800c1c0:	4290      	cmp	r0, r2
 800c1c2:	d101      	bne.n	800c1c8 <memchr+0xc>
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	4770      	bx	lr
 800c1c8:	7803      	ldrb	r3, [r0, #0]
 800c1ca:	428b      	cmp	r3, r1
 800c1cc:	d0fb      	beq.n	800c1c6 <memchr+0xa>
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	e7f6      	b.n	800c1c0 <memchr+0x4>
	...

0800c1d4 <_free_r>:
 800c1d4:	b570      	push	{r4, r5, r6, lr}
 800c1d6:	0005      	movs	r5, r0
 800c1d8:	1e0c      	subs	r4, r1, #0
 800c1da:	d010      	beq.n	800c1fe <_free_r+0x2a>
 800c1dc:	3c04      	subs	r4, #4
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	da00      	bge.n	800c1e6 <_free_r+0x12>
 800c1e4:	18e4      	adds	r4, r4, r3
 800c1e6:	0028      	movs	r0, r5
 800c1e8:	f7ff ff84 	bl	800c0f4 <__malloc_lock>
 800c1ec:	4a1d      	ldr	r2, [pc, #116]	@ (800c264 <_free_r+0x90>)
 800c1ee:	6813      	ldr	r3, [r2, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d105      	bne.n	800c200 <_free_r+0x2c>
 800c1f4:	6063      	str	r3, [r4, #4]
 800c1f6:	6014      	str	r4, [r2, #0]
 800c1f8:	0028      	movs	r0, r5
 800c1fa:	f7ff ff83 	bl	800c104 <__malloc_unlock>
 800c1fe:	bd70      	pop	{r4, r5, r6, pc}
 800c200:	42a3      	cmp	r3, r4
 800c202:	d908      	bls.n	800c216 <_free_r+0x42>
 800c204:	6820      	ldr	r0, [r4, #0]
 800c206:	1821      	adds	r1, r4, r0
 800c208:	428b      	cmp	r3, r1
 800c20a:	d1f3      	bne.n	800c1f4 <_free_r+0x20>
 800c20c:	6819      	ldr	r1, [r3, #0]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	1809      	adds	r1, r1, r0
 800c212:	6021      	str	r1, [r4, #0]
 800c214:	e7ee      	b.n	800c1f4 <_free_r+0x20>
 800c216:	001a      	movs	r2, r3
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <_free_r+0x4e>
 800c21e:	42a3      	cmp	r3, r4
 800c220:	d9f9      	bls.n	800c216 <_free_r+0x42>
 800c222:	6811      	ldr	r1, [r2, #0]
 800c224:	1850      	adds	r0, r2, r1
 800c226:	42a0      	cmp	r0, r4
 800c228:	d10b      	bne.n	800c242 <_free_r+0x6e>
 800c22a:	6820      	ldr	r0, [r4, #0]
 800c22c:	1809      	adds	r1, r1, r0
 800c22e:	1850      	adds	r0, r2, r1
 800c230:	6011      	str	r1, [r2, #0]
 800c232:	4283      	cmp	r3, r0
 800c234:	d1e0      	bne.n	800c1f8 <_free_r+0x24>
 800c236:	6818      	ldr	r0, [r3, #0]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	1841      	adds	r1, r0, r1
 800c23c:	6011      	str	r1, [r2, #0]
 800c23e:	6053      	str	r3, [r2, #4]
 800c240:	e7da      	b.n	800c1f8 <_free_r+0x24>
 800c242:	42a0      	cmp	r0, r4
 800c244:	d902      	bls.n	800c24c <_free_r+0x78>
 800c246:	230c      	movs	r3, #12
 800c248:	602b      	str	r3, [r5, #0]
 800c24a:	e7d5      	b.n	800c1f8 <_free_r+0x24>
 800c24c:	6820      	ldr	r0, [r4, #0]
 800c24e:	1821      	adds	r1, r4, r0
 800c250:	428b      	cmp	r3, r1
 800c252:	d103      	bne.n	800c25c <_free_r+0x88>
 800c254:	6819      	ldr	r1, [r3, #0]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	1809      	adds	r1, r1, r0
 800c25a:	6021      	str	r1, [r4, #0]
 800c25c:	6063      	str	r3, [r4, #4]
 800c25e:	6054      	str	r4, [r2, #4]
 800c260:	e7ca      	b.n	800c1f8 <_free_r+0x24>
 800c262:	46c0      	nop			@ (mov r8, r8)
 800c264:	20001728 	.word	0x20001728

0800c268 <_malloc_usable_size_r>:
 800c268:	1f0b      	subs	r3, r1, #4
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	1f18      	subs	r0, r3, #4
 800c26e:	2b00      	cmp	r3, #0
 800c270:	da01      	bge.n	800c276 <_malloc_usable_size_r+0xe>
 800c272:	580b      	ldr	r3, [r1, r0]
 800c274:	18c0      	adds	r0, r0, r3
 800c276:	4770      	bx	lr

0800c278 <_init>:
 800c278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27a:	46c0      	nop			@ (mov r8, r8)
 800c27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27e:	bc08      	pop	{r3}
 800c280:	469e      	mov	lr, r3
 800c282:	4770      	bx	lr

0800c284 <_fini>:
 800c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c286:	46c0      	nop			@ (mov r8, r8)
 800c288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c28a:	bc08      	pop	{r3}
 800c28c:	469e      	mov	lr, r3
 800c28e:	4770      	bx	lr
